{"version":3,"file":"gaussian-splats-3d.module.min.js","sources":["../src/SplatBuffer.js","../src/Util.js","../src/PlyParser.js","../src/PlyLoader.js","../src/SplatLoader.js","../src/OrbitControls.js","../src/LoadingSpinner.js","../src/ArrowHelper.js","../src/SceneHelper.js","../src/raycaster/Ray.js","../src/raycaster/Hit.js","../src/raycaster/Raycaster.js","../src/splattree/SplatTreeNode.js","../src/splattree/SplatTree.js","../src/SplatMesh.js","../src/Constants.js","../src/worker/SortWorker.js","../src/Viewer.js","../src/worker/sorter.wasm"],"sourcesContent":["import * as THREE from 'three';\n\nconst tempVector3A = new THREE.Vector3();\nconst tempVector3B = new THREE.Vector3();\nconst tempVector4A = new THREE.Vector4();\nconst tempVector4B = new THREE.Vector4();\nconst tempQuaternion4A = new THREE.Quaternion();\nconst tempQuaternion4B = new THREE.Quaternion();\n\nlet fbf;\nlet tbf;\n\nexport class SplatBuffer {\n\n    static PositionComponentCount = 3;\n    static ScaleComponentCount = 3;\n    static RotationComponentCount = 4;\n    static ColorComponentCount = 4;\n\n    static CompressionLevels = {\n        0: {\n            BytesPerPosition: 12,\n            BytesPerScale: 12,\n            BytesPerColor: 4,\n            BytesPerRotation: 16,\n            ScaleRange: 1\n        },\n        1: {\n            BytesPerPosition: 6,\n            BytesPerScale: 6,\n            BytesPerColor: 4,\n            BytesPerRotation: 8,\n            ScaleRange: 32767\n        }\n    };\n\n    static CovarianceSizeFloats = 6;\n    static CovarianceSizeBytes = 24;\n\n    static HeaderSizeBytes = 1024;\n\n    constructor(bufferData) {\n        this.headerBufferData = new ArrayBuffer(SplatBuffer.HeaderSizeBytes);\n        this.headerArrayUint8 = new Uint8Array(this.headerBufferData);\n        this.headerArrayUint32 = new Uint32Array(this.headerBufferData);\n        this.headerArrayFloat32 = new Float32Array(this.headerBufferData);\n        this.headerArrayUint8.set(new Uint8Array(bufferData, 0, SplatBuffer.HeaderSizeBytes));\n        this.versionMajor = this.headerArrayUint8[0];\n        this.versionMinor = this.headerArrayUint8[1];\n        this.headerExtraK = this.headerArrayUint8[2];\n        this.compressionLevel = this.headerArrayUint8[3];\n        this.splatCount = this.headerArrayUint32[1];\n        this.bucketSize = this.headerArrayUint32[2];\n        this.bucketCount = this.headerArrayUint32[3];\n        this.bucketBlockSize = this.headerArrayFloat32[4];\n        this.halfBucketBlockSize = this.bucketBlockSize / 2.0;\n        this.bytesPerBucket = this.headerArrayUint32[5];\n        this.compressionScaleRange = this.headerArrayUint32[6] || SplatBuffer.CompressionLevels[this.compressionLevel].ScaleRange;\n        this.compressionScaleFactor = this.halfBucketBlockSize / this.compressionScaleRange;\n\n        const dataBufferSizeBytes = bufferData.byteLength - SplatBuffer.HeaderSizeBytes;\n        this.splatBufferData = new ArrayBuffer(dataBufferSizeBytes);\n        new Uint8Array(this.splatBufferData).set(new Uint8Array(bufferData, SplatBuffer.HeaderSizeBytes, dataBufferSizeBytes));\n\n        this.bytesPerPosition = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerPosition;\n        this.bytesPerScale = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerScale;\n        this.bytesPerColor = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerColor;\n        this.bytesPerRotation = SplatBuffer.CompressionLevels[this.compressionLevel].BytesPerRotation;\n\n        this.bytesPerSplat = this.bytesPerPosition + this.bytesPerScale + this.bytesPerColor + this.bytesPerRotation;\n\n        fbf = this.fbf.bind(this);\n        tbf = this.tbf.bind(this);\n\n        this.linkBufferArrays();\n\n        this.precomputedCovarianceBufferData = null;\n    }\n\n    linkBufferArrays() {\n        let FloatArray = (this.compressionLevel === 0) ? Float32Array : Uint16Array;\n        this.positionArray = new FloatArray(this.splatBufferData, 0, this.splatCount * SplatBuffer.PositionComponentCount);\n        this.scaleArray = new FloatArray(this.splatBufferData, this.bytesPerPosition * this.splatCount,\n                                         this.splatCount * SplatBuffer.ScaleComponentCount);\n        this.colorArray = new Uint8Array(this.splatBufferData, (this.bytesPerPosition + this.bytesPerScale) * this.splatCount,\n                                         this.splatCount * SplatBuffer.ColorComponentCount);\n        this.rotationArray = new FloatArray(this.splatBufferData,\n                                             (this.bytesPerPosition + this.bytesPerScale + this.bytesPerColor) * this.splatCount,\n                                              this.splatCount * SplatBuffer.RotationComponentCount);\n        this.bucketsBase = this.splatCount * this.bytesPerSplat;\n    }\n\n    fbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.fromHalfFloat(f);\n        }\n    };\n\n    tbf(f) {\n        if (this.compressionLevel === 0) {\n            return f;\n        } else {\n            return THREE.DataUtils.toHalfFloat(f);\n        }\n    };\n\n    buildPreComputedBuffers() {\n        const splatCount = this.splatCount;\n\n        this.precomputedCovarianceBufferData = new ArrayBuffer(SplatBuffer.CovarianceSizeBytes * splatCount);\n        const covarianceArray = new Float32Array(this.precomputedCovarianceBufferData);\n\n        const scale = new THREE.Vector3();\n        const rotation = new THREE.Quaternion();\n        const rotationMatrix = new THREE.Matrix3();\n        const scaleMatrix = new THREE.Matrix3();\n        const covarianceMatrix = new THREE.Matrix3();\n        const tempMatrix4 = new THREE.Matrix4();\n\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            scale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n            tempMatrix4.makeScale(scale.x, scale.y, scale.z);\n            scaleMatrix.setFromMatrix4(tempMatrix4);\n\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            rotation.set(fbf(this.rotationArray[rotationBase + 1]),\n                         fbf(this.rotationArray[rotationBase + 2]),\n                         fbf(this.rotationArray[rotationBase + 3]),\n                         fbf(this.rotationArray[rotationBase]));\n            tempMatrix4.makeRotationFromQuaternion(rotation);\n            rotationMatrix.setFromMatrix4(tempMatrix4);\n\n            covarianceMatrix.copy(rotationMatrix).multiply(scaleMatrix);\n            const M = covarianceMatrix.elements;\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i] = M[0] * M[0] + M[3] * M[3] + M[6] * M[6];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 1] = M[0] * M[1] + M[3] * M[4] + M[6] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 2] = M[0] * M[2] + M[3] * M[5] + M[6] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 3] = M[1] * M[1] + M[4] * M[4] + M[7] * M[7];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 4] = M[1] * M[2] + M[4] * M[5] + M[7] * M[8];\n            covarianceArray[SplatBuffer.CovarianceSizeFloats * i + 5] = M[2] * M[2] + M[5] * M[5] + M[8] * M[8];\n        }\n    }\n\n    getHeaderBufferData() {\n        return this.headerBufferData;\n    }\n\n    getSplatBufferData() {\n        return this.splatBufferData;\n    }\n\n    getPosition(index, outPosition = new THREE.Vector3()) {\n        let bucket = [0, 0, 0];\n        const positionBase = index * SplatBuffer.PositionComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            outPosition.x = (this.positionArray[positionBase] - sr) * sf + bucket[0];\n            outPosition.y = (this.positionArray[positionBase + 1] - sr) * sf + bucket[1];\n            outPosition.z = (this.positionArray[positionBase + 2] - sr) * sf + bucket[2];\n        } else {\n            outPosition.x = this.positionArray[positionBase];\n            outPosition.y = this.positionArray[positionBase + 1];\n            outPosition.z = this.positionArray[positionBase + 2];\n        }\n        return outPosition;\n    }\n\n    setPosition(index, position) {\n        let bucket = [0, 0, 0];\n        const positionBase = index * SplatBuffer.PositionComponentCount;\n        if (this.compressionLevel > 0) {\n            const sf = 1.0 / this.compressionScaleFactor;\n            const sr = this.compressionScaleRange;\n            const maxR = sr * 2 + 1;\n            const bucketIndex = Math.floor(index / this.bucketSize);\n            bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n            this.positionArray[positionBase] = clamp(Math.round((position.x - bucket[0]) * sf) + sr, 0, maxR);\n            this.positionArray[positionBase + 1] = clamp(Math.round((position.y - bucket[1]) * sf) + sr, 0, maxR);\n            this.positionArray[positionBase + 2] = clamp(Math.round((position.z - bucket[2]) * sf) + sr, 0, maxR);\n        } else {\n            this.positionArray[positionBase] = position.x;\n            this.positionArray[positionBase + 1] = position.y;\n            this.positionArray[positionBase + 2] = position.z;\n        }\n    }\n\n    getScale(index, outScale = new THREE.Vector3()) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        outScale.set(fbf(this.scaleArray[scaleBase]), fbf(this.scaleArray[scaleBase + 1]), fbf(this.scaleArray[scaleBase + 2]));\n        return outScale;\n    }\n\n    setScale(index, scale) {\n        const scaleBase = index * SplatBuffer.ScaleComponentCount;\n        this.scaleArray[scaleBase] = tbf(scale.x);\n        this.scaleArray[scaleBase + 1] = tbf(scale.y);\n        this.scaleArray[scaleBase + 2] = tbf(scale.z);\n    }\n\n    getRotation(index, outRotation = new THREE.Quaternion()) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        outRotation.set(fbf(this.rotationArray[rotationBase + 1]), fbf(this.rotationArray[rotationBase + 2]),\n                        fbf(this.rotationArray[rotationBase + 3]), fbf(this.rotationArray[rotationBase]));\n        return outRotation;\n    }\n\n    setRotation(index, rotation) {\n        const rotationBase = index * SplatBuffer.RotationComponentCount;\n        this.rotationArray[rotationBase] = tbf(rotation.w);\n        this.rotationArray[rotationBase + 1] = tbf(rotation.x);\n        this.rotationArray[rotationBase + 2] = tbf(rotation.y);\n        this.rotationArray[rotationBase + 3] = tbf(rotation.z);\n    }\n\n    getColor(index, outColor = new THREE.Vector4()) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        outColor.set(this.colorArray[colorBase], this.colorArray[colorBase + 1],\n                     this.colorArray[colorBase + 2], this.colorArray[colorBase + 3]);\n        return outColor;\n    }\n\n    setColor(index, color) {\n        const colorBase = index * SplatBuffer.ColorComponentCount;\n        this.colorArray[colorBase] = color.x;\n        this.colorArray[colorBase + 1] = color.y;\n        this.colorArray[colorBase + 2] = color.z;\n        this.colorArray[colorBase + 3] = color.w;\n    }\n\n    getPrecomputedCovarianceBufferData() {\n        return this.precomputedCovarianceBufferData;\n    }\n\n    getSplatCount() {\n        return this.splatCount;\n    }\n\n    fillPositionArray(outPositionArray) {\n        const splatCount = this.splatCount;\n        let bucket = [0, 0, 0];\n        for (let i = 0; i < splatCount; i++) {\n            const positionBase = i * SplatBuffer.PositionComponentCount;\n            if (this.compressionLevel > 0) {\n                const bucketIndex = Math.floor(i / this.bucketSize);\n                bucket = new Float32Array(this.splatBufferData, this.bucketsBase + bucketIndex * this.bytesPerBucket, 3);\n                const sf = this.compressionScaleFactor;\n                const sr = this.compressionScaleRange;\n                outPositionArray[positionBase] = (this.positionArray[positionBase] - sr) * sf + bucket[0];\n                outPositionArray[positionBase + 1] = (this.positionArray[positionBase + 1] - sr) * sf + bucket[1];\n                outPositionArray[positionBase + 2] = (this.positionArray[positionBase + 2] - sr) * sf + bucket[2];\n            } else {\n                outPositionArray[positionBase] = this.positionArray[positionBase];\n                outPositionArray[positionBase + 1] = this.positionArray[positionBase + 1];\n                outPositionArray[positionBase + 2] = this.positionArray[positionBase + 2];\n            }\n        }\n    }\n\n    fillScaleArray(outScaleArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const scaleBase = i * SplatBuffer.ScaleComponentCount;\n            outScaleArray[scaleBase] = fbf(this.scaleArray[scaleBase]);\n            outScaleArray[scaleBase + 1] = fbf(this.scaleArray[scaleBase + 1]);\n            outScaleArray[scaleBase + 2] = fbf(this.scaleArray[scaleBase + 2]);\n        }\n    }\n\n    fillRotationArray(outRotationArray) {\n        const fbf = this.fbf.bind(this);\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const rotationBase = i * SplatBuffer.RotationComponentCount;\n            outRotationArray[rotationBase] = fbf(this.rotationArray[rotationBase]);\n            outRotationArray[rotationBase + 1] = fbf(this.rotationArray[rotationBase + 1]);\n            outRotationArray[rotationBase + 2] = fbf(this.rotationArray[rotationBase + 2]);\n            outRotationArray[rotationBase + 3] = fbf(this.rotationArray[rotationBase + 3]);\n        }\n    }\n\n    fillColorArray(outColorArray) {\n        const splatCount = this.splatCount;\n        for (let i = 0; i < splatCount; i++) {\n            const colorBase = i * SplatBuffer.ColorComponentCount;\n            outColorArray[colorBase] = this.colorArray[colorBase];\n            outColorArray[colorBase + 1] = this.colorArray[colorBase + 1];\n            outColorArray[colorBase + 2] = this.colorArray[colorBase + 2];\n            outColorArray[colorBase + 3] = this.colorArray[colorBase + 3];\n        }\n    }\n\n    swapVertices(indexA, indexB) {\n\n        this.getPosition(indexA, tempVector3A);\n        this.getPosition(indexB, tempVector3B);\n        this.setPosition(indexB, tempVector3A);\n        this.setPosition(indexA, tempVector3B);\n\n        this.getScale(indexA, tempVector3A);\n        this.getScale(indexB, tempVector3B);\n        this.setScale(indexB, tempVector3A);\n        this.setScale(indexA, tempVector3B);\n\n        this.getRotation(indexA, tempQuaternion4A);\n        this.getRotation(indexB, tempQuaternion4B);\n        this.setRotation(indexB, tempQuaternion4A);\n        this.setRotation(indexA, tempQuaternion4B);\n\n        this.getColor(indexA, tempVector4A);\n        this.getColor(indexB, tempVector4B);\n        this.setColor(indexB, tempVector4A);\n        this.setColor(indexA, tempVector4B);\n\n    }\n\n}\n","export const floatToHalf = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(val) {\n        floatView[0] = val;\n        const x = int32View[0];\n\n        let bits = (x >> 16) & 0x8000;\n        let m = (x >> 12) & 0x07ff;\n        const e = (x >> 23) & 0xff;\n\n        if (e < 103) return bits;\n\n        if (e > 142) {\n            bits |= 0x7c00;\n            bits |= ((e == 255) ? 0 : 1) && (x & 0x007fffff);\n            return bits;\n        }\n\n        if (e < 113) {\n            m |= 0x0800;\n            bits |= (m >> (114 - e)) + ((m >> (113 - e)) & 1);\n            return bits;\n        }\n\n        bits |= (( e - 112) << 10) | (m >> 1);\n        bits += m & 1;\n        return bits;\n    };\n\n}();\n\nexport const uintEncodedFloat = function() {\n\n    const floatView = new Float32Array(1);\n    const int32View = new Int32Array(floatView.buffer);\n\n    return function(f) {\n        floatView[0] = f;\n        return int32View[0];\n    };\n\n}();\n\nexport const rgbaToInteger = function(r, g, b, a) {\n    return r + (g << 8) + (b << 16) + (a << 24);\n};\n\nexport const fetchWithProgress = function(path, onProgress) {\n\n    return new Promise((resolve, reject) => {\n        fetch(path)\n        .then(async (data) => {\n            const reader = data.body.getReader();\n            let bytesDownloaded = 0;\n            let _fileSize = data.headers.get('Content-Length');\n            let fileSize = _fileSize ? parseInt(_fileSize) : undefined;\n\n            const chunks = [];\n\n            while (true) {\n                try {\n                    const { value: chunk, done } = await reader.read();\n                    if (done) {\n                        if (onProgress) {\n                            onProgress(100, '100%', chunk);\n                        }\n                        const buffer = new Blob(chunks).arrayBuffer();\n                        resolve(buffer);\n                        break;\n                    }\n                    bytesDownloaded += chunk.length;\n                    let percent;\n                    let percentLabel;\n                    if (fileSize !== undefined) {\n                        percent = bytesDownloaded / fileSize * 100;\n                        percentLabel = `${percent.toFixed(2)}%`;\n                    }\n                    chunks.push(chunk);\n                    if (onProgress) {\n                        onProgress(percent, percentLabel, chunk);\n                    }\n                } catch (error) {\n                    reject(error);\n                    break;\n                }\n            }\n        });\n    });\n\n};\n\nexport const clamp = function(val, min, max) {\n    return Math.max(Math.min(val, max), min);\n};\n\nexport const getCurrentTime = function() {\n    return performance.now() / 1000;\n};\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { clamp } from './Util.js';\nimport * as THREE from 'three';\n\nconst SplatBufferBucketSize = 256;\nconst SplatBufferBucketBlockSize = 5.0;\n\nexport class PlyParser {\n\n    constructor(plyBuffer) {\n        this.plyBuffer = plyBuffer;\n    }\n\n    decodeHeader(plyBuffer) {\n        const decoder = new TextDecoder();\n        let headerOffset = 0;\n        let headerText = '';\n\n        console.log('.PLY size: ' + plyBuffer.byteLength + ' bytes');\n\n        const readChunkSize = 100;\n\n        while (true) {\n            if (headerOffset + readChunkSize >= plyBuffer.byteLength) {\n                throw new Error('End of file reached while searching for end of header');\n            }\n            const headerChunk = new Uint8Array(plyBuffer, headerOffset, readChunkSize);\n            headerText += decoder.decode(headerChunk);\n            headerOffset += readChunkSize;\n\n            const endHeaderTestChunk = new Uint8Array(plyBuffer, Math.max(0, headerOffset - readChunkSize * 2), readChunkSize * 2);\n            const endHeaderTestText = decoder.decode(endHeaderTestChunk);\n            if (endHeaderTestText.includes('end_header')) {\n                break;\n            }\n        }\n\n        const headerLines = headerText.split('\\n');\n\n        let splatCount = 0;\n        let propertyTypes = {};\n\n        for (let i = 0; i < headerLines.length; i++) {\n            const line = headerLines[i].trim();\n            if (line.startsWith('element vertex')) {\n                const splatCountMatch = line.match(/\\d+/);\n                if (splatCountMatch) {\n                    splatCount = parseInt(splatCountMatch[0]);\n                }\n            } else if (line.startsWith('property')) {\n                const propertyMatch = line.match(/(\\w+)\\s+(\\w+)\\s+(\\w+)/);\n                if (propertyMatch) {\n                    const propertyType = propertyMatch[2];\n                    const propertyName = propertyMatch[3];\n                    propertyTypes[propertyName] = propertyType;\n                }\n            } else if (line === 'end_header') {\n                break;\n            }\n        }\n\n        const vertexByteOffset = headerText.indexOf('end_header') + 'end_header'.length + 1;\n        const vertexData = new DataView(plyBuffer, vertexByteOffset);\n\n        return {\n            'splatCount': splatCount,\n            'propertyTypes': propertyTypes,\n            'vertexData': vertexData,\n            'headerOffset': headerOffset\n        };\n    }\n\n    readRawVertexFast(vertexData, offset, fieldOffsets, propertiesToRead, propertyTypes, outVertex) {\n        let rawVertex = outVertex || {};\n        for (let property of propertiesToRead) {\n            const propertyType = propertyTypes[property];\n            if (propertyType === 'float') {\n                rawVertex[property] = vertexData.getFloat32(offset + fieldOffsets[property], true);\n            } else if (propertyType === 'uchar') {\n                rawVertex[property] = vertexData.getUint8(offset + fieldOffsets[property]) / 255.0;\n            }\n        }\n    }\n\n    parseToSplatBuffer(compressionLevel = 0, minimumAlpha = 1) {\n\n        const startTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT...');\n\n        const {splatCount, propertyTypes, vertexData} = this.decodeHeader(this.plyBuffer);\n\n        // figure out the SH degree from the number of coefficients\n        let nRestCoeffs = 0;\n        for (const propertyName in propertyTypes) {\n            if (propertyName.startsWith('f_rest_')) {\n                nRestCoeffs += 1;\n            }\n        }\n        const nCoeffsPerColor = nRestCoeffs / 3;\n\n        // TODO: Eventually properly support multiple degree spherical harmonics\n        // const sphericalHarmonicsDegree = Math.sqrt(nCoeffsPerColor + 1) - 1;\n        const sphericalHarmonicsDegree = 0;\n\n        console.log('Detected degree', sphericalHarmonicsDegree, 'with ', nCoeffsPerColor, 'coefficients per color');\n\n        // figure out the order in which spherical harmonics should be read\n        const shFeatureOrder = [];\n        for (let rgb = 0; rgb < 3; ++rgb) {\n            shFeatureOrder.push(`f_dc_${rgb}`);\n        }\n        for (let i = 0; i < nCoeffsPerColor; ++i) {\n            for (let rgb = 0; rgb < 3; ++rgb) {\n                shFeatureOrder.push(`f_rest_${rgb * nCoeffsPerColor + i}`);\n            }\n        }\n\n        let plyRowSize = 0;\n        let fieldOffsets = {};\n        const fieldSize = {\n            'double': 8,\n            'int': 4,\n            'uint': 4,\n            'float': 4,\n            'short': 2,\n            'ushort': 2,\n            'uchar': 1,\n        };\n        for (let fieldName in propertyTypes) {\n            if (propertyTypes.hasOwnProperty(fieldName)) {\n                const type = propertyTypes[fieldName];\n                fieldOffsets[fieldName] = plyRowSize;\n                plyRowSize += fieldSize[type];\n            }\n        }\n\n        let rawVertex = {};\n\n        const propertiesToRead = ['scale_0', 'scale_1', 'scale_2', 'rot_0', 'rot_1', 'rot_2', 'rot_3',\n                                  'x', 'y', 'z', 'f_dc_0', 'f_dc_1', 'f_dc_2', 'opacity'];\n\n        const validVertexes = [];\n        // dummy vertex used for invalid vertexes\n        const vertexZero = {};\n        for (let propertyToRead of propertiesToRead) vertexZero[propertyToRead] = 0;\n        validVertexes.push(vertexZero);\n        for (let row = 0; row < splatCount; row++) {\n            this.readRawVertexFast(vertexData, row * plyRowSize, fieldOffsets, propertiesToRead, propertyTypes, rawVertex);\n            let alpha;\n            if (propertyTypes['opacity']) {\n                alpha = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n            } else {\n                alpha = 255;\n            }\n            if (alpha > minimumAlpha) {\n                const newVertex = {};\n                for (let propertyToRead of propertiesToRead) newVertex[propertyToRead] = rawVertex[propertyToRead];\n                validVertexes.push(newVertex);\n            }\n        }\n\n        console.log('Total valid splats: ', validVertexes.length, 'out of', splatCount);\n\n        const positionsForBucketCalcs = [];\n        for (let row = 0; row < validVertexes.length; row++) {\n            rawVertex = validVertexes[row];\n            positionsForBucketCalcs.push([rawVertex.x, rawVertex.y, rawVertex.z]);\n        }\n        const buckets = this.computeBuckets(positionsForBucketCalcs);\n\n        const paddedSplatCount = buckets.length * SplatBufferBucketSize;\n        const headerSize = SplatBuffer.HeaderSizeBytes;\n        const header = new Uint8Array(new ArrayBuffer(headerSize));\n        header[3] = compressionLevel;\n        (new Uint32Array(header.buffer, 4, 1))[0] = paddedSplatCount;\n\n        let bytesPerPosition = SplatBuffer.CompressionLevels[compressionLevel].BytesPerPosition;\n        let bytesPerScale = SplatBuffer.CompressionLevels[compressionLevel].BytesPerScale;\n        let bytesPerColor = SplatBuffer.CompressionLevels[compressionLevel].BytesPerColor;\n        let bytesPerRotation = SplatBuffer.CompressionLevels[compressionLevel].BytesPerRotation;\n        const positionBuffer = new ArrayBuffer(bytesPerPosition * paddedSplatCount);\n        const scaleBuffer = new ArrayBuffer(bytesPerScale * paddedSplatCount);\n        const colorBuffer = new ArrayBuffer(bytesPerColor * paddedSplatCount);\n        const rotationBuffer = new ArrayBuffer(bytesPerRotation * paddedSplatCount);\n\n        const blockHalfSize = SplatBufferBucketBlockSize / 2.0;\n        const compressionScaleRange = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        const compressionScaleFactor = compressionScaleRange / blockHalfSize;\n        const doubleCompressionScaleRange = compressionScaleRange * 2 + 1;\n\n        const bucketCenter = new THREE.Vector3();\n        const bucketCenterDelta = new THREE.Vector3();\n        let outSplatIndex = 0;\n        for (let b = 0; b < buckets.length; b++) {\n            const bucket = buckets[b];\n            bucketCenter.fromArray(bucket.center);\n            for (let i = 0; i < bucket.splats.length; i++) {\n                let row = bucket.splats[i];\n                let invalidSplat = false;\n                if (row === 0) {\n                    invalidSplat = true;\n                }\n                rawVertex = validVertexes[row];\n\n                if (compressionLevel === 0) {\n                    const position = new Float32Array(positionBuffer, outSplatIndex * bytesPerPosition, 3);\n                    const scales = new Float32Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Float32Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([quat.w, quat.x, quat.y, quat.z]);\n                        scales.set([Math.exp(rawVertex.scale_0), Math.exp(rawVertex.scale_1), Math.exp(rawVertex.scale_2)]);\n                    } else {\n                        scales.set([0.01, 0.01, 0.01]);\n                        rot.set([1.0, 0.0, 0.0, 0.0]);\n                    }\n                    position.set([rawVertex.x, rawVertex.y, rawVertex.z]);\n                } else {\n                    const position = new Uint16Array(positionBuffer, outSplatIndex * bytesPerPosition, 3);\n                    const scales = new Uint16Array(scaleBuffer, outSplatIndex * bytesPerScale, 3);\n                    const rot = new Uint16Array(rotationBuffer, outSplatIndex * bytesPerRotation, 4);\n                    const thf = THREE.DataUtils.toHalfFloat.bind(THREE.DataUtils);\n                    if (propertyTypes['scale_0']) {\n                        const quat = new THREE.Quaternion(rawVertex.rot_1, rawVertex.rot_2, rawVertex.rot_3, rawVertex.rot_0);\n                        quat.normalize();\n                        rot.set([thf(quat.w), thf(quat.x), thf(quat.y), thf(quat.z)]);\n                        scales.set([thf(Math.exp(rawVertex.scale_0)), thf(Math.exp(rawVertex.scale_1)), thf(Math.exp(rawVertex.scale_2))]);\n                    } else {\n                        scales.set([thf(0.01), thf(0.01), thf(0.01)]);\n                        rot.set([thf(1.), 0, 0, 0]);\n                    }\n                    bucketCenterDelta.set(rawVertex.x, rawVertex.y, rawVertex.z).sub(bucketCenter);\n                    bucketCenterDelta.x = Math.round(bucketCenterDelta.x * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.x = clamp(bucketCenterDelta.x, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.y = Math.round(bucketCenterDelta.y * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.y = clamp(bucketCenterDelta.y, 0, doubleCompressionScaleRange);\n                    bucketCenterDelta.z = Math.round(bucketCenterDelta.z * compressionScaleFactor) + compressionScaleRange;\n                    bucketCenterDelta.z = clamp(bucketCenterDelta.z, 0, doubleCompressionScaleRange);\n                    position.set([bucketCenterDelta.x, bucketCenterDelta.y, bucketCenterDelta.z]);\n                }\n\n                const rgba = new Uint8ClampedArray(colorBuffer, outSplatIndex * bytesPerColor, 4);\n                if (invalidSplat) {\n                    rgba[0] = 255;\n                    rgba[1] = 0;\n                    rgba[2] = 0;\n                    rgba[3] = 0;\n                } else {\n                    if (propertyTypes['f_dc_0']) {\n                        const SH_C0 = 0.28209479177387814;\n                        rgba.set([(0.5 + SH_C0 * rawVertex.f_dc_0) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_1) * 255,\n                                  (0.5 + SH_C0 * rawVertex.f_dc_2) * 255]);\n                    } else {\n                        rgba.set([255, 0, 0]);\n                    }\n                    if (propertyTypes['opacity']) {\n                        rgba[3] = (1 / (1 + Math.exp(-rawVertex.opacity))) * 255;\n                    } else {\n                        rgba[3] = 255;\n                    }\n                }\n\n                outSplatIndex++;\n            }\n        }\n\n        const bytesPerBucket = 12;\n        const bucketsSize = bytesPerBucket * buckets.length;\n        const splatDataBufferSize = positionBuffer.byteLength + scaleBuffer.byteLength +\n                                    colorBuffer.byteLength + rotationBuffer.byteLength;\n\n        const headerArrayUint32 = new Uint32Array(header.buffer);\n        const headerArrayFloat32 = new Float32Array(header.buffer);\n        let unifiedBufferSize = headerSize + splatDataBufferSize;\n        if (compressionLevel > 0) {\n            unifiedBufferSize += bucketsSize;\n            headerArrayUint32[2] = SplatBufferBucketSize;\n            headerArrayUint32[3] = buckets.length;\n            headerArrayFloat32[4] = SplatBufferBucketBlockSize;\n            headerArrayUint32[5] = bytesPerBucket;\n            headerArrayUint32[6] = SplatBuffer.CompressionLevels[compressionLevel].ScaleRange;\n        }\n\n        const unifiedBuffer = new ArrayBuffer(unifiedBufferSize);\n        new Uint8Array(unifiedBuffer, 0, headerSize).set(header);\n        new Uint8Array(unifiedBuffer, headerSize, positionBuffer.byteLength).set(new Uint8Array(positionBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength, scaleBuffer.byteLength).set(new Uint8Array(scaleBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength + scaleBuffer.byteLength,\n                       colorBuffer.byteLength).set(new Uint8Array(colorBuffer));\n        new Uint8Array(unifiedBuffer, headerSize + positionBuffer.byteLength + scaleBuffer.byteLength + colorBuffer.byteLength,\n                       rotationBuffer.byteLength).set(new Uint8Array(rotationBuffer));\n\n        if (compressionLevel > 0) {\n            const bucketArray = new Float32Array(unifiedBuffer, headerSize + splatDataBufferSize, buckets.length * 3);\n            for (let i = 0; i < buckets.length; i++) {\n                const bucket = buckets[i];\n                const base = i * 3;\n                bucketArray[base] = bucket.center[0];\n                bucketArray[base + 1] = bucket.center[1];\n                bucketArray[base + 2] = bucket.center[2];\n            }\n        }\n\n        const splatBuffer = new SplatBuffer(unifiedBuffer);\n\n        const endTime = performance.now();\n\n        console.log('Parsing PLY to SPLAT complete!');\n        console.log('Total time: ', (endTime - startTime).toFixed(2) + ' ms');\n\n        return splatBuffer;\n    }\n\n    computeBuckets(positions) {\n        const blockSize = SplatBufferBucketBlockSize;\n        const halfBlockSize = blockSize / 2.0;\n        const splatCount = positions.length;\n\n        const min = new THREE.Vector3();\n        const max = new THREE.Vector3();\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const position = positions[i];\n            if (i === 0 || position[0] < min.x) min.x = position[0];\n            if (i === 0 || position[0] > max.x) max.x = position[0];\n            if (i === 0 || position[1] < min.y) min.y = position[1];\n            if (i === 0 || position[1] > max.y) max.y = position[1];\n            if (i === 0 || position[2] < min.z) min.z = position[2];\n            if (i === 0 || position[2] > max.z) max.z = position[2];\n        }\n\n        const dimensions = new THREE.Vector3().copy(max).sub(min);\n        const yBlocks = Math.ceil(dimensions.y / blockSize);\n        const zBlocks = Math.ceil(dimensions.z / blockSize);\n\n        const blockCenter = new THREE.Vector3();\n        const fullBuckets = [];\n        const partiallyFullBuckets = {};\n\n        // ignore the first splat since it's the invalid designator\n        for (let i = 1; i < splatCount; i++) {\n            const position = positions[i];\n            const xBlock = Math.ceil((position[0] - min.x) / blockSize);\n            const yBlock = Math.ceil((position[1] - min.y) / blockSize);\n            const zBlock = Math.ceil((position[2] - min.z) / blockSize);\n\n            blockCenter.x = (xBlock - 1) * blockSize + min.x + halfBlockSize;\n            blockCenter.y = (yBlock - 1) * blockSize + min.y + halfBlockSize;\n            blockCenter.z = (zBlock - 1) * blockSize + min.z + halfBlockSize;\n\n            const bucketId = xBlock * (yBlocks * zBlocks) + yBlock * zBlocks + zBlock;\n            let bucket = partiallyFullBuckets[bucketId];\n            if (!bucket) {\n                partiallyFullBuckets[bucketId] = bucket = {\n                    'splats': [],\n                    'center': blockCenter.toArray()\n                };\n            }\n\n            bucket.splats.push(i);\n            if (bucket.splats.length >= SplatBufferBucketSize) {\n                fullBuckets.push(bucket);\n                partiallyFullBuckets[bucketId] = null;\n            }\n        }\n\n        // fill partially full buckets with invalid splats (splat 0)\n        // to get them up to SplatBufferBucketSize\n        for (let bucketId in partiallyFullBuckets) {\n            if (partiallyFullBuckets.hasOwnProperty(bucketId)) {\n                const bucket = partiallyFullBuckets[bucketId];\n                if (bucket) {\n                    while (bucket.splats.length < SplatBufferBucketSize) {\n                        bucket.splats.push(0);\n                    }\n                    fullBuckets.push(bucket);\n                }\n            }\n        }\n\n        return fullBuckets;\n    }\n}\n","import { PlyParser } from './PlyParser.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class PlyLoader {\n\n    constructor() {\n        this.splatBuffer = null;\n    }\n\n    fetchFile(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((data) => {\n                resolve(data);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    loadFromURL(fileName, compressionLevel = 0, minimumAlpha = 1) {\n        return new Promise((resolve, reject) => {\n            const loadPromise = this.fetchFile(fileName);\n            loadPromise\n            .then((plyFileData) => {\n                const plyParser = new PlyParser(plyFileData);\n                const splatBuffer = plyParser.parseToSplatBuffer(compressionLevel, minimumAlpha);\n                this.splatBuffer = splatBuffer;\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n}\n","import { SplatBuffer } from './SplatBuffer.js';\nimport { fetchWithProgress } from './Util.js';\n\nexport class SplatLoader {\n\n    constructor(splatBuffer = null) {\n        this.splatBuffer = splatBuffer;\n        this.downLoadLink = null;\n    }\n\n    loadFromURL(fileName, onProgress) {\n        return new Promise((resolve, reject) => {\n            fetchWithProgress(fileName, onProgress)\n            .then((bufferData) => {\n                const splatBuffer = new SplatBuffer(bufferData);\n                resolve(splatBuffer);\n            })\n            .catch((err) => {\n                reject(err);\n            });\n        });\n    }\n\n    setFromBuffer(splatBuffer) {\n        this.splatBuffer = splatBuffer;\n    }\n\n    downloadFile(fileName) {\n        const headerData = new Uint8Array(this.splatBuffer.getHeaderBufferData());\n        const splatData = new Uint8Array(this.splatBuffer.getSplatBufferData());\n        const blob = new Blob([headerData.buffer, splatData.buffer], {\n            type: 'application/octet-stream',\n        });\n\n        if (!this.downLoadLink) {\n            this.downLoadLink = document.createElement('a');\n            document.body.appendChild(this.downLoadLink);\n        }\n        this.downLoadLink.download = fileName;\n        this.downLoadLink.href = URL.createObjectURL(blob);\n        this.downLoadLink.click();\n    }\n\n}\n","import {\n    EventDispatcher,\n    MOUSE,\n    Quaternion,\n    Spherical,\n    TOUCH,\n    Vector2,\n    Vector3,\n    Plane,\n    Ray,\n    MathUtils\n} from 'three';\n\n// OrbitControls performs orbiting, dollying (zooming), and panning.\n// Unlike TrackballControls, it maintains the \"up\" direction object.up (+Y by default).\n//\n//    Orbit - left mouse / touch: one-finger move\n//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish\n//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move\n\nconst _changeEvent = { type: 'change' };\nconst _startEvent = { type: 'start' };\nconst _endEvent = { type: 'end' };\nconst _ray = new Ray();\nconst _plane = new Plane();\nconst TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );\n\nclass OrbitControls extends EventDispatcher {\n\n    constructor( object, domElement ) {\n\n        super();\n\n        this.object = object;\n        this.domElement = domElement;\n        this.domElement.style.touchAction = 'none'; // disable touch scroll\n\n        // Set to false to disable this control\n        this.enabled = true;\n\n        // \"target\" sets the location of focus, where the object orbits around\n        this.target = new Vector3();\n\n        // How far you can dolly in and out ( PerspectiveCamera only )\n        this.minDistance = 0;\n        this.maxDistance = Infinity;\n\n        // How far you can zoom in and out ( OrthographicCamera only )\n        this.minZoom = 0;\n        this.maxZoom = Infinity;\n\n        // How far you can orbit vertically, upper and lower limits.\n        // Range is 0 to Math.PI radians.\n        this.minPolarAngle = 0; // radians\n        this.maxPolarAngle = Math.PI; // radians\n\n        // How far you can orbit horizontally, upper and lower limits.\n        // If set, the interval [min, max] must be a sub-interval of [- 2 PI, 2 PI], with ( max - min < 2 PI )\n        this.minAzimuthAngle = - Infinity; // radians\n        this.maxAzimuthAngle = Infinity; // radians\n\n        // Set to true to enable damping (inertia)\n        // If damping is enabled, you must call controls.update() in your animation loop\n        this.enableDamping = false;\n        this.dampingFactor = 0.05;\n\n        // This option actually enables dollying in and out; left as \"zoom\" for backwards compatibility.\n        // Set to false to disable zooming\n        this.enableZoom = true;\n        this.zoomSpeed = 1.0;\n\n        // Set to false to disable rotating\n        this.enableRotate = true;\n        this.rotateSpeed = 1.0;\n\n        // Set to false to disable panning\n        this.enablePan = true;\n        this.panSpeed = 1.0;\n        this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up\n        this.keyPanSpeed = 7.0; // pixels moved per arrow key push\n        this.zoomToCursor = false;\n\n        // Set to true to automatically rotate around the target\n        // If auto-rotate is enabled, you must call controls.update() in your animation loop\n        this.autoRotate = false;\n        this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60\n\n        // The four arrow keys\n        this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };\n\n        // Mouse buttons\n        this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };\n\n        // Touch fingers\n        this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };\n\n        // for reset\n        this.target0 = this.target.clone();\n        this.position0 = this.object.position.clone();\n        this.zoom0 = this.object.zoom;\n\n        // the target DOM element for key events\n        this._domElementKeyEvents = null;\n\n        //\n        // public methods\n        //\n\n        this.getPolarAngle = function() {\n\n            return spherical.phi;\n\n        };\n\n        this.getAzimuthalAngle = function() {\n\n            return spherical.theta;\n\n        };\n\n        this.getDistance = function() {\n\n            return this.object.position.distanceTo( this.target );\n\n        };\n\n        this.listenToKeyEvents = function( domElement ) {\n\n            //domElement.addEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = domElement;\n\n        };\n\n        this.stopListenToKeyEvents = function() {\n\n            this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n            this._domElementKeyEvents = null;\n\n        };\n\n        this.saveState = function() {\n\n            scope.target0.copy( scope.target );\n            scope.position0.copy( scope.object.position );\n            scope.zoom0 = scope.object.zoom;\n\n        };\n\n        this.reset = function() {\n\n            scope.target.copy( scope.target0 );\n            scope.object.position.copy( scope.position0 );\n            scope.object.zoom = scope.zoom0;\n\n            scope.object.updateProjectionMatrix();\n            scope.dispatchEvent( _changeEvent );\n\n            scope.update();\n\n            state = STATE.NONE;\n\n        };\n\n        // this method is exposed, but perhaps it would be better if we can make it private...\n        this.update = function() {\n\n            const offset = new Vector3();\n\n            // so camera.up is the orbit axis\n            const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n            const quatInverse = quat.clone().invert();\n\n            const lastPosition = new Vector3();\n            const lastQuaternion = new Quaternion();\n            const lastTargetPosition = new Vector3();\n\n            const twoPI = 2 * Math.PI;\n\n            return function update() {\n\n                quat.setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );\n                quatInverse.copy(quat).invert();\n\n                const position = scope.object.position;\n\n                offset.copy( position ).sub( scope.target );\n\n                // rotate offset to \"y-axis-is-up\" space\n                offset.applyQuaternion( quat );\n\n                // angle from z-axis around y-axis\n                spherical.setFromVector3( offset );\n\n                if ( scope.autoRotate && state === STATE.NONE ) {\n\n                    rotateLeft( getAutoRotationAngle() );\n\n                }\n\n                if ( scope.enableDamping ) {\n\n                    spherical.theta += sphericalDelta.theta * scope.dampingFactor;\n                    spherical.phi += sphericalDelta.phi * scope.dampingFactor;\n\n                } else {\n\n                    spherical.theta += sphericalDelta.theta;\n                    spherical.phi += sphericalDelta.phi;\n\n                }\n\n                // restrict theta to be between desired limits\n\n                let min = scope.minAzimuthAngle;\n                let max = scope.maxAzimuthAngle;\n\n                if ( isFinite( min ) && isFinite( max ) ) {\n\n                    if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;\n\n                    if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;\n\n                    if ( min <= max ) {\n\n                        spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );\n\n                    } else {\n\n                        spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?\n                            Math.max( min, spherical.theta ) :\n                            Math.min( max, spherical.theta );\n\n                    }\n\n                }\n\n                // restrict phi to be between desired limits\n                spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );\n\n                spherical.makeSafe();\n\n\n                // move target to panned location\n\n                if ( scope.enableDamping === true ) {\n\n                    scope.target.addScaledVector( panOffset, scope.dampingFactor );\n\n                } else {\n\n                    scope.target.add( panOffset );\n\n                }\n\n                // adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera\n                // we adjust zoom later in these cases\n                if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {\n\n                    spherical.radius = clampDistance( spherical.radius );\n\n                } else {\n\n                    spherical.radius = clampDistance( spherical.radius * scale );\n\n                }\n\n\n                offset.setFromSpherical( spherical );\n\n                // rotate offset back to \"camera-up-vector-is-up\" space\n                offset.applyQuaternion( quatInverse );\n\n                position.copy( scope.target ).add( offset );\n\n                scope.object.lookAt( scope.target );\n\n                if ( scope.enableDamping === true ) {\n\n                    sphericalDelta.theta *= ( 1 - scope.dampingFactor );\n                    sphericalDelta.phi *= ( 1 - scope.dampingFactor );\n\n                    panOffset.multiplyScalar( 1 - scope.dampingFactor );\n\n                } else {\n\n                    sphericalDelta.set( 0, 0, 0 );\n\n                    panOffset.set( 0, 0, 0 );\n\n                }\n\n                // adjust camera position\n                let zoomChanged = false;\n                if ( scope.zoomToCursor && performCursorZoom ) {\n\n                    let newRadius = null;\n                    if ( scope.object.isPerspectiveCamera ) {\n\n                        // move the camera down the pointer ray\n                        // this method avoids floating point error\n                        const prevRadius = offset.length();\n                        newRadius = clampDistance( prevRadius * scale );\n\n                        const radiusDelta = prevRadius - newRadius;\n                        scope.object.position.addScaledVector( dollyDirection, radiusDelta );\n                        scope.object.updateMatrixWorld();\n\n                    } else if ( scope.object.isOrthographicCamera ) {\n\n                        // adjust the ortho camera position based on zoom changes\n                        const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseBefore.unproject( scope.object );\n\n                        scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                        scope.object.updateProjectionMatrix();\n                        zoomChanged = true;\n\n                        const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );\n                        mouseAfter.unproject( scope.object );\n\n                        scope.object.position.sub( mouseAfter ).add( mouseBefore );\n                        scope.object.updateMatrixWorld();\n\n                        newRadius = offset.length();\n\n                    } else {\n\n                        console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );\n                        scope.zoomToCursor = false;\n\n                    }\n\n                    // handle the placement of the target\n                    if ( newRadius !== null ) {\n\n                        if ( this.screenSpacePanning ) {\n\n                            // position the orbit target in front of the new camera position\n                            scope.target.set( 0, 0, - 1 )\n                                .transformDirection( scope.object.matrix )\n                                .multiplyScalar( newRadius )\n                                .add( scope.object.position );\n\n                        } else {\n\n                            // get the ray and translation plane to compute target\n                            _ray.origin.copy( scope.object.position );\n                            _ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );\n\n                            // if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid\n                            // extremely large values\n                            if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {\n\n                                object.lookAt( scope.target );\n\n                            } else {\n\n                                _plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );\n                                _ray.intersectPlane( _plane, scope.target );\n\n                            }\n\n                        }\n\n                    }\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );\n                    scope.object.updateProjectionMatrix();\n                    zoomChanged = true;\n\n                }\n\n                scale = 1;\n                performCursorZoom = false;\n\n                // update condition is:\n                // min(camera displacement, camera rotation in radians)^2 > EPS\n                // using small-angle approximation cos(x/2) = 1 - x^2 / 8\n\n                if ( zoomChanged ||\n                    lastPosition.distanceToSquared( scope.object.position ) > EPS ||\n                    8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||\n                    lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {\n\n                    scope.dispatchEvent( _changeEvent );\n\n                    lastPosition.copy( scope.object.position );\n                    lastQuaternion.copy( scope.object.quaternion );\n                    lastTargetPosition.copy( scope.target );\n\n                    zoomChanged = false;\n\n                    return true;\n\n                }\n\n                return false;\n\n            };\n\n        }();\n\n        this.dispose = function() {\n\n            scope.domElement.removeEventListener( 'contextmenu', onContextMenu );\n\n            scope.domElement.removeEventListener( 'pointerdown', onPointerDown );\n            scope.domElement.removeEventListener( 'pointercancel', onPointerUp );\n            scope.domElement.removeEventListener( 'wheel', onMouseWheel );\n\n            scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n            scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n\n            if ( scope._domElementKeyEvents !== null ) {\n\n                scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );\n                scope._domElementKeyEvents = null;\n\n            }\n\n        };\n\n        //\n        // internals\n        //\n\n        const scope = this;\n\n        const STATE = {\n            NONE: - 1,\n            ROTATE: 0,\n            DOLLY: 1,\n            PAN: 2,\n            TOUCH_ROTATE: 3,\n            TOUCH_PAN: 4,\n            TOUCH_DOLLY_PAN: 5,\n            TOUCH_DOLLY_ROTATE: 6\n        };\n\n        let state = STATE.NONE;\n\n        const EPS = 0.000001;\n\n        // current position in spherical coordinates\n        const spherical = new Spherical();\n        const sphericalDelta = new Spherical();\n\n        let scale = 1;\n        const panOffset = new Vector3();\n\n        const rotateStart = new Vector2();\n        const rotateEnd = new Vector2();\n        const rotateDelta = new Vector2();\n\n        const panStart = new Vector2();\n        const panEnd = new Vector2();\n        const panDelta = new Vector2();\n\n        const dollyStart = new Vector2();\n        const dollyEnd = new Vector2();\n        const dollyDelta = new Vector2();\n\n        const dollyDirection = new Vector3();\n        const mouse = new Vector2();\n        let performCursorZoom = false;\n\n        const pointers = [];\n        const pointerPositions = {};\n\n        function getAutoRotationAngle() {\n\n            return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;\n\n        }\n\n        function getZoomScale() {\n\n            return Math.pow( 0.95, scope.zoomSpeed );\n\n        }\n\n        function rotateLeft( angle ) {\n\n            sphericalDelta.theta -= angle;\n\n        }\n\n        function rotateUp( angle ) {\n\n            sphericalDelta.phi -= angle;\n\n        }\n\n        const panLeft = function() {\n\n            const v = new Vector3();\n\n            return function panLeft( distance, objectMatrix ) {\n\n                v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix\n                v.multiplyScalar( - distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        const panUp = function() {\n\n            const v = new Vector3();\n\n            return function panUp( distance, objectMatrix ) {\n\n                if ( scope.screenSpacePanning === true ) {\n\n                    v.setFromMatrixColumn( objectMatrix, 1 );\n\n                } else {\n\n                    v.setFromMatrixColumn( objectMatrix, 0 );\n                    v.crossVectors( scope.object.up, v );\n\n                }\n\n                v.multiplyScalar( distance );\n\n                panOffset.add( v );\n\n            };\n\n        }();\n\n        // deltaX and deltaY are in pixels; right and down are positive\n        const pan = function() {\n\n            const offset = new Vector3();\n\n            return function pan( deltaX, deltaY ) {\n\n                const element = scope.domElement;\n\n                if ( scope.object.isPerspectiveCamera ) {\n\n                    // perspective\n                    const position = scope.object.position;\n                    offset.copy( position ).sub( scope.target );\n                    let targetDistance = offset.length();\n\n                    // half of the fov is center to top of screen\n                    targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );\n\n                    // we use only clientHeight here so aspect ratio does not distort speed\n                    panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );\n                    panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );\n\n                } else if ( scope.object.isOrthographicCamera ) {\n\n                    // orthographic\n                    panLeft( deltaX * ( scope.object.right - scope.object.left ) /\n                                        scope.object.zoom / element.clientWidth, scope.object.matrix );\n                    panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom /\n                                      element.clientHeight, scope.object.matrix );\n\n                } else {\n\n                    // camera neither orthographic nor perspective\n                    console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );\n                    scope.enablePan = false;\n\n                }\n\n            };\n\n        }();\n\n        function dollyOut( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale /= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function dollyIn( dollyScale ) {\n\n            if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {\n\n                scale *= dollyScale;\n\n            } else {\n\n                console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );\n                scope.enableZoom = false;\n\n            }\n\n        }\n\n        function updateMouseParameters( event ) {\n\n            if ( ! scope.zoomToCursor ) {\n\n                return;\n\n            }\n\n            performCursorZoom = true;\n\n            const rect = scope.domElement.getBoundingClientRect();\n            const x = event.clientX - rect.left;\n            const y = event.clientY - rect.top;\n            const w = rect.width;\n            const h = rect.height;\n\n            mouse.x = ( x / w ) * 2 - 1;\n            mouse.y = - ( y / h ) * 2 + 1;\n\n            dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( object ).sub( object.position ).normalize();\n\n        }\n\n        function clampDistance( dist ) {\n\n            return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );\n\n        }\n\n        //\n        // event callbacks - update the object state\n        //\n\n        function handleMouseDownRotate( event ) {\n\n            rotateStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownDolly( event ) {\n\n            updateMouseParameters( event );\n            dollyStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseDownPan( event ) {\n\n            panStart.set( event.clientX, event.clientY );\n\n        }\n\n        function handleMouseMoveRotate( event ) {\n\n            rotateEnd.set( event.clientX, event.clientY );\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMoveDolly( event ) {\n\n            dollyEnd.set( event.clientX, event.clientY );\n\n            dollyDelta.subVectors( dollyEnd, dollyStart );\n\n            if ( dollyDelta.y > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            } else if ( dollyDelta.y < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            }\n\n            dollyStart.copy( dollyEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseMovePan( event ) {\n\n            panEnd.set( event.clientX, event.clientY );\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n            scope.update();\n\n        }\n\n        function handleMouseWheel( event ) {\n\n            updateMouseParameters( event );\n\n            if ( event.deltaY < 0 ) {\n\n                dollyIn( getZoomScale() );\n\n            } else if ( event.deltaY > 0 ) {\n\n                dollyOut( getZoomScale() );\n\n            }\n\n            scope.update();\n\n        }\n\n        function handleKeyDown( event ) {\n\n            let needsUpdate = false;\n\n            switch ( event.code ) {\n\n                case scope.keys.UP:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.BOTTOM:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( 0, - scope.keyPanSpeed );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.LEFT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n                case scope.keys.RIGHT:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );\n\n                    } else {\n\n                        pan( - scope.keyPanSpeed, 0 );\n\n                    }\n\n                    needsUpdate = true;\n                    break;\n\n            }\n\n            if ( needsUpdate ) {\n\n                // prevent the browser from scrolling on cursor keys\n                event.preventDefault();\n\n                scope.update();\n\n            }\n\n\n        }\n\n        function handleTouchStartRotate() {\n\n            if ( pointers.length === 1 ) {\n\n                rotateStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                rotateStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartPan() {\n\n            if ( pointers.length === 1 ) {\n\n                panStart.set( pointers[0].pageX, pointers[0].pageY );\n\n            } else {\n\n                const x = 0.5 * ( pointers[0].pageX + pointers[1].pageX );\n                const y = 0.5 * ( pointers[0].pageY + pointers[1].pageY );\n\n                panStart.set( x, y );\n\n            }\n\n        }\n\n        function handleTouchStartDolly() {\n\n            const dx = pointers[0].pageX - pointers[1].pageX;\n            const dy = pointers[0].pageY - pointers[1].pageY;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyStart.set( 0, distance );\n\n        }\n\n        function handleTouchStartDollyPan() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enablePan ) handleTouchStartPan();\n\n        }\n\n        function handleTouchStartDollyRotate() {\n\n            if ( scope.enableZoom ) handleTouchStartDolly();\n\n            if ( scope.enableRotate ) handleTouchStartRotate();\n\n        }\n\n        function handleTouchMoveRotate( event ) {\n\n            if ( pointers.length == 1 ) {\n\n                rotateEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                rotateEnd.set( x, y );\n\n            }\n\n            rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );\n\n            const element = scope.domElement;\n\n            rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height\n\n            rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );\n\n            rotateStart.copy( rotateEnd );\n\n        }\n\n        function handleTouchMovePan( event ) {\n\n            if ( pointers.length === 1 ) {\n\n                panEnd.set( event.pageX, event.pageY );\n\n            } else {\n\n                const position = getSecondPointerPosition( event );\n\n                const x = 0.5 * ( event.pageX + position.x );\n                const y = 0.5 * ( event.pageY + position.y );\n\n                panEnd.set( x, y );\n\n            }\n\n            panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );\n\n            pan( panDelta.x, panDelta.y );\n\n            panStart.copy( panEnd );\n\n        }\n\n        function handleTouchMoveDolly( event ) {\n\n            const position = getSecondPointerPosition( event );\n\n            const dx = event.pageX - position.x;\n            const dy = event.pageY - position.y;\n\n            const distance = Math.sqrt( dx * dx + dy * dy );\n\n            dollyEnd.set( 0, distance );\n\n            dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );\n\n            dollyOut( dollyDelta.y );\n\n            dollyStart.copy( dollyEnd );\n\n        }\n\n        function handleTouchMoveDollyPan( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enablePan ) handleTouchMovePan( event );\n\n        }\n\n        function handleTouchMoveDollyRotate( event ) {\n\n            if ( scope.enableZoom ) handleTouchMoveDolly( event );\n\n            if ( scope.enableRotate ) handleTouchMoveRotate( event );\n\n        }\n\n        //\n        // event handlers - FSM: listen for events and reset state\n        //\n\n        function onPointerDown( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.setPointerCapture( event.pointerId );\n\n                scope.domElement.addEventListener( 'pointermove', onPointerMove );\n                scope.domElement.addEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            //\n\n            addPointer( event );\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchStart( event );\n\n            } else {\n\n                onMouseDown( event );\n\n            }\n\n        }\n\n        function onPointerMove( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            if ( event.pointerType === 'touch' ) {\n\n                onTouchMove( event );\n\n            } else {\n\n                onMouseMove( event );\n\n            }\n\n        }\n\n        function onPointerUp( event ) {\n\n            removePointer( event );\n\n            if ( pointers.length === 0 ) {\n\n                scope.domElement.releasePointerCapture( event.pointerId );\n\n                scope.domElement.removeEventListener( 'pointermove', onPointerMove );\n                scope.domElement.removeEventListener( 'pointerup', onPointerUp );\n\n            }\n\n            scope.dispatchEvent( _endEvent );\n\n            state = STATE.NONE;\n\n        }\n\n        function onMouseDown( event ) {\n\n            let mouseAction;\n\n            switch ( event.button ) {\n\n                case 0:\n\n                    mouseAction = scope.mouseButtons.LEFT;\n                    break;\n\n                case 1:\n\n                    mouseAction = scope.mouseButtons.MIDDLE;\n                    break;\n\n                case 2:\n\n                    mouseAction = scope.mouseButtons.RIGHT;\n                    break;\n\n                default:\n\n                    mouseAction = - 1;\n\n            }\n\n            switch ( mouseAction ) {\n\n                case MOUSE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseDownDolly( event );\n\n                    state = STATE.DOLLY;\n\n                    break;\n\n                case MOUSE.ROTATE:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    } else {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    }\n\n                    break;\n\n                case MOUSE.PAN:\n\n                    if ( event.ctrlKey || event.metaKey || event.shiftKey ) {\n\n                        if ( scope.enableRotate === false ) return;\n\n                        handleMouseDownRotate( event );\n\n                        state = STATE.ROTATE;\n\n                    } else {\n\n                        if ( scope.enablePan === false ) return;\n\n                        handleMouseDownPan( event );\n\n                        state = STATE.PAN;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onMouseMove( event ) {\n\n            switch ( state ) {\n\n                case STATE.ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleMouseMoveRotate( event );\n\n                    break;\n\n                case STATE.DOLLY:\n\n                    if ( scope.enableZoom === false ) return;\n\n                    handleMouseMoveDolly( event );\n\n                    break;\n\n                case STATE.PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleMouseMovePan( event );\n\n                    break;\n\n            }\n\n        }\n\n        function onMouseWheel( event ) {\n\n            if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;\n\n            event.preventDefault();\n\n            scope.dispatchEvent( _startEvent );\n\n            handleMouseWheel( event );\n\n            scope.dispatchEvent( _endEvent );\n\n        }\n\n        function onKeyDown( event ) {\n\n            if ( scope.enabled === false || scope.enablePan === false ) return;\n\n            handleKeyDown( event );\n\n        }\n\n        function onTouchStart( event ) {\n\n            trackPointer( event );\n\n            switch ( pointers.length ) {\n\n                case 1:\n\n                    switch ( scope.touches.ONE ) {\n\n                        case TOUCH.ROTATE:\n\n                            if ( scope.enableRotate === false ) return;\n\n                            handleTouchStartRotate();\n\n                            state = STATE.TOUCH_ROTATE;\n\n                            break;\n\n                        case TOUCH.PAN:\n\n                            if ( scope.enablePan === false ) return;\n\n                            handleTouchStartPan();\n\n                            state = STATE.TOUCH_PAN;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                case 2:\n\n                    switch ( scope.touches.TWO ) {\n\n                        case TOUCH.DOLLY_PAN:\n\n                            if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                            handleTouchStartDollyPan();\n\n                            state = STATE.TOUCH_DOLLY_PAN;\n\n                            break;\n\n                        case TOUCH.DOLLY_ROTATE:\n\n                            if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                            handleTouchStartDollyRotate();\n\n                            state = STATE.TOUCH_DOLLY_ROTATE;\n\n                            break;\n\n                        default:\n\n                            state = STATE.NONE;\n\n                    }\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n            if ( state !== STATE.NONE ) {\n\n                scope.dispatchEvent( _startEvent );\n\n            }\n\n        }\n\n        function onTouchMove( event ) {\n\n            trackPointer( event );\n\n            switch ( state ) {\n\n                case STATE.TOUCH_ROTATE:\n\n                    if ( scope.enableRotate === false ) return;\n\n                    handleTouchMoveRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_PAN:\n\n                    if ( scope.enablePan === false ) return;\n\n                    handleTouchMovePan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_PAN:\n\n                    if ( scope.enableZoom === false && scope.enablePan === false ) return;\n\n                    handleTouchMoveDollyPan( event );\n\n                    scope.update();\n\n                    break;\n\n                case STATE.TOUCH_DOLLY_ROTATE:\n\n                    if ( scope.enableZoom === false && scope.enableRotate === false ) return;\n\n                    handleTouchMoveDollyRotate( event );\n\n                    scope.update();\n\n                    break;\n\n                default:\n\n                    state = STATE.NONE;\n\n            }\n\n        }\n\n        function onContextMenu( event ) {\n\n            if ( scope.enabled === false ) return;\n\n            event.preventDefault();\n\n        }\n\n        function addPointer( event ) {\n\n            pointers.push( event );\n\n        }\n\n        function removePointer( event ) {\n\n            delete pointerPositions[event.pointerId];\n\n            for ( let i = 0; i < pointers.length; i ++ ) {\n\n                if ( pointers[i].pointerId == event.pointerId ) {\n\n                    pointers.splice( i, 1 );\n                    return;\n\n                }\n\n            }\n\n        }\n\n        function trackPointer( event ) {\n\n            let position = pointerPositions[event.pointerId];\n\n            if ( position === undefined ) {\n\n                position = new Vector2();\n                pointerPositions[event.pointerId] = position;\n\n            }\n\n            position.set( event.pageX, event.pageY );\n\n        }\n\n        function getSecondPointerPosition( event ) {\n\n            const pointer = ( event.pointerId === pointers[0].pointerId ) ? pointers[1] : pointers[0];\n\n            return pointerPositions[pointer.pointerId];\n\n        }\n\n        //\n\n        scope.domElement.addEventListener( 'contextmenu', onContextMenu );\n\n        scope.domElement.addEventListener( 'pointerdown', onPointerDown );\n        scope.domElement.addEventListener( 'pointercancel', onPointerUp );\n        scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );\n\n        // force an update at start\n\n        this.update();\n\n    }\n\n}\n\nexport { OrbitControls };\n","export class LoadingSpinner {\n\n    constructor(message) {\n        this.message = message || 'Loading...';\n\n        this.spinnerDivContainer = document.createElement('div');\n        this.spinnerDiv = document.createElement('div');\n        this.messageDiv = document.createElement('div');\n        this.spinnerDivContainer.className = 'loaderContainer';\n        this.spinnerDiv.className = 'loader';\n        this.spinnerDivContainer.style.display = 'none';\n        this.messageDiv.className = 'message';\n        this.messageDiv.innerHTML = this.message;\n        this.spinnerDivContainer.appendChild(this.spinnerDiv);\n        this.spinnerDivContainer.appendChild(this.messageDiv);\n        document.body.appendChild(this.spinnerDivContainer);\n\n        const style = document.createElement('style');\n        style.innerHTML = `\n\n            .message {\n                font-family: arial;\n                font-size: 12pt;\n                color: #ffffff;\n                text-align: center;\n                padding-top:15px;\n                width:180px;\n            }\n\n            .loaderContainer {\n                position: absolute;\n                top: 50%;\n                left: 50%;\n                transform: translate(-80px, -80px);\n                width: 180px;\n            }\n\n            .loader {\n                width: 120px;        /* the size */\n                padding: 15px;       /* the border thickness */\n                background: #07e8d6; /* the color */\n                z-index:99999;\n            \n                aspect-ratio: 1;\n                border-radius: 50%;\n                --_m: \n                    conic-gradient(#0000,#000),\n                    linear-gradient(#000 0 0) content-box;\n                -webkit-mask: var(--_m);\n                    mask: var(--_m);\n                -webkit-mask-composite: source-out;\n                    mask-composite: subtract;\n                box-sizing: border-box;\n                animation: load 1s linear infinite;\n                margin-left: 30px;\n            }\n            \n            @keyframes load {\n                to{transform: rotate(1turn)}\n            }\n\n        `;\n        document.getElementsByTagName('head')[0].appendChild(style);\n    }\n\n    show() {\n        this.spinnerDivContainer.style.display = 'block';\n    }\n\n    hide() {\n        this.spinnerDivContainer.style.display = 'none';\n    }\n\n    setMessage(msg) {\n        this.messageDiv.innerHTML = msg;\n    }\n}\n","import * as THREE from 'three';\n\nexport class ArrowHelper extends THREE.Object3D {\n\n    constructor(dir = new THREE.Vector3(0, 0, 1), origin = new THREE.Vector3(0, 0, 0), length = 1,\n                radius = 0.1, color = 0xffff00, headLength = length * 0.2, headRadius = headLength * 0.2) {\n        super();\n\n        this.type = 'ArrowHelper';\n\n        const lineGeometry = new THREE.CylinderGeometry(radius, radius, length, 32);\n        lineGeometry.translate(0, length / 2.0, 0);\n        const coneGeometry = new THREE.CylinderGeometry( 0, headRadius, headLength, 32);\n        coneGeometry.translate(0, length, 0);\n\n        this.position.copy( origin );\n\n        this.line = new THREE.Mesh(lineGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.line.matrixAutoUpdate = false;\n        this.add(this.line);\n\n        this.cone = new THREE.Mesh(coneGeometry, new THREE.MeshBasicMaterial({color: color, toneMapped: false}));\n        this.cone.matrixAutoUpdate = false;\n        this.add(this.cone);\n\n        this.setDirection(dir);\n    }\n\n    setDirection( dir ) {\n        if (dir.y > 0.99999) {\n            this.quaternion.set(0, 0, 0, 1);\n        } else if (dir.y < - 0.99999) {\n            this.quaternion.set(1, 0, 0, 0);\n        } else {\n            _axis.set(dir.z, 0, -dir.x).normalize();\n            const radians = Math.acos(dir.y);\n            this.quaternion.setFromAxisAngle(_axis, radians);\n        }\n    }\n\n    setColor( color ) {\n        this.line.material.color.set(color);\n        this.cone.material.color.set(color);\n    }\n\n    copy(source) {\n        super.copy(source, false);\n        this.line.copy(source.line);\n        this.cone.copy(source.cone);\n        return this;\n    }\n\n    dispose() {\n        this.line.geometry.dispose();\n        this.line.material.dispose();\n        this.cone.geometry.dispose();\n        this.cone.material.dispose();\n    }\n\n}\n","import * as THREE from 'three';\nimport { ArrowHelper } from './ArrowHelper.js';\n\nexport class SceneHelper {\n\n    constructor(scene, simpleScene) {\n        this.scene = scene;\n        this.simpleScene = simpleScene;\n        this.meshCursor = null;\n        this.focusMarker = null;\n        this.controlPlane = null;\n    }\n\n    setupMeshCursor() {\n        if (!this.meshCursor) {\n            const coneGeometry = new THREE.ConeGeometry(0.5, 1.5, 32);\n            const coneMaterial = new THREE.MeshBasicMaterial({color: 0xFFFFFF});\n\n            const downArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            downArrow.rotation.set(0, 0, Math.PI);\n            downArrow.position.set(0, 1, 0);\n            const upArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            upArrow.position.set(0, -1, 0);\n            const leftArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            leftArrow.rotation.set(0, 0, Math.PI / 2.0);\n            leftArrow.position.set(1, 0, 0);\n            const rightArrow = new THREE.Mesh(coneGeometry, coneMaterial);\n            rightArrow.rotation.set(0, 0, -Math.PI / 2.0);\n            rightArrow.position.set(-1, 0, 0);\n\n            this.meshCursor = new THREE.Object3D();\n            this.meshCursor.add(downArrow);\n            this.meshCursor.add(upArrow);\n            this.meshCursor.add(leftArrow);\n            this.meshCursor.add(rightArrow);\n            this.meshCursor.scale.set(0.1, 0.1, 0.1);\n            this.simpleScene.add(this.meshCursor);\n            this.meshCursor.visible = false;\n        }\n    }\n\n    destroyMeshCursor() {\n        if (this.meshCursor) {\n            this.meshCursor.children.forEach((child) => {\n                child.geometry.dispose();\n                child.material.dispose();\n            });\n            this.simpleScene.remove(this.meshCursor);\n            this.meshCursor = null;\n        }\n    }\n\n    setMeshCursorVisibility(visible) {\n        this.meshCursor.visible = visible;\n    }\n\n    setMeshCursorPosition(position) {\n        this.meshCursor.position.copy(position);\n    }\n\n    positionAndOrientMeshCursor(position, camera) {\n        this.meshCursor.position.copy(position);\n        this.meshCursor.up.copy(camera.up);\n        this.meshCursor.lookAt(camera.position);\n    }\n\n    setupFocusMarker() {\n        if (!this.focusMarker) {\n            const sphereGeometry = new THREE.SphereGeometry(.5, 32, 32);\n            const focusMarkerMaterial = SceneHelper.buildFocusMarkerMaterial();\n            focusMarkerMaterial.depthTest = false;\n            focusMarkerMaterial.depthWrite = false;\n            focusMarkerMaterial.transparent = true;\n            const sphereMesh = new THREE.Mesh(sphereGeometry, focusMarkerMaterial);\n            this.focusMarker = sphereMesh;\n        }\n    }\n\n    updateFocusMarker = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempMatrix = new THREE.Matrix4();\n\n        return function(position, camera, viewport) {\n            tempMatrix.copy(camera.matrixWorld).invert();\n            tempPosition.copy(position).applyMatrix4(tempMatrix);\n            tempPosition.normalize().multiplyScalar(10);\n            tempPosition.applyMatrix4(camera.matrixWorld);\n            this.focusMarker.position.copy(tempPosition);\n            this.focusMarker.material.uniforms.realFocusPosition.value.copy(position);\n            this.focusMarker.material.uniforms.viewport.value.copy(viewport);\n            this.focusMarker.material.uniformsNeedUpdate = true;\n        };\n\n    }();\n\n    setFocusMarkerVisibility(visible) {\n        this.focusMarker.visible = visible;\n    }\n\n    setFocusMarkerOpacity(opacity) {\n        this.focusMarker.material.uniforms.opacity.value = opacity;\n        this.focusMarker.material.uniformsNeedUpdate = true;\n    }\n\n    getFocusMarkerOpacity() {\n        return this.focusMarker.material.uniforms.opacity.value;\n    }\n\n    setupControlPlane() {\n        const planeGeometry = new THREE.PlaneGeometry(1, 1);\n        planeGeometry.rotateX(-Math.PI / 2);\n        const planeMaterial = new THREE.MeshBasicMaterial({color: 0xffffff});\n        planeMaterial.transparent = true;\n        planeMaterial.opacity = 0.6;\n        planeMaterial.depthTest = false;\n        planeMaterial.depthWrite = false;\n        planeMaterial.side = THREE.DoubleSide;\n        const planeMesh = new THREE.Mesh(planeGeometry, planeMaterial);\n\n        const arrowDir = new THREE.Vector3(0, 1, 0);\n        arrowDir.normalize();\n        const arrowOrigin = new THREE.Vector3(0, 0, 0);\n        const arrowLength = 0.5;\n        const arrowRadius = 0.01;\n        const arrowColor = 0x00dd00;\n        const arrowHelper = new ArrowHelper(arrowDir, arrowOrigin, arrowLength, arrowRadius, arrowColor, 0.1, 0.03);\n\n        this.controlPlane = new THREE.Object3D();\n        this.controlPlane.add(planeMesh);\n        this.controlPlane.add(arrowHelper);\n    }\n\n    setControlPlaneVisibility(visible) {\n        this.controlPlane.visible = visible;\n    }\n\n    positionAndOrientControlPlane = function() {\n\n        const tempQuaternion = new THREE.Quaternion();\n        const defaultUp = new THREE.Vector3(0, 1, 0);\n\n        return function(position, up) {\n            tempQuaternion.setFromUnitVectors(defaultUp, up);\n            this.controlPlane.position.copy(position);\n            this.controlPlane.quaternion.copy(tempQuaternion);\n        };\n\n    }();\n\n    addDebugMeshes() {\n        this.debugRoot = this.createDebugMeshes();\n        this.secondaryDebugRoot = this.createSecondaryDebugMeshes();\n        this.simpleScene.add(this.debugRoot);\n        this.simpleScene.add(this.secondaryDebugRoot);\n    }\n\n    createDebugMeshes(renderOrder) {\n        const sphereGeometry = new THREE.SphereGeometry(1, 32, 32);\n        const debugMeshRoot = new THREE.Object3D();\n\n        const createMesh = (color, position) => {\n            let sphereMesh = new THREE.Mesh(sphereGeometry, SceneHelper.buildDebugMaterial(color));\n            sphereMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(sphereMesh);\n            sphereMesh.position.fromArray(position);\n        };\n\n        createMesh(0xff0000, [-50, 0, 0]);\n        createMesh(0xff0000, [50, 0, 0]);\n        createMesh(0x00ff00, [0, 0, -50]);\n        createMesh(0x00ff00, [0, 0, 50]);\n        createMesh(0xffaa00, [5, 0, 5]);\n\n        return debugMeshRoot;\n    }\n\n    createSecondaryDebugMeshes(renderOrder) {\n        const boxGeometry = new THREE.BoxGeometry(3, 3, 3);\n        const debugMeshRoot = new THREE.Object3D();\n\n        let boxColor = 0xBBBBBB;\n        const createMesh = (position) => {\n            let boxMesh = new THREE.Mesh(boxGeometry, SceneHelper.buildDebugMaterial(boxColor));\n            boxMesh.renderOrder = renderOrder;\n            debugMeshRoot.add(boxMesh);\n            boxMesh.position.fromArray(position);\n        };\n\n        let separation = 10;\n        createMesh([-separation, 0, -separation]);\n        createMesh([-separation, 0, separation]);\n        createMesh([separation, 0, -separation]);\n        createMesh([separation, 0, separation]);\n\n        return debugMeshRoot;\n    }\n\n    static buildDebugMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n            varying float ndcDepth;\n\n            void main() {\n                gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);\n                ndcDepth = gl_Position.z / gl_Position.w;\n                gl_Position.x = gl_Position.x / gl_Position.w;\n                gl_Position.y = gl_Position.y / gl_Position.w;\n                gl_Position.z = 0.0;\n                gl_Position.w = 1.0;\n    \n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            varying float ndcDepth;\n            void main() {\n                gl_FragDepth = (ndcDepth + 1.0) / 2.0;\n                gl_FragColor = vec4(color.rgb, 0.0);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: false,\n            depthTest: true,\n            depthWrite: true,\n            side: THREE.FrontSide\n        });\n        material.extensions.fragDepth = true;\n\n        return material;\n    }\n\n    static buildFocusMarkerMaterial(color) {\n        const vertexShaderSource = `\n            #include <common>\n\n            uniform vec2 viewport;\n            uniform vec3 realFocusPosition;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                float radius = 0.01;\n\n                vec4 viewPosition = modelViewMatrix * vec4(position.xyz, 1.0);\n                vec4 viewCenter = modelViewMatrix * vec4(0.0, 0.0, 0.0, 1.0);\n\n                vec4 viewFocusPosition = modelViewMatrix * vec4(realFocusPosition, 1.0);\n\n                ndcPosition = projectionMatrix * viewPosition;\n                ndcPosition = ndcPosition * vec4(1.0 / ndcPosition.w);\n                ndcCenter = projectionMatrix * viewCenter;\n                ndcCenter = ndcCenter * vec4(1.0 / ndcCenter.w);\n\n                ndcFocusPosition = projectionMatrix * viewFocusPosition;\n                ndcFocusPosition = ndcFocusPosition * vec4(1.0 / ndcFocusPosition.w);\n\n                gl_Position = projectionMatrix * viewPosition;\n\n            }\n        `;\n\n        const fragmentShaderSource = `\n            #include <common>\n            uniform vec3 color;\n            uniform vec2 viewport;\n            uniform float opacity;\n\n            varying vec4 ndcPosition;\n            varying vec4 ndcCenter;\n            varying vec4 ndcFocusPosition;\n\n            void main() {\n                vec2 screenPosition = vec2(ndcPosition) * viewport;\n                vec2 screenCenter = vec2(ndcCenter) * viewport;\n\n                vec2 screenVec = screenPosition - screenCenter;\n\n                float projectedRadius = length(screenVec);\n\n                float lineWidth = 0.0005 * viewport.y;\n                float aaRange = 0.0025 * viewport.y;\n                float radius = 0.06 * viewport.y;\n                float radDiff = abs(projectedRadius - radius) - lineWidth;\n                float alpha = 1.0 - clamp(radDiff / 5.0, 0.0, 1.0); \n\n                gl_FragColor = vec4(color.rgb, alpha * opacity);\n            }\n        `;\n\n        const uniforms = {\n            'color': {\n                'type': 'v3',\n                'value': new THREE.Color(color)\n            },\n            'realFocusPosition': {\n                'type': 'v3',\n                'value': new THREE.Vector3()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'opacity': {\n                'value': 0.0\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            depthTest: false,\n            depthWrite: false,\n            side: THREE.FrontSide\n        });\n\n        return material;\n    }\n}\n","import * as THREE from 'three';\n\nconst VectorRight = new THREE.Vector3(1, 0, 0);\nconst VectorUp = new THREE.Vector3(0, 1, 0);\nconst VectorBackward = new THREE.Vector3(0, 0, 1);\n\nexport class Ray {\n\n    constructor(origin = new THREE.Vector3(), direction = new THREE.Vector3()) {\n        this.origin = new THREE.Vector3();\n        this.direction = new THREE.Vector3();\n        this.setParameters(origin, direction);\n    }\n\n    setParameters(origin, direction) {\n        this.origin.copy(origin);\n        this.direction.copy(direction).normalize();\n    }\n\n    boxContainsPoint(box, point, epsilon) {\n        return point.x < box.min.x - epsilon || point.x > box.max.x + epsilon ||\n               point.y < box.min.y - epsilon || point.y > box.max.y + epsilon ||\n               point.z < box.min.z - epsilon || point.z > box.max.z + epsilon ? false : true;\n    }\n\n    intersectBox = function() {\n\n        const planeIntersectionPoint = new THREE.Vector3();\n        const planeIntersectionPointArray = [];\n        const originArray = [];\n        const directionArray = [];\n\n        return function(box, outHit) {\n\n            originArray[0] = this.origin.x;\n            originArray[1] = this.origin.y;\n            originArray[2] = this.origin.z;\n            directionArray[0] = this.direction.x;\n            directionArray[1] = this.direction.y;\n            directionArray[2] = this.direction.z;\n\n            if (this.boxContainsPoint(box, this.origin, 0.0001)) {\n                if (outHit) {\n                    outHit.origin.copy(this.origin);\n                    outHit.normal.set(0, 0, 0);\n                    outHit.distance = -1;\n                }\n                return true;\n            }\n\n            for (let i = 0; i < 3; i++) {\n                if (directionArray[i] == 0.0) continue;\n\n                const hitNormal = i == 0 ? VectorRight : i == 1 ? VectorUp : VectorBackward;\n                const extremeVec = directionArray[i] < 0 ? box.max : box.min;\n                let multiplier = -Math.sign(directionArray[i]);\n                planeIntersectionPointArray[0] = i == 0 ? extremeVec.x : i == 1 ? extremeVec.y : extremeVec.z;\n                let toSide = planeIntersectionPointArray[0] - originArray[i];\n\n                if (toSide * multiplier < 0) {\n                    const idx1 = (i + 1) % 3;\n                    const idx2 = (i + 2) % 3;\n                    planeIntersectionPointArray[2] = directionArray[idx1] / directionArray[i] * toSide + originArray[idx1];\n                    planeIntersectionPointArray[1] = directionArray[idx2] / directionArray[i] * toSide + originArray[idx2];\n                    planeIntersectionPoint.set(planeIntersectionPointArray[i],\n                                               planeIntersectionPointArray[idx2],\n                                               planeIntersectionPointArray[idx1]);\n                    if (this.boxContainsPoint(box, planeIntersectionPoint, 0.0001)) {\n                        if (outHit) {\n                            outHit.origin.copy(planeIntersectionPoint);\n                            outHit.normal.copy(hitNormal).multiplyScalar(multiplier);\n                            outHit.distance = planeIntersectionPoint.sub(this.origin).length();\n                        }\n                        return true;\n                    }\n                }\n            }\n\n            return false;\n        };\n\n    }();\n\n    intersectSphere = function() {\n\n        const toSphereCenterVec = new THREE.Vector3();\n\n        return function(center, radius, outHit) {\n            toSphereCenterVec.copy(center).sub(this.origin);\n            const toClosestApproach = toSphereCenterVec.dot(this.direction);\n            const toClosestApproachSq = toClosestApproach * toClosestApproach;\n            const toSphereCenterSq = toSphereCenterVec.dot(toSphereCenterVec);\n            const diffSq = toSphereCenterSq - toClosestApproachSq;\n            const radiusSq = radius * radius;\n\n            if (diffSq > radiusSq) return false;\n\n            const thc = Math.sqrt(radiusSq - diffSq);\n            const t0 = toClosestApproach - thc;\n            const t1 = toClosestApproach + thc;\n\n            if (t1 < 0) return false;\n            let t = t0 < 0 ? t1 : t0;\n\n            if (outHit) {\n                outHit.origin.copy(this.origin).addScaledVector(this.direction, t);\n                outHit.normal.copy(outHit.origin).sub(center).normalize();\n                outHit.distance = t;\n            }\n            return true;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nexport class Hit {\n\n    constructor() {\n        this.origin = new THREE.Vector3();\n        this.normal = new THREE.Vector3();\n        this.distance = 0;\n    }\n\n    set(origin, normal, distance) {\n        this.origin.copy(origin);\n        this.normal.copy(normal);\n        this.distance = distance;\n    }\n\n    clone() {\n        const hitClone = new Hit();\n        hitClone.origin.copy(this.origin);\n        hitClone.normal.copy(this.normal);\n        hitClone.distance = this.distance;\n        return hitClone;\n    }\n\n}\n","import * as THREE from 'three';\nimport { Ray } from './Ray.js';\nimport { Hit } from './Hit.js';\n\nexport class Raycaster {\n\n    constructor(origin, direction) {\n        this.ray = new Ray(origin, direction);\n    }\n\n    setFromCameraAndScreenPosition = function() {\n\n        const ndcCoords = new THREE.Vector2();\n\n        return function(camera, screenPosition, screenDimensions) {\n            ndcCoords.x = screenPosition.x / screenDimensions.x * 2.0 - 1.0;\n            ndcCoords.y = (screenDimensions.y - screenPosition.y) / screenDimensions.y * 2.0 - 1.0;\n            if (camera.isPerspectiveCamera) {\n                this.ray.origin.setFromMatrixPosition(camera.matrixWorld);\n                this.ray.direction.set(ndcCoords.x, ndcCoords.y, 0.5 ).unproject(camera).sub(this.ray.origin).normalize();\n                this.camera = camera;\n            } else if (camera.isOrthographicCamera) {\n                this.ray.origin.set(screenPosition.x, screenPosition.y,\n                                   (camera.near + camera.far) / (camera.near - camera.far)).unproject(camera);\n                this.ray.direction.set(0, 0, -1).transformDirection(camera.matrixWorld);\n                this.camera = camera;\n            } else {\n                throw new Error('Raycaster::setFromCameraAndScreenPosition() -> Unsupported camera type');\n            }\n        };\n\n    }();\n\n    intersectSplatMesh = function() {\n\n        const toLocal = new THREE.Matrix4();\n        const fromLocal = new THREE.Matrix4();\n        const localRay = new Ray();\n\n        return function(splatMesh, outHits = []) {\n            fromLocal.copy(splatMesh.matrixWorld);\n            toLocal.copy(fromLocal).invert();\n            localRay.origin.copy(this.ray.origin).applyMatrix4(toLocal);\n            localRay.direction.copy(this.ray.direction).transformDirection(toLocal);\n\n            const splatTree = splatMesh.getSplatTree();\n            if (splatTree.rootNode) {\n                this.castRayAtSplatTreeNode(localRay, splatTree, splatTree.rootNode, outHits);\n            }\n            outHits.sort((a, b) => {\n                if (a.distance > b.distance) return 1;\n                else return -1;\n            });\n            outHits.forEach((hit) => {\n                hit.origin.applyMatrix4(fromLocal);\n                hit.normal.transformDirection(fromLocal);\n            });\n            return outHits;\n        };\n\n    }();\n\n    castRayAtSplatTreeNode = function() {\n\n        const tempPosition = new THREE.Vector3();\n        const tempScale = new THREE.Vector3();\n        const tempRotation = new THREE.Quaternion();\n        const tempHit = new Hit();\n\n        // Used for raycasting against splat ellipsoid\n        /*\n        const origin = new THREE.Vector3();\n        const tempRotationMatrix = new THREE.Matrix4();\n        const tempScaleMatrix = new THREE.Matrix4();\n        const tempMatrix = new THREE.Matrix4();\n        const tempMatrix3 = new THREE.Matrix3();\n        const tempRay = new Ray();\n        */\n\n        return function(ray, splatTree, node, outHits = []) {\n            if (!ray.intersectBox(node.boundingBox)) {\n                return;\n            }\n            if (node.data.indexes && node.data.indexes.length > 0) {\n                for (let i = 0; i < node.data.indexes.length; i++) {\n                    const splatIndex = node.data.indexes[i];\n                    splatTree.splatBuffer.getPosition(splatIndex, tempPosition);\n                    splatTree.splatBuffer.getRotation(splatIndex, tempRotation);\n                    splatTree.splatBuffer.getScale(splatIndex, tempScale);\n\n                    // Simple approximated sphere intersection\n                    const radius = Math.max(Math.max(tempScale.x, tempScale.y), tempScale.z);\n                    if (ray.intersectSphere(tempPosition, radius, tempHit)) {\n                        outHits.push(tempHit.clone());\n                    }\n\n                    // Raycast against actual splat ellipsoid ... doesn't actually work as well\n                    // as the approximated sphere approach\n                    /*\n                    tempScaleMatrix.makeScale(tempScale.x, tempScale.y, tempScale.z);\n                    tempRotationMatrix.makeRotationFromQuaternion(tempRotation);\n                    tempMatrix.copy(tempScaleMatrix).premultiply(tempRotationMatrix).invert();\n                    tempMatrix3.setFromMatrix4(tempMatrix);\n                    tempRay.origin.copy(this.ray.origin).sub(tempPosition).applyMatrix4(tempMatrix);\n                    tempRay.direction.copy(this.ray.direction).transformDirection(tempMatrix).normalize();\n                    if (tempRay.intersectSphere(origin, 1.0, tempHit)) {\n                        const hitClone = tempHit.clone();\n                        tempMatrix.invert();\n                        hitClone.origin.applyMatrix4(tempMatrix).add(tempPosition);\n                        outHits.push(hitClone);\n                    }\n                    */\n\n                }\n             }\n            if (node.children && node.children.length > 0) {\n                for (let child of node.children) {\n                    this.castRayAtSplatTreeNode(ray, splatTree, child, outHits);\n                }\n            }\n            return outHits;\n        };\n\n    }();\n}\n","import * as THREE from 'three';\n\nlet idGen = 0;\n\nexport class SplatTreeNode {\n\n    constructor(min, max, depth, id) {\n        this.min = new THREE.Vector3().copy(min);\n        this.max = new THREE.Vector3().copy(max);\n        this.boundingBox = new THREE.Box3(this.min, this.max);\n        this.center = new THREE.Vector3().copy(this.max).sub(this.min).multiplyScalar(0.5).add(this.min);\n        this.depth = depth;\n        this.children = [];\n        this.data = null;\n        this.id = id || idGen++;\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTreeNode } from './SplatTreeNode.js';\n\nexport class SplatTree {\n\n    constructor(maxDepth, maxPositionsPerNode) {\n        this.maxDepth = maxDepth;\n        this.maxPositionsPerNode = maxPositionsPerNode;\n        this.splatBuffer = null;\n        this.sceneDimensions = new THREE.Vector3();\n        this.sceneMin = new THREE.Vector3();\n        this.sceneMax = new THREE.Vector3();\n        this.rootNode = null;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n    }\n\n    processSplatBuffer(splatBuffer, filterFunc = () => true) {\n        this.splatBuffer = splatBuffer;\n        this.addedIndexes = {};\n        this.nodesWithIndexes = [];\n        const splatCount = splatBuffer.getSplatCount();\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            if (filterFunc(i)) {\n                splatBuffer.getPosition(i, position);\n                if (i === 0 || position.x < this.sceneMin.x) this.sceneMin.x = position.x;\n                if (i === 0 || position.x > this.sceneMax.x) this.sceneMax.x = position.x;\n                if (i === 0 || position.y < this.sceneMin.y) this.sceneMin.y = position.y;\n                if (i === 0 || position.y > this.sceneMax.y) this.sceneMax.y = position.y;\n                if (i === 0 || position.z < this.sceneMin.z) this.sceneMin.z = position.z;\n                if (i === 0 || position.z > this.sceneMax.z) this.sceneMax.z = position.z;\n            }\n        }\n\n        this.sceneDimensions.copy(this.sceneMin).sub(this.sceneMin);\n\n        const indexes = [];\n        for (let i = 0; i < splatCount; i ++) {\n            if (filterFunc(i)) {\n                indexes.push(i);\n            }\n        }\n        this.rootNode = new SplatTreeNode(this.sceneMin, this.sceneMax, 0);\n        this.rootNode.data = {\n            'indexes': indexes\n        };\n        this.processNode(this.rootNode, splatBuffer);\n    }\n\n    processNode(node, splatBuffer) {\n        const splatCount = node.data.indexes.length;\n\n        if (splatCount < this.maxPositionsPerNode || node.depth > this.maxDepth) {\n            const newIndexes = [];\n            for (let i = 0; i < node.data.indexes.length; i++) {\n                if (!this.addedIndexes[node.data.indexes[i]]) {\n                    newIndexes.push(node.data.indexes[i]);\n                    this.addedIndexes[node.data.indexes[i]] = true;\n                }\n            }\n            node.data.indexes = newIndexes;\n            this.nodesWithIndexes.push(node);\n            return;\n        }\n\n        const nodeDimensions = new THREE.Vector3().copy(node.max).sub(node.min);\n        const halfDimensions = new THREE.Vector3().copy(nodeDimensions).multiplyScalar(0.5);\n\n        const nodeCenter = new THREE.Vector3().copy(node.min).add(halfDimensions);\n\n        const childrenBounds = [\n            // top section, clockwise from upper-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y + halfDimensions.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x,\n                                             nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y, nodeCenter.z ),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y + halfDimensions.y, nodeCenter.z + halfDimensions.z)),\n\n            // bottom section, clockwise from lower-left (looking from above, +Y)\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x,\n                                             nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z - halfDimensions.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x + halfDimensions.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n            new THREE.Box3(new THREE.Vector3(nodeCenter.x - halfDimensions.x, nodeCenter.y - halfDimensions.y, nodeCenter.z),\n                           new THREE.Vector3(nodeCenter.x, nodeCenter.y, nodeCenter.z + halfDimensions.z)),\n        ];\n\n        const splatCounts = [];\n        const baseIndexes = [];\n        for (let i = 0; i < childrenBounds.length; i++) {\n            splatCounts[i] = 0;\n            baseIndexes[i] = [];\n        }\n\n        const position = new THREE.Vector3();\n        for (let i = 0; i < splatCount; i++) {\n            const splatIndex = node.data.indexes[i];\n            splatBuffer.getPosition(splatIndex, position);\n            for (let j = 0; j < childrenBounds.length; j++) {\n                if (childrenBounds[j].containsPoint(position)) {\n                    splatCounts[j]++;\n                    baseIndexes[j].push(splatIndex);\n                }\n            }\n        }\n\n        for (let i = 0; i < childrenBounds.length; i++) {\n            const childNode = new SplatTreeNode(childrenBounds[i].min, childrenBounds[i].max, node.depth + 1);\n            childNode.data = {\n                'indexes': baseIndexes[i]\n            };\n            node.children.push(childNode);\n        }\n\n        node.data = {};\n        for (let child of node.children) {\n            this.processNode(child, splatBuffer);\n        }\n    }\n\n\n    countLeaves() {\n\n        let leafCount = 0;\n        this.visitLeaves(() => {\n            leafCount++;\n        });\n\n        return leafCount;\n    }\n\n    visitLeaves(visitFunc) {\n\n        const visitLeavesFromNode = (node, visitFunc) => {\n            if (node.children.length === 0) visitFunc(node);\n            for (let child of node.children) {\n                visitLeavesFromNode(child, visitFunc);\n            }\n        };\n\n        return visitLeavesFromNode(this.rootNode, visitFunc);\n    }\n\n}\n","import * as THREE from 'three';\nimport { SplatTree } from './splattree/SplatTree.js';\nimport { uintEncodedFloat, rgbaToInteger } from './Util.js';\n\nexport class SplatMesh extends THREE.Mesh {\n\n    static buildMesh(splatBuffer, splatAlphaRemovalThreshold = 1, halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1) {\n        const geometry = SplatMesh.buildGeomtery(splatBuffer);\n        const material = SplatMesh.buildMaterial();\n        return new SplatMesh(splatBuffer, geometry, material, splatAlphaRemovalThreshold, halfPrecisionCovariancesOnGPU, devicePixelRatio);\n    }\n\n    constructor(splatBuffer, geometry, material, splatAlphaRemovalThreshold = 1,\n                halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1) {\n        super(geometry, material);\n        this.splatBuffer = splatBuffer;\n        this.geometry = geometry;\n        this.material = material;\n        this.splatTree = null;\n        this.splatDataTextures = null;\n        this.splatAlphaRemovalThreshold = splatAlphaRemovalThreshold;\n        this.halfPrecisionCovariancesOnGPU = halfPrecisionCovariancesOnGPU;\n        this.devicePixelRatio = devicePixelRatio;\n        this.buildSplatTree();\n        this.resetLocalSplatDataAndTexturesFromSplatBuffer();\n    }\n\n    static buildMaterial() {\n\n        const vertexShaderSource = `\n            precision highp float;\n            #include <common>\n\n            attribute uint splatIndex;\n\n            uniform highp sampler2D covariancesTexture;\n            uniform highp usampler2D centersColorsTexture;\n            uniform vec2 focal;\n            uniform vec2 viewport;\n            uniform vec2 basisViewport;\n            uniform vec2 covariancesTextureSize;\n            uniform vec2 centersColorsTextureSize;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            const vec4 encodeNorm4 = vec4(1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0, 1.0 / 255.0);\n            const uvec4 mask4 = uvec4(uint(0x000000FF), uint(0x0000FF00), uint(0x00FF0000), uint(0xFF000000));\n            const uvec4 shift4 = uvec4(0, 8, 16, 24);\n            vec4 uintToRGBAVec (uint u) {\n               uvec4 urgba = mask4 & u;\n               urgba = urgba >> shift4;\n               vec4 rgba = vec4(urgba) * encodeNorm4;\n               return rgba;\n            }\n\n            vec2 getDataUV(in int stride, in int offset, in vec2 dimensions) {\n                vec2 samplerUV = vec2(0.0, 0.0);\n                float d = float(splatIndex * uint(stride) + uint(offset)) / dimensions.x;\n                samplerUV.y = float(floor(d)) / dimensions.y;\n                samplerUV.x = fract(d);\n                return samplerUV;\n            }\n\n            void main () {\n                uvec4 sampledCenterColor = texture(centersColorsTexture, getDataUV(1, 0, centersColorsTextureSize));\n                vec3 splatCenter = uintBitsToFloat(uvec3(sampledCenterColor.gba));\n                vColor = uintToRGBAVec(sampledCenterColor.r);\n\n                vPosition = position.xy * 2.0;\n\n                vec4 viewCenter = modelViewMatrix * vec4(splatCenter, 1.0);\n                vec4 clipCenter = projectionMatrix * viewCenter;\n\n                vec2 sampledCovarianceA = texture(covariancesTexture, getDataUV(3, 0, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceB = texture(covariancesTexture, getDataUV(3, 1, covariancesTextureSize)).rg;\n                vec2 sampledCovarianceC = texture(covariancesTexture, getDataUV(3, 2, covariancesTextureSize)).rg;\n\n                vec3 cov3D_M11_M12_M13 = vec3(sampledCovarianceA.rg, sampledCovarianceB.r);\n                vec3 cov3D_M22_M23_M33 = vec3(sampledCovarianceB.g, sampledCovarianceC.rg);\n\n                // Compute the 2D covariance matrix from the upper-right portion of the 3D covariance matrix\n                mat3 Vrk = mat3(\n                    cov3D_M11_M12_M13.x, cov3D_M11_M12_M13.y, cov3D_M11_M12_M13.z,\n                    cov3D_M11_M12_M13.y, cov3D_M22_M23_M33.x, cov3D_M22_M23_M33.y,\n                    cov3D_M11_M12_M13.z, cov3D_M22_M23_M33.y, cov3D_M22_M23_M33.z\n                );\n                float s = 1.0 / (viewCenter.z * viewCenter.z);\n                mat3 J = mat3(\n                    focal.x / viewCenter.z, 0., -(focal.x * viewCenter.x) * s,\n                    0., focal.y / viewCenter.z, -(focal.y * viewCenter.y) * s,\n                    0., 0., 0.\n                );\n                mat3 W = transpose(mat3(modelViewMatrix));\n                mat3 T = W * J;\n                mat3 cov2Dm = transpose(T) * Vrk * T;\n                cov2Dm[0][0] += 0.3;\n                cov2Dm[1][1] += 0.3;\n\n                // We are interested in the upper-left 2x2 portion of the projected 3D covariance matrix because\n                // we only care about the X and Y values. We want the X-diagonal, cov2Dm[0][0],\n                // the Y-diagonal, cov2Dm[1][1], and the correlation between the two cov2Dm[0][1]. We don't\n                // need cov2Dm[1][0] because it is a symetric matrix.\n                vec3 cov2Dv = vec3(cov2Dm[0][0], cov2Dm[0][1], cov2Dm[1][1]);\n\n                vec3 ndcCenter = clipCenter.xyz / clipCenter.w;\n\n                // We now need to solve for the eigen-values and eigen vectors of the 2D covariance matrix\n                // so that we can determine the 2D basis for the splat. This is done using the method described\n                // here: https://people.math.harvard.edu/~knill/teaching/math21b2004/exhibits/2dmatrices/index.html\n                //\n                // This is a different approach than in the original work at INRIA. In that work they compute the\n                // max extents of the 2D covariance matrix in screen space to form an axis aligned bounding rectangle\n                // which forms the geometry that is actually rasterized. They then use the inverse 2D covariance\n                // matrix (called 'conic') to determine fragment opacity.\n                float a = cov2Dv.x;\n                float d = cov2Dv.z;\n                float b = cov2Dv.y;\n                float D = a * d - b * b;\n                float trace = a + d;\n                float traceOver2 = 0.5 * trace;\n                float term2 = sqrt(trace * trace / 4.0 - D);\n                float eigenValue1 = traceOver2 + term2;\n                float eigenValue2 = max(traceOver2 - term2, 0.01);\n\n                const float maxSplatSize = 1024.0;\n                vec2 eigenVector1 = normalize(vec2(b, eigenValue1 - a));\n                // since the eigen vectors are orthogonal, we derive the second one from the first\n                vec2 eigenVector2 = vec2(eigenVector1.y, -eigenVector1.x);\n                vec2 basisVector1 = eigenVector1 * min(sqrt(2.0 * eigenValue1), maxSplatSize);\n                vec2 basisVector2 = eigenVector2 * min(sqrt(2.0 * eigenValue2), maxSplatSize);\n\n                vec2 ndcOffset = vec2(vPosition.x * basisVector1 + vPosition.y * basisVector2) * basisViewport;\n\n                gl_Position = vec4(ndcCenter.xy + ndcOffset, ndcCenter.z, 1.0);\n            }`;\n\n        const fragmentShaderSource = `\n            precision highp float;\n            #include <common>\n\n            uniform vec3 debugColor;\n\n            varying vec4 vColor;\n            varying vec2 vUv;\n\n            varying vec2 vPosition;\n\n            void main () {\n                // compute the negative squared distance from the center of the splat to the\n                // current fragment in the splat's local space.\n                float A = -dot(vPosition, vPosition);\n                if (A < -4.0) discard;\n                vec3 color = vColor.rgb;\n                A = exp(A) * vColor.a;\n                gl_FragColor = vec4(color.rgb, A);\n            }`;\n\n        const uniforms = {\n            'covariancesTexture': {\n                'type': 't',\n                'value': null\n            },\n            'centersColorsTexture': {\n                'type': 't',\n                'value': null\n            },\n            'focal': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'viewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'basisViewport': {\n                'type': 'v2',\n                'value': new THREE.Vector2()\n            },\n            'debugColor': {\n                'type': 'v3',\n                'value': new THREE.Color()\n            },\n            'covariancesTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            },\n            'centersColorsTextureSize': {\n                'type': 'v2',\n                'value': new THREE.Vector2(1024, 1024)\n            }\n        };\n\n        const material = new THREE.ShaderMaterial({\n            uniforms: uniforms,\n            vertexShader: vertexShaderSource,\n            fragmentShader: fragmentShaderSource,\n            transparent: true,\n            alphaTest: 1.0,\n            blending: THREE.NormalBlending,\n            depthTest: true,\n            depthWrite: false,\n            side: THREE.DoubleSide\n        });\n\n        return material;\n    }\n\n    static buildGeomtery(splatBuffer) {\n\n        const splatCount = splatBuffer.getSplatCount();\n\n        const baseGeometry = new THREE.BufferGeometry();\n        baseGeometry.setIndex([0, 1, 2, 0, 2, 3]);\n\n        const positionsArray = new Float32Array(4 * 3);\n        const positions = new THREE.BufferAttribute(positionsArray, 3);\n        baseGeometry.setAttribute('position', positions);\n        positions.setXYZ(0, -1.0, -1.0, 0.0);\n        positions.setXYZ(1, -1.0, 1.0, 0.0);\n        positions.setXYZ(2, 1.0, 1.0, 0.0);\n        positions.setXYZ(3, 1.0, -1.0, 0.0);\n        positions.needsUpdate = true;\n\n        const geometry = new THREE.InstancedBufferGeometry().copy(baseGeometry);\n\n        const splatIndexArray = new Uint32Array(splatCount);\n        const splatIndexes = new THREE.InstancedBufferAttribute(splatIndexArray, 1, false);\n        splatIndexes.setUsage(THREE.DynamicDrawUsage);\n        geometry.setAttribute('splatIndex', splatIndexes);\n\n        geometry.instanceCount = splatCount;\n\n        return geometry;\n    }\n\n    buildSplatTree() {\n\n        this.splatTree = new SplatTree(10, 500);\n        console.time('SplatTree build');\n        const splatColor = new THREE.Vector4();\n        this.splatTree.processSplatBuffer(this.splatBuffer, (splatIndex) => {\n            this.splatBuffer.getColor(splatIndex, splatColor);\n            return splatColor.w > this.splatAlphaRemovalThreshold;\n        });\n        console.timeEnd('SplatTree build');\n\n        let leavesWithVertices = 0;\n        let avgSplatCount = 0;\n        let maxSplatCount = 0;\n        let nodeCount = 0;\n\n        this.splatTree.visitLeaves((node) => {\n            const nodeSplatCount = node.data.indexes.length;\n            if (nodeSplatCount > 0) {\n                avgSplatCount += nodeSplatCount;\n                maxSplatCount = Math.max(maxSplatCount, nodeSplatCount);\n                nodeCount++;\n                leavesWithVertices++;\n            }\n        });\n        console.log(`SplatTree leaves: ${this.splatTree.countLeaves()}`);\n        console.log(`SplatTree leaves with splats:${leavesWithVertices}`);\n        avgSplatCount = avgSplatCount / nodeCount;\n        console.log(`Avg splat count per node: ${avgSplatCount}`);\n    }\n\n    getSplatTree() {\n        return this.splatTree;\n    }\n\n    resetLocalSplatDataAndTexturesFromSplatBuffer() {\n        this.updateLocalSplatDataFromSplatBuffer();\n        this.allocateAndStoreLocalSplatDataInTextures();\n    }\n\n    updateLocalSplatDataFromSplatBuffer() {\n        const splatCount = this.splatBuffer.getSplatCount();\n        this.covariances = new Float32Array(this.splatBuffer.getPrecomputedCovarianceBufferData());\n        this.colors = new Uint8Array(splatCount * 4);\n        this.centers = new Float32Array(splatCount * 3);\n        this.splatBuffer.fillPositionArray(this.centers);\n        this.splatBuffer.fillColorArray(this.colors);\n    }\n\n    allocateAndStoreLocalSplatDataInTextures() {\n        const COVARIANCES_ELEMENTS_PER_TEXEL = 2;\n        const CENTER_COLORS_ELEMENTS_PER_TEXEL = 4;\n        const splatCount = this.splatBuffer.getSplatCount();\n\n        const covariancesTextureSize = new THREE.Vector2(4096, 1024);\n        while (covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL < splatCount * 6) {\n            covariancesTextureSize.y *= 2;\n        }\n\n        const centersColorsTextureSize = new THREE.Vector2(4096, 1024);\n        while (centersColorsTextureSize.x * centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL < splatCount * 4) {\n            centersColorsTextureSize.y *= 2;\n        }\n\n        let covariancesTexture;\n        let paddedCovariances;\n        if (this.halfPrecisionCovariancesOnGPU) {\n            paddedCovariances = new Uint16Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            for (let i = 0; i < this.covariances.length; i++) {\n                paddedCovariances[i] = THREE.DataUtils.toHalfFloat(this.covariances[i]);\n            }\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.HalfFloatType);\n        } else {\n            paddedCovariances = new Float32Array(covariancesTextureSize.x * covariancesTextureSize.y * COVARIANCES_ELEMENTS_PER_TEXEL);\n            paddedCovariances.set(this.covariances);\n            covariancesTexture = new THREE.DataTexture(paddedCovariances, covariancesTextureSize.x,\n                                                       covariancesTextureSize.y, THREE.RGFormat, THREE.FloatType);\n        }\n        covariancesTexture.needsUpdate = true;\n        this.material.uniforms.covariancesTexture.value = covariancesTexture;\n        this.material.uniforms.covariancesTextureSize.value.copy(covariancesTextureSize);\n\n        const paddedCenterColors = new Uint32Array(centersColorsTextureSize.x *\n                                                   centersColorsTextureSize.y * CENTER_COLORS_ELEMENTS_PER_TEXEL);\n        for (let c = 0; c < splatCount; c++) {\n            const colorsBase = c * 4;\n            const centersBase = c * 3;\n            const centerColorsBase = c * 4;\n            paddedCenterColors[centerColorsBase] = rgbaToInteger(this.colors[colorsBase], this.colors[colorsBase + 1],\n                                                                 this.colors[colorsBase + 2], this.colors[colorsBase + 3]);\n            paddedCenterColors[centerColorsBase + 1] = uintEncodedFloat(this.centers[centersBase]);\n            paddedCenterColors[centerColorsBase + 2] = uintEncodedFloat(this.centers[centersBase + 1]);\n            paddedCenterColors[centerColorsBase + 3] = uintEncodedFloat(this.centers[centersBase + 2]);\n        }\n        const centersColorsTexture = new THREE.DataTexture(paddedCenterColors, centersColorsTextureSize.x,\n                                                           centersColorsTextureSize.y, THREE.RGBAIntegerFormat, THREE.UnsignedIntType);\n        centersColorsTexture.internalFormat = 'RGBA32UI';\n        centersColorsTexture.needsUpdate = true;\n        this.material.uniforms.centersColorsTexture.value = centersColorsTexture;\n        this.material.uniforms.centersColorsTextureSize.value.copy(centersColorsTextureSize);\n        this.material.uniformsNeedUpdate = true;\n\n        this.splatDataTextures = {\n            'covariances': {\n                'data': paddedCovariances,\n                'texture': covariancesTexture,\n                'size': covariancesTextureSize\n            },\n            'centerColors': {\n                'data': paddedCenterColors,\n                'texture': centersColorsTexture,\n                'size': centersColorsTextureSize\n            }\n        };\n    }\n\n    updateSplatDataToDataTextures() {\n        this.updateLocalCovarianceDataToDataTexture();\n        this.updateLocalCenterColorDataToDataTexture();\n    }\n\n    updateLocalCovarianceDataToDataTexture() {\n        this.splatDataTextures.covariances.data.set(this.covariances);\n        this.splatDataTextures.covariances.texture.needsUpdate = true;\n    }\n\n    updateLocalCenterColorDataToDataTexture() {\n        this.splatDataTextures.centerColors.data.set(this.centerColors);\n        this.splatDataTextures.centerColors.texture.needsUpdate = true;\n    }\n\n    updateIndexes(indexes, renderSplatCount) {\n        const geometry = this.geometry;\n\n        geometry.attributes.splatIndex.set(indexes);\n        geometry.attributes.splatIndex.needsUpdate = true;\n\n        geometry.instanceCount = renderSplatCount;\n    }\n\n    updateUniforms = function() {\n\n        const viewport = new THREE.Vector2();\n\n        return function(renderDimensions, cameraFocalLengthX, cameraFocalLengthY) {\n            const splatCount = this.splatBuffer.getSplatCount();\n            if (splatCount > 0) {\n                viewport.set(renderDimensions.x * this.devicePixelRatio,\n                             renderDimensions.y * this.devicePixelRatio);\n                this.material.uniforms.viewport.value.copy(viewport);\n                this.material.uniforms.basisViewport.value.set(2.0 / viewport.x, 2.0 / viewport.y);\n                this.material.uniforms.focal.value.set(cameraFocalLengthX, cameraFocalLengthY);\n                this.material.uniformsNeedUpdate = true;\n            }\n        };\n\n    }();\n\n    getSplatDataTextures() {\n        return this.splatDataTextures;\n    }\n\n    getSplatCount() {\n        return this.splatBuffer.getSplatCount();\n    }\n\n    getCenters() {\n        return this.centers;\n    }\n\n    getColors() {\n        return this.colors;\n    }\n\n    getCovariances() {\n        return this.covariances;\n    }\n}\n","export class Constants {\n\n    static DepthMapRange = 1 << 16;\n    static MemoryPageSize = 65536;\n    static BytesPerFloat = 4;\n    static BytesPerInt = 4;\n\n}\n","import SorterWasm from './sorter.wasm';\nimport { Constants } from '../Constants.js';\n\nfunction sortWorker(self) {\n\n    let wasmInstance;\n    let splatCount;\n    let indexesOffset;\n    let positionsOffset;\n    let viewProjOffset;\n    let indexesOutOffset;\n    let sortBuffersOffset;\n    let wasmMemory;\n    let positions;\n    let countsZero;\n\n    let Constants;\n\n    function sort(splatSortCount, splatRenderCount, viewProj, cameraPosition) {\n\n        // console.time('WASM SORT');\n        const sortStartTime = performance.now();\n        if (!countsZero) countsZero = new Uint32Array(Constants.DepthMapRange);\n        const viewProjArray = new Int32Array(wasmMemory, viewProjOffset, 16);\n        for (let i = 0; i < 16; i++) {\n            viewProjArray[i] = Math.round(viewProj[i] * 1000.0);\n        }\n        const frequencies = new Uint32Array(wasmMemory, sortBuffersOffset + splatCount * 4, Constants.DepthMapRange);\n        frequencies.set(countsZero);\n        wasmInstance.exports.sortIndexes(indexesOffset, positionsOffset, sortBuffersOffset, viewProjOffset,\n                                         indexesOutOffset, cameraPosition[0], cameraPosition[1],\n                                         cameraPosition[2], Constants.DepthMapRange, splatSortCount, splatRenderCount, splatCount);\n        const sortEndTime = performance.now();\n        // console.timeEnd('WASM SORT');\n\n        self.postMessage({\n            'sortDone': true,\n            'splatSortCount': splatSortCount,\n            'splatRenderCount': splatRenderCount,\n            'sortTime': sortEndTime - sortStartTime\n        });\n    }\n\n    self.onmessage = (e) => {\n        if (e.data.positions) {\n            positions = e.data.positions;\n            const floatPositions = new Float32Array(positions);\n            const intPositions = new Int32Array(splatCount * 3);\n            for (let i = 0; i < splatCount * 3; i++) {\n                intPositions[i] = Math.round(floatPositions[i] * 1000.0);\n            }\n            new Int32Array(wasmMemory, positionsOffset, splatCount * 3).set(intPositions);\n            self.postMessage({\n                'sortSetupComplete': true,\n            });\n        } else if (e.data.sort) {\n            const renderCount = e.data.sort.splatRenderCount || 0;\n            const sortCount = e.data.sort.splatSortCount || 0;\n            sort(sortCount, renderCount, e.data.sort.view, e.data.sort.cameraPosition, e.data.sort.inIndexBuffer);\n        } else if (e.data.init) {\n            // Yep, this is super hacky and gross :(\n            Constants = e.data.init.Constants;\n\n            splatCount = e.data.init.splatCount;\n\n            const INDEXES_BYTES_PER_ENTRY = Constants.BytesPerInt;\n            const POSITIONS_BYTES_PER_ENTRY = Constants.BytesPerFloat * 3;\n\n            const sorterWasmBytes = new Uint8Array(e.data.init.sorterWasmBytes);\n            const memoryBytesPerVertex = INDEXES_BYTES_PER_ENTRY + POSITIONS_BYTES_PER_ENTRY;\n            const memoryRequiredForVertices = splatCount * memoryBytesPerVertex;\n            const memoryRequiredForSortBuffers = splatCount * Constants.BytesPerInt * 2 +\n                                                 Constants.DepthMapRange * Constants.BytesPerInt * 2;\n            const extraMemory = Constants.MemoryPageSize * 32;\n            const totalRequiredMemory = memoryRequiredForVertices + memoryRequiredForSortBuffers + extraMemory;\n            const totalPagesRequired = Math.floor(totalRequiredMemory / Constants.MemoryPageSize ) + 1;\n            const sorterWasmImport = {\n                module: {},\n                env: {\n                    memory: new WebAssembly.Memory({\n                        initial: totalPagesRequired * 2,\n                        maximum: totalPagesRequired * 3,\n                        shared: true,\n                    }),\n                }\n            };\n            WebAssembly.compile(sorterWasmBytes)\n            .then((wasmModule) => {\n                return WebAssembly.instantiate(wasmModule, sorterWasmImport);\n            })\n            .then((instance) => {\n                wasmInstance = instance;\n                indexesOffset = 0;\n                positionsOffset = splatCount * INDEXES_BYTES_PER_ENTRY;\n                viewProjOffset = positionsOffset + splatCount * POSITIONS_BYTES_PER_ENTRY;\n                sortBuffersOffset = viewProjOffset + 16 * Constants.BytesPerFloat;\n                indexesOutOffset = sortBuffersOffset + splatCount * Constants.BytesPerInt +\n                                   Constants.DepthMapRange * Constants.BytesPerInt * 2;\n                wasmMemory = sorterWasmImport.env.memory.buffer;\n                self.postMessage({\n                    'sortSetupPhase1Complete': true,\n                    'inIndexBuffer': wasmMemory,\n                    'inIndexOffset': 0,\n                    'outIndexBuffer': wasmMemory,\n                    'outIndexOffset': indexesOutOffset\n                });\n            });\n        }\n    };\n}\n\nexport function createSortWorker(splatCount) {\n    const worker = new Worker(\n        URL.createObjectURL(\n            new Blob(['(', sortWorker.toString(), ')(self)'], {\n                type: 'application/javascript',\n            }),\n        ),\n    );\n\n    const sorterWasmBinaryString = atob(SorterWasm);\n    const sorterWasmBytes = new Uint8Array(sorterWasmBinaryString.length);\n    for (let i = 0; i < sorterWasmBinaryString.length; i++) {\n        sorterWasmBytes[i] = sorterWasmBinaryString.charCodeAt(i);\n    }\n\n    worker.postMessage({\n        'init': {\n            'sorterWasmBytes': sorterWasmBytes.buffer,\n            'splatCount': splatCount,\n            // Super hacky\n            'Constants': {\n                'BytesPerFloat': Constants.BytesPerFloat,\n                'BytesPerInt': Constants.BytesPerInt,\n                'DepthMapRange': Constants.DepthMapRange,\n                'MemoryPageSize': Constants.MemoryPageSize\n            }\n        }\n    });\n    return worker;\n}\n","import * as THREE from 'three';\nimport { OrbitControls } from './OrbitControls.js';\nimport { PlyLoader } from './PlyLoader.js';\nimport { SplatLoader } from './SplatLoader.js';\nimport { LoadingSpinner } from './LoadingSpinner.js';\nimport { SceneHelper } from './SceneHelper.js';\nimport { Raycaster } from './raycaster/Raycaster.js';\nimport { SplatMesh } from './SplatMesh.js';\nimport { createSortWorker } from './worker/SortWorker.js';\nimport { Constants } from './Constants.js';\nimport { getCurrentTime } from './Util.js';\n\nconst THREE_CAMERA_FOV = 50;\n\nexport class Viewer {\n\n    constructor(params = {}) {\n\n        if (!params.cameraUp) params.cameraUp = [0, 1, 0];\n        if (!params.initialCameraPosition) params.initialCameraPosition = [0, 10, 15];\n        if (!params.initialCameraLookAt) params.initialCameraLookAt = [0, 0, 0];\n        if (params.selfDrivenMode === undefined) params.selfDrivenMode = true;\n        if (params.useBuiltInControls === undefined) params.useBuiltInControls = true;\n\n        this.rootElement = params.rootElement;\n        this.usingExternalCamera = params.camera ? true : false;\n        this.usingExternalRenderer = params.renderer ? true : false;\n\n        this.cameraUp = new THREE.Vector3().fromArray(params.cameraUp);\n        this.initialCameraPosition = new THREE.Vector3().fromArray(params.initialCameraPosition);\n        this.initialCameraLookAt = new THREE.Vector3().fromArray(params.initialCameraLookAt);\n\n        this.scene = params.scene;\n        this.simpleScene = params.simpleScene;\n        this.renderer = params.renderer;\n        this.camera = params.camera;\n        this.useBuiltInControls = params.useBuiltInControls;\n        this.controls = null;\n\n        this.ignoreDevicePixelRatio = params.ignoreDevicePixelRatio || false;\n        this.devicePixelRatio = this.ignoreDevicePixelRatio ? 1 : window.devicePixelRatio;\n\n        this.selfDrivenMode = params.selfDrivenMode;\n        this.selfDrivenUpdateFunc = this.selfDrivenUpdate.bind(this);\n\n        this.showMeshCursor = false;\n        this.showControlPlane = false;\n        this.showInfo = false;\n\n        this.sceneHelper = null;\n\n        this.sortWorker = null;\n        this.splatRenderCount = 0;\n        this.splatSortCount = 0;\n\n        this.inIndexArray = null;\n\n        this.splatMesh = null;\n\n        this.sortRunning = false;\n        this.selfDrivenModeRunning = false;\n        this.splatRenderingInitialized = false;\n\n        this.raycaster = new Raycaster();\n\n        this.infoPanel = null;\n        this.infoPanelCells = {};\n\n        this.currentFPS = 0;\n        this.lastSortTime = 0;\n\n        this.previousCameraTarget = new THREE.Vector3();\n        this.nextCameraTarget = new THREE.Vector3();\n\n        this.mousePosition = new THREE.Vector2();\n        this.mouseDownPosition = new THREE.Vector2();\n        this.mouseDownTime = null;\n        window.addEventListener('mousemove', this.onMouseMove.bind(this));\n        window.addEventListener('mousedown', this.onMouseDown.bind(this));\n        window.addEventListener('mouseup', this.onMouseUp.bind(this));\n        window.addEventListener('keydown', this.onKeyDown.bind(this));\n\n        this.loadingSpinner = new LoadingSpinner();\n        this.loadingSpinner.hide();\n    }\n\n    onKeyDown = function() {\n\n        const forward = new THREE.Vector3();\n        const tempMatrixLeft = new THREE.Matrix4();\n        const tempMatrixRight = new THREE.Matrix4();\n\n        return function(e) {\n            forward.set(0, 0, -1);\n            forward.transformDirection(this.camera.matrixWorld);\n            tempMatrixLeft.makeRotationAxis(forward, Math.PI / 128);\n            tempMatrixRight.makeRotationAxis(forward, -Math.PI / 128);\n            switch (e.code) {\n                case 'ArrowLeft':\n                    this.camera.up.transformDirection(tempMatrixLeft);\n                break;\n                case 'ArrowRight':\n                    this.camera.up.transformDirection(tempMatrixRight);\n                break;\n                case 'KeyC':\n                    this.showMeshCursor = !this.showMeshCursor;\n                break;\n                case 'KeyP':\n                    this.showControlPlane = !this.showControlPlane;\n                break;\n                case 'KeyI':\n                    this.showInfo = !this.showInfo;\n                    if (this.showInfo) {\n                        this.infoPanel.style.display = 'block';\n                    } else {\n                        this.infoPanel.style.display = 'none';\n                    }\n                break;\n            }\n        };\n\n    }();\n\n    onMouseMove(mouse) {\n        this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n    }\n\n    onMouseDown() {\n        this.mouseDownPosition.copy(this.mousePosition);\n        this.mouseDownTime = getCurrentTime();\n    }\n\n    onMouseUp = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        const clickOffset = new THREE.Vector2();\n        const outHits = [];\n\n        return function(mouse) {\n            clickOffset.copy(this.mousePosition).sub(this.mouseDownPosition);\n            const mouseUpTime = getCurrentTime();\n            const wasClick = mouseUpTime - this.mouseDownTime < 0.5 && clickOffset.length() < 2;\n            if (!this.transitioningCameraTarget && wasClick) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.mousePosition.set(mouse.offsetX, mouse.offsetY);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.previousCameraTarget.copy(this.controls.target);\n                    this.nextCameraTarget.copy(outHits[0].origin);\n                    this.transitioningCameraTarget = true;\n                    this.transitioningCameraTargetStartTime = getCurrentTime();\n                }\n            }\n        };\n\n    }();\n\n    getRenderDimensions(outDimensions) {\n        if (this.rootElement) {\n            outDimensions.x = this.rootElement.offsetWidth;\n            outDimensions.y = this.rootElement.offsetHeight;\n        } else {\n            this.renderer.getSize(outDimensions);\n        }\n    }\n\n    init() {\n\n        if (!this.rootElement && !this.usingExternalRenderer) {\n            this.rootElement = document.createElement('div');\n            this.rootElement.style.width = '100%';\n            this.rootElement.style.height = '100%';\n            document.body.appendChild(this.rootElement);\n        }\n\n        const renderDimensions = new THREE.Vector2();\n        this.getRenderDimensions(renderDimensions);\n\n        if (!this.usingExternalCamera) {\n            this.camera = new THREE.PerspectiveCamera(THREE_CAMERA_FOV, renderDimensions.x / renderDimensions.y, 0.1, 500);\n            this.camera.position.copy(this.initialCameraPosition);\n            this.camera.lookAt(this.initialCameraLookAt);\n            this.camera.up.copy(this.cameraUp).normalize();\n        }\n\n        this.scene = this.scene || new THREE.Scene();\n        this.simpleScene = this.simpleScene || new THREE.Scene();\n        this.sceneHelper = new SceneHelper(this.scene, this.simpleScene);\n        this.sceneHelper.setupMeshCursor();\n        this.sceneHelper.setupFocusMarker();\n        this.sceneHelper.setupControlPlane();\n\n        if (!this.usingExternalRenderer) {\n            this.renderer = new THREE.WebGLRenderer({\n                antialias: false,\n                precision: 'highp'\n            });\n            this.renderer.setPixelRatio(this.devicePixelRatio);\n            this.renderer.autoClear = true;\n            this.renderer.setClearColor(0.0, 0.0, 0.0, 0.0);\n            this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n        }\n        this.setupRenderTargetCopyObjects();\n\n        if (this.useBuiltInControls) {\n            this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n            this.controls.rotateSpeed = 0.5;\n            this.controls.maxPolarAngle = Math.PI * .75;\n            this.controls.minPolarAngle = 0.1;\n            this.controls.enableDamping = true;\n            this.controls.dampingFactor = 0.05;\n            this.controls.target.copy(this.initialCameraLookAt);\n        }\n\n        if (!this.usingExternalRenderer) {\n            const resizeObserver = new ResizeObserver(() => {\n                this.getRenderDimensions(renderDimensions);\n                this.renderer.setSize(renderDimensions.x, renderDimensions.y);\n            });\n            resizeObserver.observe(this.rootElement);\n            this.rootElement.appendChild(this.renderer.domElement);\n        }\n\n        this.setupSimpleObjectDepthOverrideMaterial();\n        this.setupInfoPanel();\n\n    }\n\n    setupInfoPanel() {\n        this.infoPanel = document.createElement('div');\n        this.infoPanel.style.position = 'absolute';\n        this.infoPanel.style.padding = '10px';\n        this.infoPanel.style.backgroundColor = '#cccccc';\n        this.infoPanel.style.border = '#aaaaaa 1px solid';\n        this.infoPanel.style.zIndex = 100;\n        this.infoPanel.style.width = '375px';\n        this.infoPanel.style.fontFamily = 'arial';\n        this.infoPanel.style.fontSize = '10pt';\n        this.infoPanel.style.textAlign = 'left';\n\n        const layout = [\n            ['Camera position', 'cameraPosition'],\n            ['Camera look-at', 'cameraLookAt'],\n            ['Camera up', 'cameraUp'],\n            ['Cursor position', 'cursorPosition'],\n            ['FPS', 'fps'],\n            ['Render window', 'renderWindow'],\n            ['Rendering:', 'renderSplatCount'],\n            ['Sort time', 'sortTime']\n        ];\n\n        const infoTable = document.createElement('div');\n        infoTable.style.display = 'table';\n\n        for (let layoutEntry of layout) {\n            const row = document.createElement('div');\n            row.style.display = 'table-row';\n\n            const labelCell = document.createElement('div');\n            labelCell.style.display = 'table-cell';\n            labelCell.style.width = '110px';\n            labelCell.innerHTML = `${layoutEntry[0]}: `;\n\n            const spacerCell = document.createElement('div');\n            spacerCell.style.display = 'table-cell';\n            spacerCell.style.width = '10px';\n            spacerCell.innerHTML = ' ';\n\n            const infoCell = document.createElement('div');\n            infoCell.style.display = 'table-cell';\n            infoCell.innerHTML = '';\n\n            this.infoPanelCells[layoutEntry[1]] = infoCell;\n\n            row.appendChild(labelCell);\n            row.appendChild(spacerCell);\n            row.appendChild(infoCell);\n\n            infoTable.appendChild(row);\n        }\n\n        this.infoPanel.appendChild(infoTable);\n        this.infoPanel.style.display = 'none';\n        this.renderer.domElement.parentElement.prepend(this.infoPanel);\n    }\n\n    updateSplatRenderTargetForRenderDimensions(width, height) {\n        this.splatRenderTarget = new THREE.WebGLRenderTarget(width, height, {\n            format: THREE.RGBAFormat,\n            stencilBuffer: false,\n            depthBuffer: true,\n\n        });\n        this.splatRenderTarget.depthTexture = new THREE.DepthTexture(width, height);\n        this.splatRenderTarget.depthTexture.format = THREE.DepthFormat;\n        this.splatRenderTarget.depthTexture.type = THREE.UnsignedIntType;\n    }\n\n    setupSimpleObjectDepthOverrideMaterial() {\n        this.simpleObjectDepthOverrideMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                #include <common>\n                void main() {\n                    gl_Position = projectionMatrix * viewMatrix * modelMatrix * vec4(position.xyz, 1.0);   \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                void main() {\n                    gl_FragColor = vec4(1.0, 0.0, 0.0, 1.0);\n              }\n            `,\n            depthWrite: true,\n            depthTest: true,\n            transparent: false\n        });\n    }\n\n    setupRenderTargetCopyObjects() {\n        const uniforms = {\n            'sourceColorTexture': {\n                'type': 't',\n                'value': null\n            },\n            'sourceDepthTexture': {\n                'type': 't',\n                'value': null\n            },\n        };\n        this.renderTargetCopyMaterial = new THREE.ShaderMaterial({\n            vertexShader: `\n                varying vec2 vUv;\n                void main() {\n                    vUv = uv;\n                    gl_Position = vec4( position.xy, 0.0, 1.0 );    \n                }\n            `,\n            fragmentShader: `\n                #include <common>\n                #include <packing>\n                varying vec2 vUv;\n                uniform sampler2D sourceColorTexture;\n                uniform sampler2D sourceDepthTexture;\n                void main() {\n                    vec4 color = texture2D(sourceColorTexture, vUv);\n                    float fragDepth = texture2D(sourceDepthTexture, vUv).x;\n                    gl_FragDepth = fragDepth;\n                    gl_FragColor = vec4(color.rgb, color.a * 2.0);\n              }\n            `,\n            uniforms: uniforms,\n            depthWrite: false,\n            depthTest: false,\n            transparent: true,\n            blending: THREE.CustomBlending,\n            blendSrc: THREE.SrcAlphaFactor,\n            blendSrcAlpha: THREE.SrcAlphaFactor,\n            blendDst: THREE.OneMinusSrcAlphaFactor,\n            blendDstAlpha: THREE.OneMinusSrcAlphaFactor\n        });\n        this.renderTargetCopyMaterial.extensions.fragDepth = true;\n        this.renderTargetCopyQuad = new THREE.Mesh(new THREE.PlaneGeometry(2, 2), this.renderTargetCopyMaterial);\n        this.renderTargetCopyCamera = new THREE.OrthographicCamera(-1, 1, 1, -1, 0, 1);\n    }\n\n    updateSplatMeshUniforms = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            const splatCount = this.splatMesh.getSplatCount();\n            if (splatCount > 0) {\n                this.getRenderDimensions(renderDimensions);\n                this.cameraFocalLengthX = this.camera.projectionMatrix.elements[0] *\n                                          this.devicePixelRatio * renderDimensions.x * 0.45;\n                                          this.cameraFocalLengthY = this.camera.projectionMatrix.elements[5] *\n                                          this.devicePixelRatio * renderDimensions.y * 0.45;\n                this.splatMesh.updateUniforms(renderDimensions, this.cameraFocalLengthX, this.cameraFocalLengthY);\n            }\n        };\n\n    }();\n\n    loadFile(fileURL, options = {}) {\n        if (options.position) options.position = new THREE.Vector3().fromArray(options.position);\n        if (options.orientation) options.orientation = new THREE.Quaternion().fromArray(options.orientation);\n        options.splatAlphaRemovalThreshold = options.splatAlphaRemovalThreshold || 1;\n        options.halfPrecisionCovariancesOnGPU = !!options.halfPrecisionCovariancesOnGPU;\n        this.loadingSpinner.show();\n        const loadingProgress = (percent, percentLabel) => {\n            if (percent == 100) {\n                this.loadingSpinner.setMessage(`Download complete!`);\n            } else {\n                if (percentLabel) {\n                    this.loadingSpinner.setMessage(`Downloading: ${percentLabel}`);\n                } else {\n                    this.loadingSpinner.setMessage(`Downloading...`);\n                }\n            }\n        };\n        return new Promise((resolve, reject) => {\n            let fileLoadPromise;\n            if (fileURL.endsWith('.splat')) {\n                fileLoadPromise = new SplatLoader().loadFromURL(fileURL, loadingProgress);\n            } else if (fileURL.endsWith('.ply')) {\n                fileLoadPromise = new PlyLoader().loadFromURL(fileURL, loadingProgress);\n            } else {\n                reject(new Error(`Viewer::loadFile -> File format not supported: ${fileURL}`));\n            }\n            fileLoadPromise\n            .then((splatBuffer) => {\n                this.loadingSpinner.hide();\n                this.loadSplatBuffer(splatBuffer, options).then(() => {\n                    resolve();\n                });\n            })\n            .catch((e) => {\n                reject(new Error(`Viewer::loadFile -> Could not load file ${fileURL}`));\n            });\n        });\n    }\n\n    loadSplatBuffer(splatBuffer, options) {\n        return new Promise((resolve) => {\n            this.loadingSpinner.show();\n            this.loadingSpinner.setMessage(`Processing splats...`);\n            window.setTimeout(() => {\n                this.setupSplatMesh(splatBuffer, options.splatAlphaRemovalThreshold, options.position,\n                                    options.orientation, options.halfPrecisionCovariancesOnGPU, this.devicePixelRatio);\n                this.setupSortWorker(splatBuffer).then(() => {\n                    this.loadingSpinner.hide();\n                    resolve();\n                });\n            }, 1);\n        });\n    }\n\n    setupSplatMesh(splatBuffer, splatAlphaRemovalThreshold = 1, position = new THREE.Vector3(), quaternion = new THREE.Quaternion(),\n                   halfPrecisionCovariancesOnGPU = false, devicePixelRatio = 1) {\n        const splatCount = splatBuffer.getSplatCount();\n        console.log(`Splat count: ${splatCount}`);\n\n        splatBuffer.buildPreComputedBuffers();\n        this.splatMesh = SplatMesh.buildMesh(splatBuffer, splatAlphaRemovalThreshold, halfPrecisionCovariancesOnGPU, devicePixelRatio);\n        this.splatMesh.position.copy(position);\n        this.splatMesh.quaternion.copy(quaternion);\n        this.splatMesh.frustumCulled = false;\n        this.splatMesh.renderOrder = 10;\n        this.updateSplatMeshUniforms();\n\n        this.splatRenderCount = splatCount;\n    }\n\n    setupSortWorker(splatBuffer) {\n        return new Promise((resolve) => {\n            const splatCount = splatBuffer.getSplatCount();\n            this.sortWorker = createSortWorker(splatCount);\n            this.sortWorker.onmessage = (e) => {\n                if (e.data.sortDone) {\n                    this.sortRunning = false;\n                    this.splatMesh.updateIndexes(this.outIndexArray, e.data.splatRenderCount);\n                    this.lastSortTime = e.data.sortTime;\n                } else if (e.data.sortCanceled) {\n                    this.sortRunning = false;\n                } else if (e.data.sortSetupPhase1Complete) {\n                    console.log('Sorting web worker WASM setup complete.');\n                    this.sortWorker.postMessage({\n                        'positions': this.splatMesh.getCenters().buffer\n                    });\n                    this.outIndexArray = new Uint32Array(e.data.outIndexBuffer, e.data.outIndexOffset, splatBuffer.getSplatCount());\n                    this.inIndexArray = new Uint32Array(e.data.inIndexBuffer, e.data.inIndexOffset, splatBuffer.getSplatCount());\n                    for (let i = 0; i < splatCount; i++) this.inIndexArray[i] = i;\n                } else if (e.data.sortSetupComplete) {\n                    console.log('Sorting web worker ready.');\n                    this.splatMesh.updateIndexes(this.outIndexArray, splatBuffer.getSplatCount());\n                    const splatDataTextures = this.splatMesh.getSplatDataTextures();\n                    const covariancesTextureSize = splatDataTextures.covariances.size;\n                    const centersColorsTextureSize = splatDataTextures.centerColors.size;\n                    console.log('Covariances texture size: ' + covariancesTextureSize.x + ' x ' + covariancesTextureSize.y);\n                    console.log('Centers/colors texture size: ' + centersColorsTextureSize.x + ' x ' + centersColorsTextureSize.y);\n                    this.updateView(true, true);\n                    this.splatRenderingInitialized = true;\n                    resolve();\n                }\n            };\n        });\n    }\n\n    gatherSceneNodes = function() {\n\n        const nodeRenderList = [];\n        const tempVectorYZ = new THREE.Vector3();\n        const tempVectorXZ = new THREE.Vector3();\n        const tempVector = new THREE.Vector3();\n        const tempMatrix4 = new THREE.Matrix4();\n        const renderDimensions = new THREE.Vector3();\n        const forward = new THREE.Vector3(0, 0, -1);\n\n        const tempMax = new THREE.Vector3();\n        const nodeSize = (node) => {\n            return tempMax.copy(node.max).sub(node.min).length();\n        };\n\n        const MaximumDistanceToSort = 125;\n        const MaximumDistanceToRender = 125;\n\n        return function(gatherAllNodes) {\n\n            this.getRenderDimensions(renderDimensions);\n            const cameraFocalLength = (renderDimensions.y / 2.0) / Math.tan(this.camera.fov / 2.0 * THREE.MathUtils.DEG2RAD);\n            const fovXOver2 = Math.atan(renderDimensions.x / 2.0 / cameraFocalLength);\n            const fovYOver2 = Math.atan(renderDimensions.y / 2.0 / cameraFocalLength);\n            const cosFovXOver2 = Math.cos(fovXOver2);\n            const cosFovYOver2 = Math.cos(fovYOver2);\n            tempMatrix4.copy(this.camera.matrixWorld).invert();\n            tempMatrix4.multiply(this.splatMesh.matrixWorld);\n\n            const splatTree = this.splatMesh.getSplatTree();\n            let nodeRenderCount = 0;\n            let splatRenderCount = 0;\n            const nodeCount = splatTree.nodesWithIndexes.length;\n            for (let i = 0; i < nodeCount; i++) {\n                const node = splatTree.nodesWithIndexes[i];\n                tempVector.copy(node.center).applyMatrix4(tempMatrix4);\n                const distanceToNode = tempVector.length();\n                tempVector.normalize();\n\n                tempVectorYZ.copy(tempVector).setX(0).normalize();\n                tempVectorXZ.copy(tempVector).setY(0).normalize();\n\n                const cameraAngleXZDot = forward.dot(tempVectorXZ);\n                const cameraAngleYZDot = forward.dot(tempVectorYZ);\n\n                const ns = nodeSize(node);\n                const outOfFovY = cameraAngleYZDot < (cosFovYOver2 - .5);\n                const outOfFovX = cameraAngleXZDot < (cosFovXOver2 - .5);\n                if (!gatherAllNodes && ((outOfFovX || outOfFovY || distanceToNode > MaximumDistanceToRender) && distanceToNode > ns)) {\n                    continue;\n                }\n                splatRenderCount += node.data.indexes.length;\n                nodeRenderList[nodeRenderCount] = node;\n                node.data.distanceToNode = distanceToNode;\n                nodeRenderCount++;\n            }\n\n            nodeRenderList.length = nodeRenderCount;\n            nodeRenderList.sort((a, b) => {\n                if (a.data.distanceToNode < b.data.distanceToNode) return 1;\n                else return -1;\n            });\n\n            this.splatRenderCount = splatRenderCount;\n            this.splatSortCount = 0;\n            let currentByteOffset = splatRenderCount * Constants.BytesPerInt;\n            for (let i = 0; i < nodeRenderCount; i++) {\n                const node = nodeRenderList[i];\n                const shouldSort = node.data.distanceToNode <= MaximumDistanceToSort;\n                if (shouldSort) {\n                    this.splatSortCount += node.data.indexes.length;\n                }\n                const windowSizeInts = node.data.indexes.length;\n                const windowSizeBytes = windowSizeInts * Constants.BytesPerInt;\n                let destView = new Uint32Array(this.inIndexArray.buffer, currentByteOffset - windowSizeBytes, windowSizeInts);\n                destView.set(node.data.indexes);\n                currentByteOffset -= windowSizeBytes;\n            }\n\n        };\n\n    }();\n\n    start() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n            this.selfDrivenModeRunning = true;\n        } else {\n            throw new Error('Cannot start viewer unless it is in self driven mode.');\n        }\n    }\n\n    stop() {\n        if (this.selfDrivenMode && this.selfDrivenModeRunning) {\n            cancelAnimationFrame();\n            this.selfDrivenModeRunning = false;\n        }\n    }\n\n    updateFPS = function() {\n\n        let lastCalcTime = getCurrentTime();\n        let frameCount = 0;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            const calcDelta = currentTime - lastCalcTime;\n            if (calcDelta >= 1.0) {\n                this.currentFPS = frameCount;\n                frameCount = 0;\n                lastCalcTime = currentTime;\n            } else {\n                frameCount++;\n            }\n        };\n\n    }();\n\n    updateForRendererSizeChanges = function() {\n\n        const lastRendererSize = new THREE.Vector2();\n        const currentRendererSize = new THREE.Vector2();\n\n        return function() {\n            this.renderer.getSize(currentRendererSize);\n            if (currentRendererSize.x !== lastRendererSize.x || currentRendererSize.y !== lastRendererSize.y) {\n                if (!this.usingExternalCamera) {\n                    this.camera.aspect = currentRendererSize.x / currentRendererSize.y;\n                    this.camera.updateProjectionMatrix();\n                }\n                if (this.splatRenderingInitialized) {\n                    this.updateSplatMeshUniforms();\n                    this.updateSplatRenderTargetForRenderDimensions(currentRendererSize.x, currentRendererSize.y);\n                }\n                lastRendererSize.copy(currentRendererSize);\n            }\n        };\n\n    }();\n\n    selfDrivenUpdate() {\n        if (this.selfDrivenMode) {\n            requestAnimationFrame(this.selfDrivenUpdateFunc);\n        }\n        this.update();\n        this.render();\n    }\n\n    update() {\n        if (this.controls) {\n            this.controls.update();\n        }\n        this.updateView();\n        this.updateForRendererSizeChanges();\n\n        this.updateMeshCursor();\n        this.updateFPS();\n        this.timingSensitiveUpdates();\n        this.updateInfo();\n        this.updateControlPlane();\n    }\n\n    timingSensitiveUpdates = function() {\n\n        let lastUpdateTime;\n\n        return function() {\n            const currentTime = getCurrentTime();\n            if (!lastUpdateTime) lastUpdateTime = currentTime;\n            const timeDelta = currentTime - lastUpdateTime;\n\n            this.updateCameraTransition(currentTime);\n            this.updateFocusMarker(timeDelta);\n\n            lastUpdateTime = currentTime;\n        };\n\n    }();\n\n    updateCameraTransition = function() {\n\n        let tempCameraTarget = new THREE.Vector3();\n        let toPreviousTarget = new THREE.Vector3();\n        let toNextTarget = new THREE.Vector3();\n\n        return function(currentTime) {\n            if (this.transitioningCameraTarget) {\n                toPreviousTarget.copy(this.previousCameraTarget).sub(this.camera.position).normalize();\n                toNextTarget.copy(this.nextCameraTarget).sub(this.camera.position).normalize();\n                const rotationAngle = Math.acos(toPreviousTarget.dot(toNextTarget));\n                const rotationSpeed = rotationAngle / (Math.PI / 3) * .65 + .3;\n                const t = (rotationSpeed / rotationAngle * (currentTime - this.transitioningCameraTargetStartTime));\n                tempCameraTarget.copy(this.previousCameraTarget).lerp(this.nextCameraTarget, t);\n                this.camera.lookAt(tempCameraTarget);\n                this.controls.target.copy(tempCameraTarget);\n                if (t >= 1.0) {\n                    this.transitioningCameraTarget = false;\n                }\n            }\n        };\n\n    }();\n\n    updateFocusMarker = function() {\n\n        const renderDimensions = new THREE.Vector2();\n        let wasTransitioning = false;\n\n        return function(timeDelta) {\n            this.getRenderDimensions(renderDimensions);\n            const fadeInSpeed = 10.0;\n            const fadeOutSpeed = 2.5;\n            if (this.transitioningCameraTarget) {\n                this.sceneHelper.setFocusMarkerVisibility(true);\n                const currentFocusMarkerOpacity = Math.max(this.sceneHelper.getFocusMarkerOpacity(), 0.0);\n                let newFocusMarkerOpacity = Math.min(currentFocusMarkerOpacity + fadeInSpeed * timeDelta, 1.0);\n                this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                wasTransitioning = true;\n            } else {\n                let currentFocusMarkerOpacity;\n                if (wasTransitioning) currentFocusMarkerOpacity = 1.0;\n                else currentFocusMarkerOpacity = Math.min(this.sceneHelper.getFocusMarkerOpacity(), 1.0);\n                if (currentFocusMarkerOpacity > 0) {\n                    this.sceneHelper.updateFocusMarker(this.nextCameraTarget, this.camera, renderDimensions);\n                    let newFocusMarkerOpacity = Math.max(currentFocusMarkerOpacity - fadeOutSpeed * timeDelta, 0.0);\n                    this.sceneHelper.setFocusMarkerOpacity(newFocusMarkerOpacity);\n                    if (newFocusMarkerOpacity === 0.0) this.sceneHelper.setFocusMarkerVisibility(false);\n                }\n                wasTransitioning = false;\n            }\n        };\n\n    }();\n\n    updateMeshCursor = function() {\n\n        const outHits = [];\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showMeshCursor) {\n                this.getRenderDimensions(renderDimensions);\n                outHits.length = 0;\n                this.raycaster.setFromCameraAndScreenPosition(this.camera, this.mousePosition, renderDimensions);\n                this.raycaster.intersectSplatMesh(this.splatMesh, outHits);\n                if (outHits.length > 0) {\n                    this.sceneHelper.setMeshCursorVisibility(true);\n                    this.sceneHelper.positionAndOrientMeshCursor(outHits[0].origin, this.camera);\n                } else {\n                    this.sceneHelper.setMeshCursorVisibility(false);\n                }\n            } else {\n                this.sceneHelper.setMeshCursorVisibility(false);\n            }\n        };\n\n    }();\n\n    updateInfo = function() {\n\n        const renderDimensions = new THREE.Vector2();\n\n        return function() {\n            if (this.showInfo) {\n                const splatCount = this.splatMesh.getSplatCount();\n                this.getRenderDimensions(renderDimensions);\n\n                const cameraPos = this.camera.position;\n                const cameraPosString = `[${cameraPos.x.toFixed(5)}, ${cameraPos.y.toFixed(5)}, ${cameraPos.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraPosition.innerHTML = cameraPosString;\n\n                const cameraLookAt = this.controls.target;\n                const cameraLookAtString = `[${cameraLookAt.x.toFixed(5)}, ${cameraLookAt.y.toFixed(5)}, ${cameraLookAt.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraLookAt.innerHTML = cameraLookAtString;\n\n                const cameraUp = this.camera.up;\n                const cameraUpString = `[${cameraUp.x.toFixed(5)}, ${cameraUp.y.toFixed(5)}, ${cameraUp.z.toFixed(5)}]`;\n                this.infoPanelCells.cameraUp.innerHTML = cameraUpString;\n\n                if (this.showMeshCursor) {\n                    const cursorPos = this.sceneHelper.meshCursor.position;\n                    const cursorPosString = `[${cursorPos.x.toFixed(5)}, ${cursorPos.y.toFixed(5)}, ${cursorPos.z.toFixed(5)}]`;\n                    this.infoPanelCells.cursorPosition.innerHTML = cursorPosString;\n                } else {\n                    this.infoPanelCells.cursorPosition.innerHTML = 'N/A';\n                }\n\n                this.infoPanelCells.fps.innerHTML = this.currentFPS;\n                this.infoPanelCells.renderWindow.innerHTML = `${renderDimensions.x} x ${renderDimensions.y}`;\n\n                const renderPct = this.splatRenderCount / splatCount * 100;\n                this.infoPanelCells.renderSplatCount.innerHTML =\n                    `${this.splatRenderCount} splats out of ${splatCount} (${renderPct.toFixed(2)}%)`;\n\n                this.infoPanelCells.sortTime.innerHTML = `${this.lastSortTime.toFixed(3)} ms`;\n            }\n        };\n\n    }();\n\n    updateControlPlane() {\n        if (this.showControlPlane) {\n            this.sceneHelper.setControlPlaneVisibility(true);\n            this.sceneHelper.positionAndOrientControlPlane(this.controls.target, this.camera.up);\n        } else {\n            this.sceneHelper.setControlPlaneVisibility(false);\n        }\n    }\n\n    render = function() {\n\n        return function() {\n            const sceneHasRenderables = (scene) => {\n                for (let child of scene.children) {\n                    if (child.visible) {\n                    return true;\n                    }\n                }\n                return false;\n            };\n\n            let defualtSceneHasRenderables = sceneHasRenderables(this.scene);\n            let simpleSceneHasRenderables = sceneHasRenderables(this.simpleScene);\n\n            const savedAuoClear = this.renderer.autoClear;\n            this.renderer.autoClear = false;\n            if (defualtSceneHasRenderables || simpleSceneHasRenderables) {\n                if (defualtSceneHasRenderables) this.renderer.render(this.scene, this.camera);\n                if (simpleSceneHasRenderables) this.renderer.render(this.simpleScene, this.camera);\n            }\n            this.renderer.render(this.splatMesh, this.camera);\n            if (this.sceneHelper.getFocusMarkerOpacity() > 0.0) this.renderer.render(this.sceneHelper.focusMarker, this.camera);\n            if (this.showControlPlane) this.renderer.render(this.sceneHelper.controlPlane, this.camera);\n            this.renderer.autoClear = savedAuoClear;\n        };\n\n    }();\n\n    updateView = function() {\n\n        const tempMatrix = new THREE.Matrix4();\n        const cameraPositionArray = [];\n        const lastSortViewDir = new THREE.Vector3(0, 0, -1);\n        const sortViewDir = new THREE.Vector3(0, 0, -1);\n        const lastSortViewPos = new THREE.Vector3();\n        const sortViewOffset = new THREE.Vector3();\n\n        return function(force = false, gatherAllNodes = false) {\n            if (!force) {\n                sortViewDir.set(0, 0, -1).applyQuaternion(this.camera.quaternion);\n                let needsRefreshForRotation = false;\n                let needsRefreshForPosition = false;\n                if (sortViewDir.dot(lastSortViewDir) <= 0.95) needsRefreshForRotation = true;\n                if (sortViewOffset.copy(this.camera.position).sub(lastSortViewPos).length() >= 1.0) needsRefreshForPosition = true;\n                if (!needsRefreshForRotation && !needsRefreshForPosition) return;\n            }\n\n            tempMatrix.copy(this.camera.matrixWorld).invert();\n            tempMatrix.premultiply(this.camera.projectionMatrix);\n            tempMatrix.multiply(this.splatMesh.matrixWorld);\n            cameraPositionArray[0] = this.camera.position.x;\n            cameraPositionArray[1] = this.camera.position.y;\n            cameraPositionArray[2] = this.camera.position.z;\n\n            if (!this.sortRunning) {\n                this.gatherSceneNodes(gatherAllNodes);\n                this.sortRunning = true;\n                this.sortWorker.postMessage({\n                    sort: {\n                        'view': tempMatrix.elements,\n                        'cameraPosition': cameraPositionArray,\n                        'splatRenderCount': this.splatRenderCount,\n                        'splatSortCount': this.splatSortCount,\n                        'inIndexBuffer': this.inIndexArray.buffer\n                    }\n                });\n                lastSortViewPos.copy(this.camera.position);\n                lastSortViewDir.copy(sortViewDir);\n            }\n        };\n\n    }();\n\n    getSplatMesh() {\n        return this.splatMesh;\n    }\n}\n","\u0000asm\u0001\u0000\u0000\u0000\u0000\f\u0006dylink\u0000\u0000\u0000\u0000\u0000\u0001\u0017\u0003`\u0000\u0000`\f}}}\u0000`\u0000\u0001\u0002\u0012\u0001\u0003env\u0006memory\u0002\u0003\u0000��\u0004\u0003\u0004\u0003\u0000\u0001\u0002\u00079\u0003\u0011__wasm_call_ctors\u0000\u0000\u000bsortIndexes\u0000\u0001\u0013emscripten_tls_init\u0000\u0002\n�\u0004\u0003\u0003\u0000\u0001\u000b�\u0004\u0001\u0005\u0002@ \n \tk\"\u000e \nI\"\u0010\u0004@A����\u0007!\fA����x!\u000f \u000e!\r\u0003@ \u0002 \rA\u0002t\"\tj \u0001 \u0000 \tj(\u0002\u0000A\flj\"\t(\u0002\u0004 \u0003(\u0002\u0018l \t(\u0002\u0000 \u0003(\u0002\blj \t(\u0002\b \u0003(\u0002(lj\"\t6\u0002\u0000 \t \f \t \fH\u001b!\f \t \u000f \t \u000fJ\u001b!\u000f \rA\u0001j\"\r \nG\r\u0000\u000b \u0002 \u000bA\u0002tj!\r \b� \u000f� \f���!\u0005 \u0010E\r\u0001 \u000e!\t\u0003@ \r\u0002 \u0005 \u0002 \tA\u0002tj(\u0002\u0000 \fk��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000bA\u0002tj\"\u0001 \u0001(\u0002\u0000A\u0001j6\u0002\u0000 \tA\u0001j\"\t \nG\r\u0000\u000b\f\u0001\u000b \u0002 \u000bA\u0002tj!\r \b�C\u0000\u0000���!\u0005A����\u0007!\f\u000b \bA\u0002O\u0004@ \r(\u0002\u0000!\u0003A\u0001!\t\u0003@ \u0002 \t \u000bjA\u0002tj\"\u0001 \u0001(\u0002\u0000 \u0003j\"\u00036\u0002\u0000 \tA\u0001j\"\t \bG\r\u0000\u000b\u000b \u000eA\u0000J\u0004@ \u000e!\t\u0003@ \u0004 \tA\u0001k\"\u0001A\u0002t\"\u0003j \u0000 \u0003j(\u0002\u00006\u0002\u0000 \tA\u0001J!\u0003 \u0001!\t \u0003\r\u0000\u000b\u000b \u000e \nA\u0001k\"\u0001L\u0004@ \u0001!\t\u0003@ \u0004 \u0001 \u0002\u0002 \u0005 \u0002 \tA\u0002t\"\u0003j(\u0002\u0000 \fk��\"\u0006�C\u0000\u0000\u0000O]\u0004@ \u0006�\f\u0001\u000bA����x\u000b \u000bjA\u0002tj\"\b(\u0002\u0000A\u0001k\"\nkA\u0002tj \u0000 \u0003j(\u0002\u00006\u0002\u0000 \b \n6\u0002\u0000 \t \u000eJ!\u0003 \tA\u0001k!\t \u0003\r\u0000\u000b\u000b\u000b\u0004\u0000A\u0000\u000b"],"names":["tempVector3A","THREE","Vector3","tempVector3B","tempVector4A","Vector4","tempVector4B","tempQuaternion4A","Quaternion","tempQuaternion4B","fbf","tbf","SplatBuffer","static","BytesPerPosition","BytesPerScale","BytesPerColor","BytesPerRotation","ScaleRange","constructor","bufferData","this","headerBufferData","ArrayBuffer","HeaderSizeBytes","headerArrayUint8","Uint8Array","headerArrayUint32","Uint32Array","headerArrayFloat32","Float32Array","set","versionMajor","versionMinor","headerExtraK","compressionLevel","splatCount","bucketSize","bucketCount","bucketBlockSize","halfBucketBlockSize","bytesPerBucket","compressionScaleRange","CompressionLevels","compressionScaleFactor","dataBufferSizeBytes","byteLength","splatBufferData","bytesPerPosition","bytesPerScale","bytesPerColor","bytesPerRotation","bytesPerSplat","bind","linkBufferArrays","precomputedCovarianceBufferData","FloatArray","Uint16Array","positionArray","PositionComponentCount","scaleArray","ScaleComponentCount","colorArray","ColorComponentCount","rotationArray","RotationComponentCount","bucketsBase","f","DataUtils","fromHalfFloat","toHalfFloat","buildPreComputedBuffers","CovarianceSizeBytes","covarianceArray","scale","rotation","rotationMatrix","Matrix3","scaleMatrix","covarianceMatrix","tempMatrix4","Matrix4","i","scaleBase","makeScale","x","y","z","setFromMatrix4","rotationBase","makeRotationFromQuaternion","copy","multiply","M","elements","CovarianceSizeFloats","getHeaderBufferData","getSplatBufferData","getPosition","index","outPosition","bucket","positionBase","sf","sr","bucketIndex","Math","floor","setPosition","position","maxR","clamp","round","getScale","outScale","setScale","getRotation","outRotation","setRotation","w","getColor","outColor","colorBase","setColor","color","getPrecomputedCovarianceBufferData","getSplatCount","fillPositionArray","outPositionArray","fillScaleArray","outScaleArray","fillRotationArray","outRotationArray","fillColorArray","outColorArray","swapVertices","indexA","indexB","floatView","int32View","Int32Array","buffer","uintEncodedFloat","fetchWithProgress","path","onProgress","Promise","resolve","reject","fetch","then","async","data","reader","body","getReader","bytesDownloaded","_fileSize","headers","get","fileSize","parseInt","undefined","chunks","value","chunk","done","read","Blob","arrayBuffer","percent","percentLabel","length","toFixed","push","error","val","min","max","getCurrentTime","performance","now","SplatBufferBucketSize","PlyParser","plyBuffer","decodeHeader","decoder","TextDecoder","headerOffset","headerText","console","log","readChunkSize","Error","headerChunk","decode","endHeaderTestChunk","includes","headerLines","split","propertyTypes","line","trim","startsWith","splatCountMatch","match","propertyMatch","propertyType","vertexByteOffset","indexOf","vertexData","DataView","readRawVertexFast","offset","fieldOffsets","propertiesToRead","outVertex","rawVertex","property","getFloat32","getUint8","parseToSplatBuffer","minimumAlpha","startTime","nRestCoeffs","propertyName","nCoeffsPerColor","shFeatureOrder","rgb","plyRowSize","fieldSize","double","int","uint","float","short","ushort","uchar","fieldName","hasOwnProperty","type","validVertexes","vertexZero","propertyToRead","row","alpha","exp","opacity","newVertex","positionsForBucketCalcs","buckets","computeBuckets","paddedSplatCount","headerSize","header","positionBuffer","scaleBuffer","colorBuffer","rotationBuffer","SplatBufferBucketBlockSize","doubleCompressionScaleRange","bucketCenter","bucketCenterDelta","outSplatIndex","b","fromArray","center","splats","invalidSplat","scales","rot","quat","rot_1","rot_2","rot_3","rot_0","normalize","scale_0","scale_1","scale_2","thf","sub","rgba","Uint8ClampedArray","SH_C0","f_dc_0","f_dc_1","f_dc_2","bucketsSize","splatDataBufferSize","unifiedBufferSize","unifiedBuffer","bucketArray","base","splatBuffer","endTime","positions","dimensions","yBlocks","ceil","zBlocks","blockCenter","fullBuckets","partiallyFullBuckets","xBlock","yBlock","zBlock","blockSize","bucketId","toArray","PlyLoader","fetchFile","fileName","catch","err","loadFromURL","plyFileData","SplatLoader","downLoadLink","setFromBuffer","downloadFile","headerData","splatData","blob","document","createElement","appendChild","download","href","URL","createObjectURL","click","_changeEvent","_startEvent","_endEvent","_ray","Ray","_plane","Plane","TILT_LIMIT","cos","MathUtils","DEG2RAD","OrbitControls","EventDispatcher","object","domElement","super","style","touchAction","enabled","target","minDistance","maxDistance","Infinity","minZoom","maxZoom","minPolarAngle","maxPolarAngle","PI","minAzimuthAngle","maxAzimuthAngle","enableDamping","dampingFactor","enableZoom","zoomSpeed","enableRotate","rotateSpeed","enablePan","panSpeed","screenSpacePanning","keyPanSpeed","zoomToCursor","autoRotate","autoRotateSpeed","keys","LEFT","UP","RIGHT","BOTTOM","mouseButtons","MOUSE","ROTATE","MIDDLE","DOLLY","PAN","touches","ONE","TOUCH","TWO","DOLLY_PAN","target0","clone","position0","zoom0","zoom","_domElementKeyEvents","getPolarAngle","spherical","phi","getAzimuthalAngle","theta","getDistance","distanceTo","listenToKeyEvents","stopListenToKeyEvents","removeEventListener","onKeyDown","saveState","scope","reset","updateProjectionMatrix","dispatchEvent","update","state","STATE","NONE","setFromUnitVectors","up","quatInverse","invert","lastPosition","lastQuaternion","lastTargetPosition","twoPI","applyQuaternion","setFromVector3","rotateLeft","sphericalDelta","isFinite","makeSafe","addScaledVector","panOffset","add","performCursorZoom","isOrthographicCamera","radius","clampDistance","setFromSpherical","lookAt","multiplyScalar","zoomChanged","newRadius","isPerspectiveCamera","prevRadius","radiusDelta","dollyDirection","updateMatrixWorld","mouseBefore","mouse","unproject","mouseAfter","warn","transformDirection","matrix","origin","direction","abs","dot","setFromNormalAndCoplanarPoint","intersectPlane","distanceToSquared","EPS","quaternion","dispose","onContextMenu","onPointerDown","onPointerUp","onMouseWheel","onPointerMove","TOUCH_ROTATE","TOUCH_PAN","TOUCH_DOLLY_PAN","TOUCH_DOLLY_ROTATE","Spherical","rotateStart","Vector2","rotateEnd","rotateDelta","panStart","panEnd","panDelta","dollyStart","dollyEnd","dollyDelta","pointers","pointerPositions","getZoomScale","pow","angle","rotateUp","panLeft","v","distance","objectMatrix","setFromMatrixColumn","panUp","crossVectors","pan","deltaX","deltaY","element","targetDistance","tan","fov","clientHeight","right","left","clientWidth","top","bottom","dollyOut","dollyScale","dollyIn","updateMouseParameters","event","rect","getBoundingClientRect","clientX","clientY","width","h","height","dist","handleMouseDownRotate","handleMouseDownPan","handleTouchStartRotate","pageX","pageY","handleTouchStartPan","handleTouchStartDolly","dx","dy","sqrt","handleTouchMoveRotate","getSecondPointerPosition","subVectors","handleTouchMovePan","handleTouchMoveDolly","setPointerCapture","pointerId","addEventListener","addPointer","pointerType","trackPointer","DOLLY_ROTATE","onTouchStart","mouseAction","button","handleMouseDownDolly","ctrlKey","metaKey","shiftKey","onMouseDown","handleTouchMoveDollyPan","handleTouchMoveDollyRotate","onTouchMove","handleMouseMoveRotate","handleMouseMoveDolly","handleMouseMovePan","onMouseMove","splice","removePointer","releasePointerCapture","preventDefault","handleMouseWheel","needsUpdate","code","handleKeyDown","pointer","passive","LoadingSpinner","message","spinnerDivContainer","spinnerDiv","messageDiv","className","display","innerHTML","getElementsByTagName","show","hide","setMessage","msg","ArrowHelper","Object3D","dir","headLength","headRadius","lineGeometry","CylinderGeometry","translate","coneGeometry","Mesh","MeshBasicMaterial","toneMapped","matrixAutoUpdate","cone","setDirection","_axis","radians","acos","setFromAxisAngle","material","source","geometry","SceneHelper","scene","simpleScene","meshCursor","focusMarker","controlPlane","setupMeshCursor","ConeGeometry","coneMaterial","downArrow","upArrow","leftArrow","rightArrow","visible","destroyMeshCursor","children","forEach","child","remove","setMeshCursorVisibility","setMeshCursorPosition","positionAndOrientMeshCursor","camera","setupFocusMarker","sphereGeometry","SphereGeometry","focusMarkerMaterial","buildFocusMarkerMaterial","depthTest","depthWrite","transparent","sphereMesh","updateFocusMarker","tempPosition","tempMatrix","viewport","matrixWorld","applyMatrix4","uniforms","realFocusPosition","uniformsNeedUpdate","setFocusMarkerVisibility","setFocusMarkerOpacity","getFocusMarkerOpacity","setupControlPlane","planeGeometry","PlaneGeometry","rotateX","planeMaterial","side","DoubleSide","planeMesh","arrowDir","arrowOrigin","arrowHelper","setControlPlaneVisibility","positionAndOrientControlPlane","tempQuaternion","defaultUp","addDebugMeshes","debugRoot","createDebugMeshes","secondaryDebugRoot","createSecondaryDebugMeshes","renderOrder","debugMeshRoot","createMesh","buildDebugMaterial","boxGeometry","BoxGeometry","boxMesh","separation","Color","ShaderMaterial","vertexShader","fragmentShader","FrontSide","extensions","fragDepth","VectorRight","VectorUp","VectorBackward","setParameters","boxContainsPoint","box","point","epsilon","intersectBox","planeIntersectionPoint","planeIntersectionPointArray","originArray","directionArray","outHit","normal","hitNormal","extremeVec","multiplier","sign","toSide","idx1","idx2","intersectSphere","toSphereCenterVec","toClosestApproach","toClosestApproachSq","diffSq","radiusSq","thc","t0","t1","t","Hit","hitClone","Raycaster","ray","setFromCameraAndScreenPosition","ndcCoords","screenPosition","screenDimensions","setFromMatrixPosition","near","far","intersectSplatMesh","toLocal","fromLocal","localRay","splatMesh","outHits","splatTree","getSplatTree","rootNode","castRayAtSplatTreeNode","sort","a","hit","tempScale","tempRotation","tempHit","node","boundingBox","indexes","splatIndex","idGen","SplatTreeNode","depth","id","Box3","SplatTree","maxDepth","maxPositionsPerNode","sceneDimensions","sceneMin","sceneMax","addedIndexes","nodesWithIndexes","processSplatBuffer","filterFunc","processNode","newIndexes","nodeDimensions","halfDimensions","nodeCenter","childrenBounds","splatCounts","baseIndexes","j","containsPoint","childNode","countLeaves","leafCount","visitLeaves","visitFunc","visitLeavesFromNode","SplatMesh","buildMesh","splatAlphaRemovalThreshold","halfPrecisionCovariancesOnGPU","devicePixelRatio","buildGeomtery","buildMaterial","splatDataTextures","buildSplatTree","resetLocalSplatDataAndTexturesFromSplatBuffer","covariancesTexture","centersColorsTexture","focal","basisViewport","debugColor","covariancesTextureSize","centersColorsTextureSize","alphaTest","blending","NormalBlending","baseGeometry","BufferGeometry","setIndex","positionsArray","BufferAttribute","setAttribute","setXYZ","InstancedBufferGeometry","splatIndexArray","splatIndexes","InstancedBufferAttribute","setUsage","DynamicDrawUsage","instanceCount","time","splatColor","timeEnd","leavesWithVertices","avgSplatCount","maxSplatCount","nodeCount","nodeSplatCount","updateLocalSplatDataFromSplatBuffer","allocateAndStoreLocalSplatDataInTextures","covariances","colors","centers","paddedCovariances","DataTexture","RGFormat","HalfFloatType","FloatType","paddedCenterColors","c","colorsBase","centersBase","centerColorsBase","r","g","RGBAIntegerFormat","UnsignedIntType","internalFormat","texture","size","centerColors","updateSplatDataToDataTextures","updateLocalCovarianceDataToDataTexture","updateLocalCenterColorDataToDataTexture","updateIndexes","renderSplatCount","attributes","updateUniforms","renderDimensions","cameraFocalLengthX","cameraFocalLengthY","getSplatDataTextures","getCenters","getColors","getCovariances","Constants","sortWorker","self","wasmInstance","indexesOffset","positionsOffset","viewProjOffset","indexesOutOffset","sortBuffersOffset","wasmMemory","countsZero","onmessage","e","floatPositions","intPositions","postMessage","sortSetupComplete","renderCount","splatRenderCount","splatSortCount","viewProj","cameraPosition","sortStartTime","DepthMapRange","viewProjArray","exports","sortIndexes","sortEndTime","sortDone","sortTime","view","inIndexBuffer","init","INDEXES_BYTES_PER_ENTRY","BytesPerInt","POSITIONS_BYTES_PER_ENTRY","BytesPerFloat","sorterWasmBytes","totalRequiredMemory","MemoryPageSize","totalPagesRequired","sorterWasmImport","module","env","memory","WebAssembly","Memory","initial","maximum","shared","compile","wasmModule","instantiate","instance","sortSetupPhase1Complete","inIndexOffset","outIndexBuffer","outIndexOffset","Viewer","params","cameraUp","initialCameraPosition","initialCameraLookAt","selfDrivenMode","useBuiltInControls","rootElement","usingExternalCamera","usingExternalRenderer","renderer","controls","ignoreDevicePixelRatio","window","selfDrivenUpdateFunc","selfDrivenUpdate","showMeshCursor","showControlPlane","showInfo","sceneHelper","inIndexArray","sortRunning","selfDrivenModeRunning","splatRenderingInitialized","raycaster","infoPanel","infoPanelCells","currentFPS","lastSortTime","previousCameraTarget","nextCameraTarget","mousePosition","mouseDownPosition","mouseDownTime","onMouseUp","loadingSpinner","forward","tempMatrixLeft","tempMatrixRight","makeRotationAxis","offsetX","offsetY","clickOffset","wasClick","transitioningCameraTarget","getRenderDimensions","transitioningCameraTargetStartTime","outDimensions","offsetWidth","offsetHeight","getSize","PerspectiveCamera","Scene","WebGLRenderer","antialias","precision","setPixelRatio","autoClear","setClearColor","setSize","setupRenderTargetCopyObjects","ResizeObserver","observe","setupSimpleObjectDepthOverrideMaterial","setupInfoPanel","padding","backgroundColor","border","zIndex","fontFamily","fontSize","textAlign","layout","infoTable","layoutEntry","labelCell","spacerCell","infoCell","parentElement","prepend","updateSplatRenderTargetForRenderDimensions","splatRenderTarget","WebGLRenderTarget","format","RGBAFormat","stencilBuffer","depthBuffer","depthTexture","DepthTexture","DepthFormat","simpleObjectDepthOverrideMaterial","renderTargetCopyMaterial","sourceColorTexture","sourceDepthTexture","CustomBlending","blendSrc","SrcAlphaFactor","blendSrcAlpha","blendDst","OneMinusSrcAlphaFactor","blendDstAlpha","renderTargetCopyQuad","renderTargetCopyCamera","OrthographicCamera","updateSplatMeshUniforms","projectionMatrix","loadFile","fileURL","options","orientation","loadingProgress","fileLoadPromise","endsWith","loadSplatBuffer","setTimeout","setupSplatMesh","setupSortWorker","frustumCulled","worker","Worker","toString","sorterWasmBinaryString","atob","charCodeAt","createSortWorker","outIndexArray","sortCanceled","updateView","gatherSceneNodes","nodeRenderList","tempVectorYZ","tempVectorXZ","tempVector","tempMax","nodeSize","gatherAllNodes","cameraFocalLength","fovXOver2","atan","fovYOver2","cosFovXOver2","cosFovYOver2","nodeRenderCount","distanceToNode","setX","setY","cameraAngleXZDot","cameraAngleYZDot","ns","currentByteOffset","windowSizeInts","windowSizeBytes","start","requestAnimationFrame","stop","cancelAnimationFrame","updateFPS","lastCalcTime","frameCount","currentTime","updateForRendererSizeChanges","lastRendererSize","currentRendererSize","aspect","render","updateMeshCursor","timingSensitiveUpdates","updateInfo","updateControlPlane","lastUpdateTime","timeDelta","updateCameraTransition","tempCameraTarget","toPreviousTarget","toNextTarget","rotationAngle","lerp","wasTransitioning","currentFocusMarkerOpacity","newFocusMarkerOpacity","cameraPos","cameraPosString","cameraLookAt","cameraLookAtString","cameraUpString","cursorPos","cursorPosString","cursorPosition","fps","renderWindow","renderPct","sceneHasRenderables","defualtSceneHasRenderables","simpleSceneHasRenderables","savedAuoClear","cameraPositionArray","lastSortViewDir","sortViewDir","lastSortViewPos","sortViewOffset","force","needsRefreshForRotation","needsRefreshForPosition","premultiply","getSplatMesh"],"mappings":"kLAEA,MAAMA,EAAe,IAAIC,EAAMC,QACzBC,EAAe,IAAIF,EAAMC,QACzBE,EAAe,IAAIH,EAAMI,QACzBC,EAAe,IAAIL,EAAMI,QACzBE,EAAmB,IAAIN,EAAMO,WAC7BC,EAAmB,IAAIR,EAAMO,WAEnC,IAAIE,EACAC,EAEG,MAAMC,EAETC,8BAAgC,EAChCA,2BAA6B,EAC7BA,8BAAgC,EAChCA,2BAA6B,EAE7BA,yBAA2B,CACvB,EAAG,CACCC,iBAAkB,GAClBC,cAAe,GACfC,cAAe,EACfC,iBAAkB,GAClBC,WAAY,GAEhB,EAAG,CACCJ,iBAAkB,EAClBC,cAAe,EACfC,cAAe,EACfC,iBAAkB,EAClBC,WAAY,QAIpBL,4BAA8B,EAC9BA,2BAA6B,GAE7BA,uBAAyB,KAEzB,WAAAM,CAAYC,GACRC,KAAKC,iBAAmB,IAAIC,YAAYX,EAAYY,iBACpDH,KAAKI,iBAAmB,IAAIC,WAAWL,KAAKC,kBAC5CD,KAAKM,kBAAoB,IAAIC,YAAYP,KAAKC,kBAC9CD,KAAKQ,mBAAqB,IAAIC,aAAaT,KAAKC,kBAChDD,KAAKI,iBAAiBM,IAAI,IAAIL,WAAWN,EAAY,EAAGR,EAAYY,kBACpEH,KAAKW,aAAeX,KAAKI,iBAAiB,GAC1CJ,KAAKY,aAAeZ,KAAKI,iBAAiB,GAC1CJ,KAAKa,aAAeb,KAAKI,iBAAiB,GAC1CJ,KAAKc,iBAAmBd,KAAKI,iBAAiB,GAC9CJ,KAAKe,WAAaf,KAAKM,kBAAkB,GACzCN,KAAKgB,WAAahB,KAAKM,kBAAkB,GACzCN,KAAKiB,YAAcjB,KAAKM,kBAAkB,GAC1CN,KAAKkB,gBAAkBlB,KAAKQ,mBAAmB,GAC/CR,KAAKmB,oBAAsBnB,KAAKkB,gBAAkB,EAClDlB,KAAKoB,eAAiBpB,KAAKM,kBAAkB,GAC7CN,KAAKqB,sBAAwBrB,KAAKM,kBAAkB,IAAMf,EAAY+B,kBAAkBtB,KAAKc,kBAAkBjB,WAC/GG,KAAKuB,uBAAyBvB,KAAKmB,oBAAsBnB,KAAKqB,sBAE9D,MAAMG,EAAsBzB,EAAW0B,WAAalC,EAAYY,gBAChEH,KAAK0B,gBAAkB,IAAIxB,YAAYsB,GACvC,IAAInB,WAAWL,KAAK0B,iBAAiBhB,IAAI,IAAIL,WAAWN,EAAYR,EAAYY,gBAAiBqB,IAEjGxB,KAAK2B,iBAAmBpC,EAAY+B,kBAAkBtB,KAAKc,kBAAkBrB,iBAC7EO,KAAK4B,cAAgBrC,EAAY+B,kBAAkBtB,KAAKc,kBAAkBpB,cAC1EM,KAAK6B,cAAgBtC,EAAY+B,kBAAkBtB,KAAKc,kBAAkBnB,cAC1EK,KAAK8B,iBAAmBvC,EAAY+B,kBAAkBtB,KAAKc,kBAAkBlB,iBAE7EI,KAAK+B,cAAgB/B,KAAK2B,iBAAmB3B,KAAK4B,cAAgB5B,KAAK6B,cAAgB7B,KAAK8B,iBAE5FzC,EAAMW,KAAKX,IAAI2C,KAAKhC,MACpBV,EAAMU,KAAKV,IAAI0C,KAAKhC,MAEpBA,KAAKiC,mBAELjC,KAAKkC,gCAAkC,IAC1C,CAED,gBAAAD,GACI,IAAIE,EAAwC,IAA1BnC,KAAKc,iBAA0BL,aAAe2B,YAChEpC,KAAKqC,cAAgB,IAAIF,EAAWnC,KAAK0B,gBAAiB,EAAG1B,KAAKe,WAAaxB,EAAY+C,wBAC3FtC,KAAKuC,WAAa,IAAIJ,EAAWnC,KAAK0B,gBAAiB1B,KAAK2B,iBAAmB3B,KAAKe,WACnDf,KAAKe,WAAaxB,EAAYiD,qBAC/DxC,KAAKyC,WAAa,IAAIpC,WAAWL,KAAK0B,iBAAkB1B,KAAK2B,iBAAmB3B,KAAK4B,eAAiB5B,KAAKe,WAC1Ef,KAAKe,WAAaxB,EAAYmD,qBAC/D1C,KAAK2C,cAAgB,IAAIR,EAAWnC,KAAK0B,iBACH1B,KAAK2B,iBAAmB3B,KAAK4B,cAAgB5B,KAAK6B,eAAiB7B,KAAKe,WACxEf,KAAKe,WAAaxB,EAAYqD,wBACpE5C,KAAK6C,YAAc7C,KAAKe,WAAaf,KAAK+B,aAC7C,CAED,GAAA1C,CAAIyD,GACA,OAA8B,IAA1B9C,KAAKc,iBACEgC,EAEAlE,EAAMmE,UAAUC,cAAcF,EAE5C,CAED,GAAAxD,CAAIwD,GACA,OAA8B,IAA1B9C,KAAKc,iBACEgC,EAEAlE,EAAMmE,UAAUE,YAAYH,EAE1C,CAED,uBAAAI,GACI,MAAMnC,EAAaf,KAAKe,WAExBf,KAAKkC,gCAAkC,IAAIhC,YAAYX,EAAY4D,oBAAsBpC,GACzF,MAAMqC,EAAkB,IAAI3C,aAAaT,KAAKkC,iCAExCmB,EAAQ,IAAIzE,EAAMC,QAClByE,EAAW,IAAI1E,EAAMO,WACrBoE,EAAiB,IAAI3E,EAAM4E,QAC3BC,EAAc,IAAI7E,EAAM4E,QACxBE,EAAmB,IAAI9E,EAAM4E,QAC7BG,EAAc,IAAI/E,EAAMgF,QAE9B,IAAK,IAAIC,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMC,EAAYD,EAAItE,EAAYiD,oBAClCa,EAAM3C,IAAIrB,EAAIW,KAAKuC,WAAWuB,IAAazE,EAAIW,KAAKuC,WAAWuB,EAAY,IAAKzE,EAAIW,KAAKuC,WAAWuB,EAAY,KAChHH,EAAYI,UAAUV,EAAMW,EAAGX,EAAMY,EAAGZ,EAAMa,GAC9CT,EAAYU,eAAeR,GAE3B,MAAMS,EAAeP,EAAItE,EAAYqD,uBACrCU,EAAS5C,IAAIrB,EAAIW,KAAK2C,cAAcyB,EAAe,IACtC/E,EAAIW,KAAK2C,cAAcyB,EAAe,IACtC/E,EAAIW,KAAK2C,cAAcyB,EAAe,IACtC/E,EAAIW,KAAK2C,cAAcyB,KACpCT,EAAYU,2BAA2Bf,GACvCC,EAAeY,eAAeR,GAE9BD,EAAiBY,KAAKf,GAAgBgB,SAASd,GAC/C,MAAMe,EAAId,EAAiBe,SAC3BrB,EAAgB7D,EAAYmF,qBAAuBb,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAC7FpB,EAAgB7D,EAAYmF,qBAAuBb,EAAI,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GACjGpB,EAAgB7D,EAAYmF,qBAAuBb,EAAI,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GACjGpB,EAAgB7D,EAAYmF,qBAAuBb,EAAI,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GACjGpB,EAAgB7D,EAAYmF,qBAAuBb,EAAI,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GACjGpB,EAAgB7D,EAAYmF,qBAAuBb,EAAI,GAAKW,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,GAAKA,EAAE,EACpG,CACJ,CAED,mBAAAG,GACI,OAAO3E,KAAKC,gBACf,CAED,kBAAA2E,GACI,OAAO5E,KAAK0B,eACf,CAED,WAAAmD,CAAYC,EAAOC,EAAc,IAAInG,EAAMC,SACvC,IAAImG,EAAS,CAAC,EAAG,EAAG,GACpB,MAAMC,EAAeH,EAAQvF,EAAY+C,uBACzC,GAAItC,KAAKc,iBAAmB,EAAG,CAC3B,MAAMoE,EAAKlF,KAAKuB,uBACV4D,EAAKnF,KAAKqB,sBACV+D,EAAcC,KAAKC,MAAMR,EAAQ9E,KAAKgB,YAC5CgE,EAAS,IAAIvE,aAAaT,KAAK0B,gBAAiB1B,KAAK6C,YAAcuC,EAAcpF,KAAKoB,eAAgB,GACtG2D,EAAYf,GAAKhE,KAAKqC,cAAc4C,GAAgBE,GAAMD,EAAKF,EAAO,GACtED,EAAYd,GAAKjE,KAAKqC,cAAc4C,EAAe,GAAKE,GAAMD,EAAKF,EAAO,GAC1ED,EAAYb,GAAKlE,KAAKqC,cAAc4C,EAAe,GAAKE,GAAMD,EAAKF,EAAO,EACtF,MACYD,EAAYf,EAAIhE,KAAKqC,cAAc4C,GACnCF,EAAYd,EAAIjE,KAAKqC,cAAc4C,EAAe,GAClDF,EAAYb,EAAIlE,KAAKqC,cAAc4C,EAAe,GAEtD,OAAOF,CACV,CAED,WAAAQ,CAAYT,EAAOU,GACf,IAAIR,EAAS,CAAC,EAAG,EAAG,GACpB,MAAMC,EAAeH,EAAQvF,EAAY+C,uBACzC,GAAItC,KAAKc,iBAAmB,EAAG,CAC3B,MAAMoE,EAAK,EAAMlF,KAAKuB,uBAChB4D,EAAKnF,KAAKqB,sBACVoE,EAAY,EAALN,EAAS,EAChBC,EAAcC,KAAKC,MAAMR,EAAQ9E,KAAKgB,YAC5CgE,EAAS,IAAIvE,aAAaT,KAAK0B,gBAAiB1B,KAAK6C,YAAcuC,EAAcpF,KAAKoB,eAAgB,GACtGpB,KAAKqC,cAAc4C,GAAgBS,MAAML,KAAKM,OAAOH,EAASxB,EAAIgB,EAAO,IAAME,GAAMC,EAAI,EAAGM,GAC5FzF,KAAKqC,cAAc4C,EAAe,GAAKS,MAAML,KAAKM,OAAOH,EAASvB,EAAIe,EAAO,IAAME,GAAMC,EAAI,EAAGM,GAChGzF,KAAKqC,cAAc4C,EAAe,GAAKS,MAAML,KAAKM,OAAOH,EAAStB,EAAIc,EAAO,IAAME,GAAMC,EAAI,EAAGM,EAC5G,MACYzF,KAAKqC,cAAc4C,GAAgBO,EAASxB,EAC5ChE,KAAKqC,cAAc4C,EAAe,GAAKO,EAASvB,EAChDjE,KAAKqC,cAAc4C,EAAe,GAAKO,EAAStB,CAEvD,CAED,QAAA0B,CAASd,EAAOe,EAAW,IAAIjH,EAAMC,SACjC,MAAMiF,EAAYgB,EAAQvF,EAAYiD,oBAEtC,OADAqD,EAASnF,IAAIrB,EAAIW,KAAKuC,WAAWuB,IAAazE,EAAIW,KAAKuC,WAAWuB,EAAY,IAAKzE,EAAIW,KAAKuC,WAAWuB,EAAY,KAC5G+B,CACV,CAED,QAAAC,CAAShB,EAAOzB,GACZ,MAAMS,EAAYgB,EAAQvF,EAAYiD,oBACtCxC,KAAKuC,WAAWuB,GAAaxE,EAAI+D,EAAMW,GACvChE,KAAKuC,WAAWuB,EAAY,GAAKxE,EAAI+D,EAAMY,GAC3CjE,KAAKuC,WAAWuB,EAAY,GAAKxE,EAAI+D,EAAMa,EAC9C,CAED,WAAA6B,CAAYjB,EAAOkB,EAAc,IAAIpH,EAAMO,YACvC,MAAMiF,EAAeU,EAAQvF,EAAYqD,uBAGzC,OAFAoD,EAAYtF,IAAIrB,EAAIW,KAAK2C,cAAcyB,EAAe,IAAK/E,EAAIW,KAAK2C,cAAcyB,EAAe,IACjF/E,EAAIW,KAAK2C,cAAcyB,EAAe,IAAK/E,EAAIW,KAAK2C,cAAcyB,KAC3E4B,CACV,CAED,WAAAC,CAAYnB,EAAOxB,GACf,MAAMc,EAAeU,EAAQvF,EAAYqD,uBACzC5C,KAAK2C,cAAcyB,GAAgB9E,EAAIgE,EAAS4C,GAChDlG,KAAK2C,cAAcyB,EAAe,GAAK9E,EAAIgE,EAASU,GACpDhE,KAAK2C,cAAcyB,EAAe,GAAK9E,EAAIgE,EAASW,GACpDjE,KAAK2C,cAAcyB,EAAe,GAAK9E,EAAIgE,EAASY,EACvD,CAED,QAAAiC,CAASrB,EAAOsB,EAAW,IAAIxH,EAAMI,SACjC,MAAMqH,EAAYvB,EAAQvF,EAAYmD,oBAGtC,OAFA0D,EAAS1F,IAAIV,KAAKyC,WAAW4D,GAAYrG,KAAKyC,WAAW4D,EAAY,GACxDrG,KAAKyC,WAAW4D,EAAY,GAAIrG,KAAKyC,WAAW4D,EAAY,IAClED,CACV,CAED,QAAAE,CAASxB,EAAOyB,GACZ,MAAMF,EAAYvB,EAAQvF,EAAYmD,oBACtC1C,KAAKyC,WAAW4D,GAAaE,EAAMvC,EACnChE,KAAKyC,WAAW4D,EAAY,GAAKE,EAAMtC,EACvCjE,KAAKyC,WAAW4D,EAAY,GAAKE,EAAMrC,EACvClE,KAAKyC,WAAW4D,EAAY,GAAKE,EAAML,CAC1C,CAED,kCAAAM,GACI,OAAOxG,KAAKkC,+BACf,CAED,aAAAuE,GACI,OAAOzG,KAAKe,UACf,CAED,iBAAA2F,CAAkBC,GACd,MAAM5F,EAAaf,KAAKe,WACxB,IAAIiE,EAAS,CAAC,EAAG,EAAG,GACpB,IAAK,IAAInB,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMoB,EAAepB,EAAItE,EAAY+C,uBACrC,GAAItC,KAAKc,iBAAmB,EAAG,CAC3B,MAAMsE,EAAcC,KAAKC,MAAMzB,EAAI7D,KAAKgB,YACxCgE,EAAS,IAAIvE,aAAaT,KAAK0B,gBAAiB1B,KAAK6C,YAAcuC,EAAcpF,KAAKoB,eAAgB,GACtG,MAAM8D,EAAKlF,KAAKuB,uBACV4D,EAAKnF,KAAKqB,sBAChBsF,EAAiB1B,IAAiBjF,KAAKqC,cAAc4C,GAAgBE,GAAMD,EAAKF,EAAO,GACvF2B,EAAiB1B,EAAe,IAAMjF,KAAKqC,cAAc4C,EAAe,GAAKE,GAAMD,EAAKF,EAAO,GAC/F2B,EAAiB1B,EAAe,IAAMjF,KAAKqC,cAAc4C,EAAe,GAAKE,GAAMD,EAAKF,EAAO,EAC/G,MACgB2B,EAAiB1B,GAAgBjF,KAAKqC,cAAc4C,GACpD0B,EAAiB1B,EAAe,GAAKjF,KAAKqC,cAAc4C,EAAe,GACvE0B,EAAiB1B,EAAe,GAAKjF,KAAKqC,cAAc4C,EAAe,EAE9E,CACJ,CAED,cAAA2B,CAAeC,GACX,MAAMxH,EAAMW,KAAKX,IAAI2C,KAAKhC,MACpBe,EAAaf,KAAKe,WACxB,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMC,EAAYD,EAAItE,EAAYiD,oBAClCqE,EAAc/C,GAAazE,EAAIW,KAAKuC,WAAWuB,IAC/C+C,EAAc/C,EAAY,GAAKzE,EAAIW,KAAKuC,WAAWuB,EAAY,IAC/D+C,EAAc/C,EAAY,GAAKzE,EAAIW,KAAKuC,WAAWuB,EAAY,GAClE,CACJ,CAED,iBAAAgD,CAAkBC,GACd,MAAM1H,EAAMW,KAAKX,IAAI2C,KAAKhC,MACpBe,EAAaf,KAAKe,WACxB,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMO,EAAeP,EAAItE,EAAYqD,uBACrCmE,EAAiB3C,GAAgB/E,EAAIW,KAAK2C,cAAcyB,IACxD2C,EAAiB3C,EAAe,GAAK/E,EAAIW,KAAK2C,cAAcyB,EAAe,IAC3E2C,EAAiB3C,EAAe,GAAK/E,EAAIW,KAAK2C,cAAcyB,EAAe,IAC3E2C,EAAiB3C,EAAe,GAAK/E,EAAIW,KAAK2C,cAAcyB,EAAe,GAC9E,CACJ,CAED,cAAA4C,CAAeC,GACX,MAAMlG,EAAaf,KAAKe,WACxB,IAAK,IAAI8C,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMwC,EAAYxC,EAAItE,EAAYmD,oBAClCuE,EAAcZ,GAAarG,KAAKyC,WAAW4D,GAC3CY,EAAcZ,EAAY,GAAKrG,KAAKyC,WAAW4D,EAAY,GAC3DY,EAAcZ,EAAY,GAAKrG,KAAKyC,WAAW4D,EAAY,GAC3DY,EAAcZ,EAAY,GAAKrG,KAAKyC,WAAW4D,EAAY,EAC9D,CACJ,CAED,YAAAa,CAAaC,EAAQC,GAEjBpH,KAAK6E,YAAYsC,EAAQxI,GACzBqB,KAAK6E,YAAYuC,EAAQtI,GACzBkB,KAAKuF,YAAY6B,EAAQzI,GACzBqB,KAAKuF,YAAY4B,EAAQrI,GAEzBkB,KAAK4F,SAASuB,EAAQxI,GACtBqB,KAAK4F,SAASwB,EAAQtI,GACtBkB,KAAK8F,SAASsB,EAAQzI,GACtBqB,KAAK8F,SAASqB,EAAQrI,GAEtBkB,KAAK+F,YAAYoB,EAAQjI,GACzBc,KAAK+F,YAAYqB,EAAQhI,GACzBY,KAAKiG,YAAYmB,EAAQlI,GACzBc,KAAKiG,YAAYkB,EAAQ/H,GAEzBY,KAAKmG,SAASgB,EAAQpI,GACtBiB,KAAKmG,SAASiB,EAAQnI,GACtBe,KAAKsG,SAASc,EAAQrI,GACtBiB,KAAKsG,SAASa,EAAQlI,EAEzB,GChUsB,WAEvB,MAAMoI,EAAY,IAAI5G,aAAa,GAC7B6G,EAAY,IAAIC,WAAWF,EAAUG,OA6B/C,CAhC2B,GAApB,MAkCMC,EAAmB,WAE5B,MAAMJ,EAAY,IAAI5G,aAAa,GAC7B6G,EAAY,IAAIC,WAAWF,EAAUG,QAE3C,OAAO,SAAS1E,GAEZ,OADAuE,EAAU,GAAKvE,EACRwE,EAAU,EACzB,CAEA,CAVgC,GAgBnBI,EAAoB,SAASC,EAAMC,GAE5C,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBC,MAAML,GACLM,MAAKC,MAAOC,IACT,MAAMC,EAASD,EAAKE,KAAKC,YACzB,IAAIC,EAAkB,EAClBC,EAAYL,EAAKM,QAAQC,IAAI,kBAC7BC,EAAWH,EAAYI,SAASJ,QAAaK,EAEjD,MAAMC,EAAS,GAEf,OACI,IACI,MAAQC,MAAOC,EAAKC,KAAEA,SAAeb,EAAOc,OAC5C,GAAID,EAAM,CACFrB,GACAA,EAAW,IAAK,OAAQoB,GAE5B,MAAMxB,EAAS,IAAI2B,KAAKL,GAAQM,cAChCtB,EAAQN,GACR,KACH,CAED,IAAI6B,EACAC,EAFJf,GAAmBS,EAAMO,YAGRV,IAAbF,IACAU,EAAUd,EAAkBI,EAAW,IACvCW,EAAe,GAAGD,EAAQG,QAAQ,OAEtCV,EAAOW,KAAKT,GACRpB,GACAA,EAAWyB,EAASC,EAAcN,EAEzC,CAAC,MAAOU,GACL3B,EAAO2B,GACP,KACH,CACJ,GACH,GAGV,EAEahE,EAAQ,SAASiE,EAAKC,EAAKC,GACpC,OAAOxE,KAAKwE,IAAIxE,KAAKuE,IAAID,EAAKE,GAAMD,EACxC,EAEaE,EAAiB,WAC1B,OAAOC,YAAYC,MAAQ,GAC/B,EChGMC,EAAwB,IAGvB,MAAMC,EAET,WAAApK,CAAYqK,GACRnK,KAAKmK,UAAYA,CACpB,CAED,YAAAC,CAAaD,GACT,MAAME,EAAU,IAAIC,YACpB,IAAIC,EAAe,EACfC,EAAa,GAEjBC,QAAQC,IAAI,cAAgBP,EAAU1I,WAAa,UAEnD,MAAMkJ,EAAgB,IAEtB,OAAa,CACT,GAAIJ,EAAeI,GAAiBR,EAAU1I,WAC1C,MAAM,IAAImJ,MAAM,yDAEpB,MAAMC,EAAc,IAAIxK,WAAW8J,EAAWI,EAAcI,GAC5DH,GAAcH,EAAQS,OAAOD,GAC7BN,GAAgBI,EAEhB,MAAMI,EAAqB,IAAI1K,WAAW8J,EAAW9E,KAAKwE,IAAI,EAAGU,EAAeI,KAAoBA,KAEpG,GAD0BN,EAAQS,OAAOC,GACnBC,SAAS,cAC3B,KAEP,CAED,MAAMC,EAAcT,EAAWU,MAAM,MAErC,IAAInK,EAAa,EACboK,EAAgB,CAAA,EAEpB,IAAK,IAAItH,EAAI,EAAGA,EAAIoH,EAAY1B,OAAQ1F,IAAK,CACzC,MAAMuH,EAAOH,EAAYpH,GAAGwH,OAC5B,GAAID,EAAKE,WAAW,kBAAmB,CACnC,MAAMC,EAAkBH,EAAKI,MAAM,OAC/BD,IACAxK,EAAa6H,SAAS2C,EAAgB,IAE7C,MAAM,GAAIH,EAAKE,WAAW,YAAa,CACpC,MAAMG,EAAgBL,EAAKI,MAAM,yBACjC,GAAIC,EAAe,CACf,MAAMC,EAAeD,EAAc,GAEnCN,EADqBM,EAAc,IACLC,CACjC,CACjB,MAAmB,GAAa,eAATN,EACP,KAEP,CAED,MAAMO,EAAmBnB,EAAWoB,QAAQ,cAAgB,GAAsB,EAGlF,MAAO,CACH7K,WAAcA,EACdoK,cAAiBA,EACjBU,WALe,IAAIC,SAAS3B,EAAWwB,GAMvCpB,aAAgBA,EAEvB,CAED,iBAAAwB,CAAkBF,EAAYG,EAAQC,EAAcC,EAAkBf,EAAegB,GACjF,IAAIC,EAAYD,GAAa,GAC7B,IAAK,IAAIE,KAAYH,EAAkB,CACnC,MAAMR,EAAeP,EAAckB,GACd,UAAjBX,EACAU,EAAUC,GAAYR,EAAWS,WAAWN,EAASC,EAAaI,IAAW,GACrD,UAAjBX,IACPU,EAAUC,GAAYR,EAAWU,SAASP,EAASC,EAAaI,IAAa,IAEpF,CACJ,CAED,kBAAAG,CAAmB1L,EAAmB,EAAG2L,EAAe,GAEpD,MAAMC,EAAY3C,YAAYC,MAE9BS,QAAQC,IAAI,2BAEZ,MAAM3J,WAACA,EAAUoK,cAAEA,EAAaU,WAAEA,GAAc7L,KAAKoK,aAAapK,KAAKmK,WAGvE,IAAIwC,EAAc,EAClB,IAAK,MAAMC,KAAgBzB,EACnByB,EAAatB,WAAW,aACxBqB,GAAe,GAGvB,MAAME,EAAkBF,EAAc,EAMtClC,QAAQC,IAAI,kBAFqB,EAEwB,QAASmC,EAAiB,0BAGnF,MAAMC,EAAiB,GACvB,IAAK,IAAIC,EAAM,EAAGA,EAAM,IAAKA,EACzBD,EAAerD,KAAK,QAAQsD,KAEhC,IAAK,IAAIlJ,EAAI,EAAGA,EAAIgJ,IAAmBhJ,EACnC,IAAK,IAAIkJ,EAAM,EAAGA,EAAM,IAAKA,EACzBD,EAAerD,KAAK,UAAUsD,EAAMF,EAAkBhJ,KAI9D,IAAImJ,EAAa,EACbf,EAAe,CAAA,EACnB,MAAMgB,EAAY,CACdC,OAAU,EACVC,IAAO,EACPC,KAAQ,EACRC,MAAS,EACTC,MAAS,EACTC,OAAU,EACVC,MAAS,GAEb,IAAK,IAAIC,KAAatC,EAClB,GAAIA,EAAcuC,eAAeD,GAAY,CACzC,MAAME,EAAOxC,EAAcsC,GAC3BxB,EAAawB,GAAaT,EAC1BA,GAAcC,EAAUU,EAC3B,CAGL,IAAIvB,EAAY,CAAA,EAEhB,MAAMF,EAAmB,CAAC,UAAW,UAAW,UAAW,QAAS,QAAS,QAAS,QAC5D,IAAK,IAAK,IAAK,SAAU,SAAU,SAAU,WAEjE0B,EAAgB,GAEhBC,EAAa,CAAA,EACnB,IAAK,IAAIC,KAAkB5B,EAAkB2B,EAAWC,GAAkB,EAC1EF,EAAcnE,KAAKoE,GACnB,IAAK,IAAIE,EAAM,EAAGA,EAAMhN,EAAYgN,IAAO,CAEvC,IAAIC,EAMJ,GAPAhO,KAAK+L,kBAAkBF,EAAYkC,EAAMf,EAAYf,EAAcC,EAAkBf,EAAeiB,GAGhG4B,EADA7C,EAAuB,QACd,GAAK,EAAI9F,KAAK4I,KAAK7B,EAAU8B,UAAa,IAE3C,IAERF,EAAQvB,EAAc,CACtB,MAAM0B,EAAY,CAAA,EAClB,IAAK,IAAIL,KAAkB5B,EAAkBiC,EAAUL,GAAkB1B,EAAU0B,GACnFF,EAAcnE,KAAK0E,EACtB,CACJ,CAED1D,QAAQC,IAAI,uBAAwBkD,EAAcrE,OAAQ,SAAUxI,GAEpE,MAAMqN,EAA0B,GAChC,IAAK,IAAIL,EAAM,EAAGA,EAAMH,EAAcrE,OAAQwE,IAC1C3B,EAAYwB,EAAcG,GAC1BK,EAAwB3E,KAAK,CAAC2C,EAAUpI,EAAGoI,EAAUnI,EAAGmI,EAAUlI,IAEtE,MAAMmK,EAAUrO,KAAKsO,eAAeF,GAE9BG,EAAmBF,EAAQ9E,OAASU,EACpCuE,EAAajP,EAAYY,gBACzBsO,EAAS,IAAIpO,WAAW,IAAIH,YAAYsO,IAC9CC,EAAO,GAAK3N,EACZ,IAAKP,YAAYkO,EAAOjH,OAAQ,EAAG,GAAI,GAAK+G,EAE5C,IAAI5M,EAAmBpC,EAAY+B,kBAAkBR,GAAkBrB,iBACnEmC,EAAgBrC,EAAY+B,kBAAkBR,GAAkBpB,cAChEmC,EAAgBtC,EAAY+B,kBAAkBR,GAAkBnB,cAChEmC,EAAmBvC,EAAY+B,kBAAkBR,GAAkBlB,iBACvE,MAAM8O,EAAiB,IAAIxO,YAAYyB,EAAmB4M,GACpDI,EAAc,IAAIzO,YAAY0B,EAAgB2M,GAC9CK,EAAc,IAAI1O,YAAY2B,EAAgB0M,GAC9CM,EAAiB,IAAI3O,YAAY4B,EAAmByM,GAGpDlN,EAAwB9B,EAAY+B,kBAAkBR,GAAkBjB,WACxE0B,EAAyBF,EAFTyN,IAGhBC,EAAsD,EAAxB1N,EAA4B,EAE1D2N,EAAe,IAAIpQ,EAAMC,QACzBoQ,EAAoB,IAAIrQ,EAAMC,QACpC,IAAIqQ,EAAgB,EACpB,IAAK,IAAIC,EAAI,EAAGA,EAAId,EAAQ9E,OAAQ4F,IAAK,CACrC,MAAMnK,EAASqJ,EAAQc,GACvBH,EAAaI,UAAUpK,EAAOqK,QAC9B,IAAK,IAAIxL,EAAI,EAAGA,EAAImB,EAAOsK,OAAO/F,OAAQ1F,IAAK,CAC3C,IAAIkK,EAAM/I,EAAOsK,OAAOzL,GACpB0L,GAAe,EAMnB,GALY,IAARxB,IACAwB,GAAe,GAEnBnD,EAAYwB,EAAcG,GAED,IAArBjN,EAAwB,CACxB,MAAM0E,EAAW,IAAI/E,aAAaiO,EAAgBQ,EAAgBvN,EAAkB,GAC9E6N,EAAS,IAAI/O,aAAakO,EAAaO,EAAgBtN,EAAe,GACtE6N,EAAM,IAAIhP,aAAaoO,EAAgBK,EAAgBpN,EAAkB,GAC/E,GAAIqJ,EAAuB,QAAG,CAC1B,MAAMuE,EAAO,IAAI9Q,EAAMO,WAAWiN,EAAUuD,MAAOvD,EAAUwD,MAAOxD,EAAUyD,MAAOzD,EAAU0D,OAC/FJ,EAAKK,YACLN,EAAI/O,IAAI,CAACgP,EAAKxJ,EAAGwJ,EAAK1L,EAAG0L,EAAKzL,EAAGyL,EAAKxL,IACtCsL,EAAO9O,IAAI,CAAC2E,KAAK4I,IAAI7B,EAAU4D,SAAU3K,KAAK4I,IAAI7B,EAAU6D,SAAU5K,KAAK4I,IAAI7B,EAAU8D,UACjH,MACwBV,EAAO9O,IAAI,CAAC,IAAM,IAAM,MACxB+O,EAAI/O,IAAI,CAAC,EAAK,EAAK,EAAK,IAE5B8E,EAAS9E,IAAI,CAAC0L,EAAUpI,EAAGoI,EAAUnI,EAAGmI,EAAUlI,GACtE,KAAuB,CACH,MAAMsB,EAAW,IAAIpD,YAAYsM,EAAgBQ,EAAgBvN,EAAkB,GAC7E6N,EAAS,IAAIpN,YAAYuM,EAAaO,EAAgBtN,EAAe,GACrE6N,EAAM,IAAIrN,YAAYyM,EAAgBK,EAAgBpN,EAAkB,GACxEqO,EAAMvR,EAAMmE,UAAUE,YAAYjB,KAAKpD,EAAMmE,WACnD,GAAIoI,EAAuB,QAAG,CAC1B,MAAMuE,EAAO,IAAI9Q,EAAMO,WAAWiN,EAAUuD,MAAOvD,EAAUwD,MAAOxD,EAAUyD,MAAOzD,EAAU0D,OAC/FJ,EAAKK,YACLN,EAAI/O,IAAI,CAACyP,EAAIT,EAAKxJ,GAAIiK,EAAIT,EAAK1L,GAAImM,EAAIT,EAAKzL,GAAIkM,EAAIT,EAAKxL,KACzDsL,EAAO9O,IAAI,CAACyP,EAAI9K,KAAK4I,IAAI7B,EAAU4D,UAAWG,EAAI9K,KAAK4I,IAAI7B,EAAU6D,UAAWE,EAAI9K,KAAK4I,IAAI7B,EAAU8D,WAC/H,MACwBV,EAAO9O,IAAI,CAACyP,EAAI,KAAOA,EAAI,KAAOA,EAAI,OACtCV,EAAI/O,IAAI,CAACyP,EAAI,GAAK,EAAG,EAAG,IAE5BlB,EAAkBvO,IAAI0L,EAAUpI,EAAGoI,EAAUnI,EAAGmI,EAAUlI,GAAGkM,IAAIpB,GACjEC,EAAkBjL,EAAIqB,KAAKM,MAAMsJ,EAAkBjL,EAAIzC,GAA0BF,EACjF4N,EAAkBjL,EAAI0B,EAAMuJ,EAAkBjL,EAAG,EAAG+K,GACpDE,EAAkBhL,EAAIoB,KAAKM,MAAMsJ,EAAkBhL,EAAI1C,GAA0BF,EACjF4N,EAAkBhL,EAAIyB,EAAMuJ,EAAkBhL,EAAG,EAAG8K,GACpDE,EAAkB/K,EAAImB,KAAKM,MAAMsJ,EAAkB/K,EAAI3C,GAA0BF,EACjF4N,EAAkB/K,EAAIwB,EAAMuJ,EAAkB/K,EAAG,EAAG6K,GACpDvJ,EAAS9E,IAAI,CAACuO,EAAkBjL,EAAGiL,EAAkBhL,EAAGgL,EAAkB/K,GAC7E,CAED,MAAMmM,EAAO,IAAIC,kBAAkB1B,EAAaM,EAAgBrN,EAAe,GAC/E,GAAI0N,EACAc,EAAK,GAAK,IACVA,EAAK,GAAK,EACVA,EAAK,GAAK,EACVA,EAAK,GAAK,MACP,CACH,GAAIlF,EAAsB,OAAG,CACzB,MAAMoF,EAAQ,mBACdF,EAAK3P,IAAI,CAAoC,KAAlC,GAAM6P,EAAQnE,EAAUoE,QACU,KAAlC,GAAMD,EAAQnE,EAAUqE,QACU,KAAlC,GAAMF,EAAQnE,EAAUsE,SAC3D,MACwBL,EAAK3P,IAAI,CAAC,IAAK,EAAG,IAElByK,EAAuB,QACvBkF,EAAK,GAAM,GAAK,EAAIhL,KAAK4I,KAAK7B,EAAU8B,UAAa,IAErDmC,EAAK,GAAK,GAEjB,CAEDnB,GACH,CACJ,CAED,MACMyB,EADiB,GACctC,EAAQ9E,OACvCqH,EAAsBlC,EAAejN,WAAakN,EAAYlN,WACxCmN,EAAYnN,WAAaoN,EAAepN,WAE9DnB,EAAoB,IAAIC,YAAYkO,EAAOjH,QAC3ChH,EAAqB,IAAIC,aAAagO,EAAOjH,QACnD,IAAIqJ,EAAoBrC,EAAaoC,EACjC9P,EAAmB,IACnB+P,GAAqBF,EACrBrQ,EAAkB,GAAK2J,EACvB3J,EAAkB,GAAK+N,EAAQ9E,OAC/B/I,EAAmB,GApRI,EAqRvBF,EAAkB,GAbC,GAcnBA,EAAkB,GAAKf,EAAY+B,kBAAkBR,GAAkBjB,YAG3E,MAAMiR,EAAgB,IAAI5Q,YAAY2Q,GAStC,GARA,IAAIxQ,WAAWyQ,EAAe,EAAGtC,GAAY9N,IAAI+N,GACjD,IAAIpO,WAAWyQ,EAAetC,EAAYE,EAAejN,YAAYf,IAAI,IAAIL,WAAWqO,IACxF,IAAIrO,WAAWyQ,EAAetC,EAAaE,EAAejN,WAAYkN,EAAYlN,YAAYf,IAAI,IAAIL,WAAWsO,IACjH,IAAItO,WAAWyQ,EAAetC,EAAaE,EAAejN,WAAakN,EAAYlN,WACpEmN,EAAYnN,YAAYf,IAAI,IAAIL,WAAWuO,IAC1D,IAAIvO,WAAWyQ,EAAetC,EAAaE,EAAejN,WAAakN,EAAYlN,WAAamN,EAAYnN,WAC7FoN,EAAepN,YAAYf,IAAI,IAAIL,WAAWwO,IAEzD/N,EAAmB,EAAG,CACtB,MAAMiQ,EAAc,IAAItQ,aAAaqQ,EAAetC,EAAaoC,EAAsC,EAAjBvC,EAAQ9E,QAC9F,IAAK,IAAI1F,EAAI,EAAGA,EAAIwK,EAAQ9E,OAAQ1F,IAAK,CACrC,MAAMmB,EAASqJ,EAAQxK,GACjBmN,EAAW,EAAJnN,EACbkN,EAAYC,GAAQhM,EAAOqK,OAAO,GAClC0B,EAAYC,EAAO,GAAKhM,EAAOqK,OAAO,GACtC0B,EAAYC,EAAO,GAAKhM,EAAOqK,OAAO,EACzC,CACJ,CAED,MAAM4B,EAAc,IAAI1R,EAAYuR,GAE9BI,EAAUnH,YAAYC,MAK5B,OAHAS,QAAQC,IAAI,kCACZD,QAAQC,IAAI,gBAAiBwG,EAAUxE,GAAWlD,QAAQ,GAAK,OAExDyH,CACV,CAED,cAAA3C,CAAe6C,GACX,MAEMpQ,EAAaoQ,EAAU5H,OAEvBK,EAAM,IAAIhL,EAAMC,QAChBgL,EAAM,IAAIjL,EAAMC,QAGtB,IAAK,IAAIgF,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAM2B,EAAW2L,EAAUtN,IACjB,IAANA,GAAW2B,EAAS,GAAKoE,EAAI5F,KAAG4F,EAAI5F,EAAIwB,EAAS,KAC3C,IAAN3B,GAAW2B,EAAS,GAAKqE,EAAI7F,KAAG6F,EAAI7F,EAAIwB,EAAS,KAC3C,IAAN3B,GAAW2B,EAAS,GAAKoE,EAAI3F,KAAG2F,EAAI3F,EAAIuB,EAAS,KAC3C,IAAN3B,GAAW2B,EAAS,GAAKqE,EAAI5F,KAAG4F,EAAI5F,EAAIuB,EAAS,KAC3C,IAAN3B,GAAW2B,EAAS,GAAKoE,EAAI1F,KAAG0F,EAAI1F,EAAIsB,EAAS,KAC3C,IAAN3B,GAAW2B,EAAS,GAAKqE,EAAI3F,KAAG2F,EAAI3F,EAAIsB,EAAS,GACxD,CAED,MAAM4L,GAAa,IAAIxS,EAAMC,SAAUyF,KAAKuF,GAAKuG,IAAIxG,GAC/CyH,EAAUhM,KAAKiM,KAAKF,EAAWnN,EA3UV,GA4UrBsN,EAAUlM,KAAKiM,KAAKF,EAAWlN,EA5UV,GA8UrBsN,EAAc,IAAI5S,EAAMC,QACxB4S,EAAc,GACdC,EAAuB,CAAA,EAG7B,IAAK,IAAI7N,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAM2B,EAAW2L,EAAUtN,GACrB8N,EAAStM,KAAKiM,MAAM9L,EAAS,GAAKoE,EAAI5F,GArVrB,GAsVjB4N,EAASvM,KAAKiM,MAAM9L,EAAS,GAAKoE,EAAI3F,GAtVrB,GAuVjB4N,EAASxM,KAAKiM,MAAM9L,EAAS,GAAKoE,EAAI1F,GAvVrB,GAyVvBsN,EAAYxN,EAzVW,GAyVN2N,EAAS,GAAiB/H,EAAI5F,EAhC7B8N,IAiClBN,EAAYvN,EA1VW,GA0VN2N,EAAS,GAAiBhI,EAAI3F,EAjC7B6N,IAkClBN,EAAYtN,EA3VW,GA2VN2N,EAAS,GAAiBjI,EAAI1F,EAlC7B4N,IAoClB,MAAMC,EAAWJ,GAAUN,EAAUE,GAAWK,EAASL,EAAUM,EACnE,IAAI7M,EAAS0M,EAAqBK,GAC7B/M,IACD0M,EAAqBK,GAAY/M,EAAS,CACtCsK,OAAU,GACVD,OAAUmC,EAAYQ,YAI9BhN,EAAOsK,OAAO7F,KAAK5F,GACfmB,EAAOsK,OAAO/F,QAAUU,IACxBwH,EAAYhI,KAAKzE,GACjB0M,EAAqBK,GAAY,KAExC,CAID,IAAK,IAAIA,KAAYL,EACjB,GAAIA,EAAqBhE,eAAeqE,GAAW,CAC/C,MAAM/M,EAAS0M,EAAqBK,GACpC,GAAI/M,EAAQ,CACR,KAAOA,EAAOsK,OAAO/F,OAASU,GAC1BjF,EAAOsK,OAAO7F,KAAK,GAEvBgI,EAAYhI,KAAKzE,EACpB,CACJ,CAGL,OAAOyM,CACV,EC9XE,MAAMQ,EAET,WAAAnS,GACIE,KAAKiR,YAAc,IACtB,CAED,SAAAiB,CAAUC,EAAUvK,GAChB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBL,EAAkByK,EAAUvK,GAC3BK,MAAME,IACHL,EAAQK,EAAK,IAEhBiK,OAAOC,IACJtK,EAAOsK,EAAI,GACb,GAET,CAED,WAAAC,CAAYH,EAAUrR,EAAmB,EAAG2L,EAAe,GACvD,OAAO,IAAI5E,SAAQ,CAACC,EAASC,KACL/H,KAAKkS,UAAUC,GAElClK,MAAMsK,IACH,MACMtB,EADY,IAAI/G,EAAUqI,GACF/F,mBAAmB1L,EAAkB2L,GACnEzM,KAAKiR,YAAcA,EACnBnJ,EAAQmJ,EAAY,IAEvBmB,OAAOC,IACJtK,EAAOsK,EAAI,GACb,GAET,EChCE,MAAMG,EAET,WAAA1S,CAAYmR,EAAc,MACtBjR,KAAKiR,YAAcA,EACnBjR,KAAKyS,aAAe,IACvB,CAED,WAAAH,CAAYH,EAAUvK,GAClB,OAAO,IAAIC,SAAQ,CAACC,EAASC,KACzBL,EAAkByK,EAAUvK,GAC3BK,MAAMlI,IACH,MAAMkR,EAAc,IAAI1R,EAAYQ,GACpC+H,EAAQmJ,EAAY,IAEvBmB,OAAOC,IACJtK,EAAOsK,EAAI,GACb,GAET,CAED,aAAAK,CAAczB,GACVjR,KAAKiR,YAAcA,CACtB,CAED,YAAA0B,CAAaR,GACT,MAAMS,EAAa,IAAIvS,WAAWL,KAAKiR,YAAYtM,uBAC7CkO,EAAY,IAAIxS,WAAWL,KAAKiR,YAAYrM,sBAC5CkO,EAAO,IAAI3J,KAAK,CAACyJ,EAAWpL,OAAQqL,EAAUrL,QAAS,CACzDmG,KAAM,6BAGL3N,KAAKyS,eACNzS,KAAKyS,aAAeM,SAASC,cAAc,KAC3CD,SAAS1K,KAAK4K,YAAYjT,KAAKyS,eAEnCzS,KAAKyS,aAAaS,SAAWf,EAC7BnS,KAAKyS,aAAaU,KAAOC,IAAIC,gBAAgBP,GAC7C9S,KAAKyS,aAAaa,OACrB,ECrBL,MAAMC,EAAe,CAAE5F,KAAM,UACvB6F,EAAc,CAAE7F,KAAM,SACtB8F,EAAY,CAAE9F,KAAM,OACpB+F,EAAO,IAAIC,EACXC,EAAS,IAAIC,EACbC,EAAazO,KAAK0O,IAAK,GAAKC,EAAUC,SAE5C,MAAMC,UAAsBC,EAExB,WAAArU,CAAasU,EAAQC,GAEjBC,QAEAtU,KAAKoU,OAASA,EACdpU,KAAKqU,WAAaA,EAClBrU,KAAKqU,WAAWE,MAAMC,YAAc,OAGpCxU,KAAKyU,SAAU,EAGfzU,KAAK0U,OAAS,IAAI7V,EAGlBmB,KAAK2U,YAAc,EACnB3U,KAAK4U,YAAcC,IAGnB7U,KAAK8U,QAAU,EACf9U,KAAK+U,QAAUF,IAIf7U,KAAKgV,cAAgB,EACrBhV,KAAKiV,cAAgB5P,KAAK6P,GAI1BlV,KAAKmV,iBAAoBN,IACzB7U,KAAKoV,gBAAkBP,IAIvB7U,KAAKqV,eAAgB,EACrBrV,KAAKsV,cAAgB,IAIrBtV,KAAKuV,YAAa,EAClBvV,KAAKwV,UAAY,EAGjBxV,KAAKyV,cAAe,EACpBzV,KAAK0V,YAAc,EAGnB1V,KAAK2V,WAAY,EACjB3V,KAAK4V,SAAW,EAChB5V,KAAK6V,oBAAqB,EAC1B7V,KAAK8V,YAAc,EACnB9V,KAAK+V,cAAe,EAIpB/V,KAAKgW,YAAa,EAClBhW,KAAKiW,gBAAkB,EAGvBjW,KAAKkW,KAAO,CAAEC,KAAM,YAAaC,GAAI,UAAWC,MAAO,aAAcC,OAAQ,aAG7EtW,KAAKuW,aAAe,CAAEJ,KAAMK,EAAMC,OAAQC,OAAQF,EAAMG,MAAON,MAAOG,EAAMI,KAG5E5W,KAAK6W,QAAU,CAAEC,IAAKC,EAAMN,OAAQO,IAAKD,EAAME,WAG/CjX,KAAKkX,QAAUlX,KAAK0U,OAAOyC,QAC3BnX,KAAKoX,UAAYpX,KAAKoU,OAAO5O,SAAS2R,QACtCnX,KAAKqX,MAAQrX,KAAKoU,OAAOkD,KAGzBtX,KAAKuX,qBAAuB,KAM5BvX,KAAKwX,cAAgB,WAEjB,OAAOC,EAAUC,GAE7B,EAEQ1X,KAAK2X,kBAAoB,WAErB,OAAOF,EAAUG,KAE7B,EAEQ5X,KAAK6X,YAAc,WAEf,OAAO7X,KAAKoU,OAAO5O,SAASsS,WAAY9X,KAAK0U,OAEzD,EAEQ1U,KAAK+X,kBAAoB,SAAU1D,GAG/BrU,KAAKuX,qBAAuBlD,CAExC,EAEQrU,KAAKgY,sBAAwB,WAEzBhY,KAAKuX,qBAAqBU,oBAAqB,UAAWC,IAC1DlY,KAAKuX,qBAAuB,IAExC,EAEQvX,KAAKmY,UAAY,WAEbC,EAAMlB,QAAQ5S,KAAM8T,EAAM1D,QAC1B0D,EAAMhB,UAAU9S,KAAM8T,EAAMhE,OAAO5O,UACnC4S,EAAMf,MAAQe,EAAMhE,OAAOkD,IAEvC,EAEQtX,KAAKqY,MAAQ,WAETD,EAAM1D,OAAOpQ,KAAM8T,EAAMlB,SACzBkB,EAAMhE,OAAO5O,SAASlB,KAAM8T,EAAMhB,WAClCgB,EAAMhE,OAAOkD,KAAOc,EAAMf,MAE1Be,EAAMhE,OAAOkE,yBACbF,EAAMG,cAAehF,GAErB6E,EAAMI,SAENC,EAAQC,EAAMC,IAE1B,EAGQ3Y,KAAKwY,OAAS,WAEV,MAAMxM,EAAS,IAAInN,EAGb6Q,GAAO,IAAIvQ,GAAayZ,mBAAoBxE,EAAOyE,GAAI,IAAIha,EAAS,EAAG,EAAG,IAC1Eia,EAAcpJ,EAAKyH,QAAQ4B,SAE3BC,EAAe,IAAIna,EACnBoa,EAAiB,IAAI9Z,EACrB+Z,EAAqB,IAAIra,EAEzBsa,EAAQ,EAAI9T,KAAK6P,GAEvB,OAAO,WAEHxF,EAAKkJ,mBAAoBxE,EAAOyE,GAAI,IAAIha,EAAS,EAAG,EAAG,IACvDia,EAAYxU,KAAKoL,GAAMqJ,SAEvB,MAAMvT,EAAW4S,EAAMhE,OAAO5O,SAE9BwG,EAAO1H,KAAMkB,GAAW4K,IAAKgI,EAAM1D,QAGnC1I,EAAOoN,gBAAiB1J,GAGxB+H,EAAU4B,eAAgBrN,GAErBoM,EAAMpC,YAAcyC,IAAUC,EAAMC,MAErCW,EAuRD,EAAIjU,KAAK6P,GAAK,GAAK,GAAKkD,EAAMnC,iBAnR5BmC,EAAM/C,eAEPoC,EAAUG,OAAS2B,EAAe3B,MAAQQ,EAAM9C,cAChDmC,EAAUC,KAAO6B,EAAe7B,IAAMU,EAAM9C,gBAI5CmC,EAAUG,OAAS2B,EAAe3B,MAClCH,EAAUC,KAAO6B,EAAe7B,KAMpC,IAAI9N,EAAMwO,EAAMjD,gBACZtL,EAAMuO,EAAMhD,gBAEXoE,SAAU5P,IAAS4P,SAAU3P,KAEzBD,GAAQvE,KAAK6P,GAAKtL,GAAOuP,EAAiBvP,EAAMvE,KAAK6P,KAAKtL,GAAOuP,GAEjEtP,GAAQxE,KAAK6P,GAAKrL,GAAOsP,EAAiBtP,EAAMxE,KAAK6P,KAAKrL,GAAOsP,GAIlE1B,EAAUG,MAFThO,GAAOC,EAEUxE,KAAKwE,IAAKD,EAAKvE,KAAKuE,IAAKC,EAAK4N,EAAUG,QAItCH,EAAUG,OAAUhO,EAAMC,GAAQ,EAClDxE,KAAKwE,IAAKD,EAAK6N,EAAUG,OACzBvS,KAAKuE,IAAKC,EAAK4N,EAAUG,QAOrCH,EAAUC,IAAMrS,KAAKwE,IAAKuO,EAAMpD,cAAe3P,KAAKuE,IAAKwO,EAAMnD,cAAewC,EAAUC,MAExFD,EAAUgC,YAKmB,IAAxBrB,EAAM/C,cAEP+C,EAAM1D,OAAOgF,gBAAiBC,EAAWvB,EAAM9C,eAI/C8C,EAAM1D,OAAOkF,IAAKD,GAMjBvB,EAAMrC,cAAgB8D,GAAqBzB,EAAMhE,OAAO0F,qBAEzDrC,EAAUsC,OAASC,EAAevC,EAAUsC,QAI5CtC,EAAUsC,OAASC,EAAevC,EAAUsC,OAAS1W,GAKzD2I,EAAOiO,iBAAkBxC,GAGzBzL,EAAOoN,gBAAiBN,GAExBtT,EAASlB,KAAM8T,EAAM1D,QAASkF,IAAK5N,GAEnCoM,EAAMhE,OAAO8F,OAAQ9B,EAAM1D,SAEE,IAAxB0D,EAAM/C,eAEPkE,EAAe3B,OAAW,EAAIQ,EAAM9C,cACpCiE,EAAe7B,KAAS,EAAIU,EAAM9C,cAElCqE,EAAUQ,eAAgB,EAAI/B,EAAM9C,iBAIpCiE,EAAe7Y,IAAK,EAAG,EAAG,GAE1BiZ,EAAUjZ,IAAK,EAAG,EAAG,IAKzB,IAAI0Z,GAAc,EAClB,GAAKhC,EAAMrC,cAAgB8D,EAAoB,CAE3C,IAAIQ,EAAY,KAChB,GAAKjC,EAAMhE,OAAOkG,oBAAsB,CAIpC,MAAMC,EAAavO,EAAOzC,SAC1B8Q,EAAYL,EAAeO,EAAalX,GAExC,MAAMmX,EAAcD,EAAaF,EACjCjC,EAAMhE,OAAO5O,SAASkU,gBAAiBe,EAAgBD,GACvDpC,EAAMhE,OAAOsG,mBAErC,MAA2B,GAAKtC,EAAMhE,OAAO0F,qBAAuB,CAG5C,MAAMa,EAAc,IAAI9b,EAAS+b,EAAM5W,EAAG4W,EAAM3W,EAAG,GACnD0W,EAAYE,UAAWzC,EAAMhE,QAE7BgE,EAAMhE,OAAOkD,KAAOjS,KAAKwE,IAAKuO,EAAMtD,QAASzP,KAAKuE,IAAKwO,EAAMrD,QAASqD,EAAMhE,OAAOkD,KAAOjU,IAC1F+U,EAAMhE,OAAOkE,yBACb8B,GAAc,EAEd,MAAMU,EAAa,IAAIjc,EAAS+b,EAAM5W,EAAG4W,EAAM3W,EAAG,GAClD6W,EAAWD,UAAWzC,EAAMhE,QAE5BgE,EAAMhE,OAAO5O,SAAS4K,IAAK0K,GAAalB,IAAKe,GAC7CvC,EAAMhE,OAAOsG,oBAEbL,EAAYrO,EAAOzC,QAE3C,MAEwBkB,QAAQsQ,KAAM,2FACd3C,EAAMrC,cAAe,EAKN,OAAdsE,IAEIra,KAAK6V,mBAGNuC,EAAM1D,OAAOhU,IAAK,EAAG,GAAK,GACrBsa,mBAAoB5C,EAAMhE,OAAO6G,QACjCd,eAAgBE,GAChBT,IAAKxB,EAAMhE,OAAO5O,WAKvBkO,EAAKwH,OAAO5W,KAAM8T,EAAMhE,OAAO5O,UAC/BkO,EAAKyH,UAAUza,IAAK,EAAG,GAAK,GAAIsa,mBAAoB5C,EAAMhE,OAAO6G,QAI5D5V,KAAK+V,IAAKhD,EAAMhE,OAAOyE,GAAGwC,IAAK3H,EAAKyH,YAAgBrH,EAErDM,EAAO8F,OAAQ9B,EAAM1D,SAIrBd,EAAO0H,8BAA+BlD,EAAMhE,OAAOyE,GAAIT,EAAM1D,QAC7DhB,EAAK6H,eAAgB3H,EAAQwE,EAAM1D,UAQnE,MAA4B0D,EAAMhE,OAAO0F,uBAErB1B,EAAMhE,OAAOkD,KAAOjS,KAAKwE,IAAKuO,EAAMtD,QAASzP,KAAKuE,IAAKwO,EAAMrD,QAASqD,EAAMhE,OAAOkD,KAAOjU,IAC1F+U,EAAMhE,OAAOkE,yBACb8B,GAAc,GAWlB,OAPA/W,EAAQ,EACRwW,GAAoB,KAMfO,GACDpB,EAAawC,kBAAmBpD,EAAMhE,OAAO5O,UAAaiW,GAC1D,GAAM,EAAIxC,EAAeoC,IAAKjD,EAAMhE,OAAOsH,aAAiBD,GAC5DvC,EAAmBsC,kBAAmBpD,EAAM1D,QAAW,KAEvD0D,EAAMG,cAAehF,GAErByF,EAAa1U,KAAM8T,EAAMhE,OAAO5O,UAChCyT,EAAe3U,KAAM8T,EAAMhE,OAAOsH,YAClCxC,EAAmB5U,KAAM8T,EAAM1D,QAE/B0F,GAAc,GAEP,EAM3B,CAEA,CA9OsB,GAgPdpa,KAAK2b,QAAU,WAEXvD,EAAM/D,WAAW4D,oBAAqB,cAAe2D,IAErDxD,EAAM/D,WAAW4D,oBAAqB,cAAe4D,IACrDzD,EAAM/D,WAAW4D,oBAAqB,gBAAiB6D,IACvD1D,EAAM/D,WAAW4D,oBAAqB,QAAS8D,IAE/C3D,EAAM/D,WAAW4D,oBAAqB,cAAe+D,IACrD5D,EAAM/D,WAAW4D,oBAAqB,YAAa6D,IAGf,OAA/B1D,EAAMb,uBAEPa,EAAMb,qBAAqBU,oBAAqB,UAAWC,IAC3DE,EAAMb,qBAAuB,KAI7C,EAMQ,MAAMa,EAAQpY,KAER0Y,EAAQ,CACVC,MAAQ,EACRlC,OAAQ,EACRE,MAAO,EACPC,IAAK,EACLqF,aAAc,EACdC,UAAW,EACXC,gBAAiB,EACjBC,mBAAoB,GAGxB,IAAI3D,EAAQC,EAAMC,KAElB,MAAM8C,EAAM,KAGNhE,EAAY,IAAI4E,EAChB9C,EAAiB,IAAI8C,EAE3B,IAAIhZ,EAAQ,EACZ,MAAMsW,EAAY,IAAI9a,EAEhByd,EAAc,IAAIC,EAClBC,EAAY,IAAID,EAChBE,EAAc,IAAIF,EAElBG,EAAW,IAAIH,EACfI,EAAS,IAAIJ,EACbK,EAAW,IAAIL,EAEfM,EAAa,IAAIN,EACjBO,EAAW,IAAIP,EACfQ,EAAa,IAAIR,EAEjB9B,EAAiB,IAAI5b,EACrB+b,EAAQ,IAAI2B,EAClB,IAAI1C,GAAoB,EAExB,MAAMmD,EAAW,GACXC,EAAmB,CAAA,EAQzB,SAASC,IAEL,OAAO7X,KAAK8X,IAAK,IAAM/E,EAAM5C,UAEhC,CAED,SAAS8D,EAAY8D,GAEjB7D,EAAe3B,OAASwF,CAE3B,CAED,SAASC,EAAUD,GAEf7D,EAAe7B,KAAO0F,CAEzB,CAED,MAAME,EAAU,WAEZ,MAAMC,EAAI,IAAI1e,EAEd,OAAO,SAAkB2e,EAAUC,GAE/BF,EAAEG,oBAAqBD,EAAc,GACrCF,EAAEpD,gBAAkBqD,GAEpB7D,EAAUC,IAAK2D,EAE/B,CAEA,CAbwB,GAeVI,EAAQ,WAEV,MAAMJ,EAAI,IAAI1e,EAEd,OAAO,SAAgB2e,EAAUC,IAEK,IAA7BrF,EAAMvC,mBAEP0H,EAAEG,oBAAqBD,EAAc,IAIrCF,EAAEG,oBAAqBD,EAAc,GACrCF,EAAEK,aAAcxF,EAAMhE,OAAOyE,GAAI0E,IAIrCA,EAAEpD,eAAgBqD,GAElB7D,EAAUC,IAAK2D,EAE/B,CAEA,CAvBsB,GA0BRM,EAAM,WAER,MAAM7R,EAAS,IAAInN,EAEnB,OAAO,SAAcif,EAAQC,GAEzB,MAAMC,EAAU5F,EAAM/D,WAEtB,GAAK+D,EAAMhE,OAAOkG,oBAAsB,CAGpC,MAAM9U,EAAW4S,EAAMhE,OAAO5O,SAC9BwG,EAAO1H,KAAMkB,GAAW4K,IAAKgI,EAAM1D,QACnC,IAAIuJ,EAAiBjS,EAAOzC,SAG5B0U,GAAkB5Y,KAAK6Y,IAAO9F,EAAMhE,OAAO+J,IAAM,EAAM9Y,KAAK6P,GAAK,KAGjEoI,EAAS,EAAIQ,EAASG,EAAiBD,EAAQI,aAAchG,EAAMhE,OAAO6G,QAC1E0C,EAAO,EAAII,EAASE,EAAiBD,EAAQI,aAAchG,EAAMhE,OAAO6G,OAE5F,MAA4B7C,EAAMhE,OAAO0F,sBAGrBwD,EAASQ,GAAW1F,EAAMhE,OAAOiK,MAAQjG,EAAMhE,OAAOkK,MAClClG,EAAMhE,OAAOkD,KAAO0G,EAAQO,YAAanG,EAAMhE,OAAO6G,QAC1E0C,EAAOI,GAAW3F,EAAMhE,OAAOoK,IAAMpG,EAAMhE,OAAOqK,QAAWrG,EAAMhE,OAAOkD,KACxD0G,EAAQI,aAAchG,EAAMhE,OAAO6G,UAKrDxQ,QAAQsQ,KAAM,gFACd3C,EAAMzC,WAAY,EAItC,CAEA,CAxCoB,GA0CZ,SAAS+I,EAAUC,GAEVvG,EAAMhE,OAAOkG,qBAAuBlC,EAAMhE,OAAO0F,qBAElDzW,GAASsb,GAITlU,QAAQsQ,KAAM,uFACd3C,EAAM7C,YAAa,EAI1B,CAED,SAASqJ,EAASD,GAETvG,EAAMhE,OAAOkG,qBAAuBlC,EAAMhE,OAAO0F,qBAElDzW,GAASsb,GAITlU,QAAQsQ,KAAM,uFACd3C,EAAM7C,YAAa,EAI1B,CAED,SAASsJ,EAAuBC,GAE5B,IAAO1G,EAAMrC,aAET,OAIJ8D,GAAoB,EAEpB,MAAMkF,EAAO3G,EAAM/D,WAAW2K,wBACxBhb,EAAI8a,EAAMG,QAAUF,EAAKT,KACzBra,EAAI6a,EAAMI,QAAUH,EAAKP,IACzBtY,EAAI6Y,EAAKI,MACTC,EAAIL,EAAKM,OAEfzE,EAAM5W,EAAMA,EAAIkC,EAAM,EAAI,EAC1B0U,EAAM3W,GAAQA,EAAImb,EAAM,EAAI,EAE5B3E,EAAe/Z,IAAKka,EAAM5W,EAAG4W,EAAM3W,EAAG,GAAI4W,UAAWzG,GAAShE,IAAKgE,EAAO5O,UAAWuK,WAExF,CAED,SAASiK,EAAesF,GAEpB,OAAOja,KAAKwE,IAAKuO,EAAMzD,YAAatP,KAAKuE,IAAKwO,EAAMxD,YAAa0K,GAEpE,CAMD,SAASC,EAAuBT,GAE5BxC,EAAY5b,IAAKoe,EAAMG,QAASH,EAAMI,QAEzC,CASD,SAASM,EAAoBV,GAEzBpC,EAAShc,IAAKoe,EAAMG,QAASH,EAAMI,QAEtC,CA0JD,SAASO,IAEL,GAAyB,IAApBzC,EAASzT,OAEV+S,EAAY5b,IAAKsc,EAAS,GAAG0C,MAAO1C,EAAS,GAAG2C,WAE7C,CAEH,MAAM3b,EAAI,IAAQgZ,EAAS,GAAG0C,MAAQ1C,EAAS,GAAG0C,OAC5Czb,EAAI,IAAQ+Y,EAAS,GAAG2C,MAAQ3C,EAAS,GAAG2C,OAElDrD,EAAY5b,IAAKsD,EAAGC,EAEvB,CAEJ,CAED,SAAS2b,IAEL,GAAyB,IAApB5C,EAASzT,OAEVmT,EAAShc,IAAKsc,EAAS,GAAG0C,MAAO1C,EAAS,GAAG2C,WAE1C,CAEH,MAAM3b,EAAI,IAAQgZ,EAAS,GAAG0C,MAAQ1C,EAAS,GAAG0C,OAC5Czb,EAAI,IAAQ+Y,EAAS,GAAG2C,MAAQ3C,EAAS,GAAG2C,OAElDjD,EAAShc,IAAKsD,EAAGC,EAEpB,CAEJ,CAED,SAAS4b,IAEL,MAAMC,EAAK9C,EAAS,GAAG0C,MAAQ1C,EAAS,GAAG0C,MACrCK,EAAK/C,EAAS,GAAG2C,MAAQ3C,EAAS,GAAG2C,MAErCnC,EAAWnY,KAAK2a,KAAMF,EAAKA,EAAKC,EAAKA,GAE3ClD,EAAWnc,IAAK,EAAG8c,EAEtB,CAkBD,SAASyC,EAAuBnB,GAE5B,GAAwB,GAAnB9B,EAASzT,OAEViT,EAAU9b,IAAKoe,EAAMY,MAAOZ,EAAMa,WAE/B,CAEH,MAAMna,EAAW0a,GAA0BpB,GAErC9a,EAAI,IAAQ8a,EAAMY,MAAQla,EAASxB,GACnCC,EAAI,IAAQ6a,EAAMa,MAAQna,EAASvB,GAEzCuY,EAAU9b,IAAKsD,EAAGC,EAErB,CAEDwY,EAAY0D,WAAY3D,EAAWF,GAAcnC,eAAgB/B,EAAM1C,aAEvE,MAAMsI,EAAU5F,EAAM/D,WAEtBiF,EAAY,EAAIjU,KAAK6P,GAAKuH,EAAYzY,EAAIga,EAAQI,cAElDf,EAAU,EAAIhY,KAAK6P,GAAKuH,EAAYxY,EAAI+Z,EAAQI,cAEhD9B,EAAYhY,KAAMkY,EAErB,CAED,SAAS4D,EAAoBtB,GAEzB,GAAyB,IAApB9B,EAASzT,OAEVoT,EAAOjc,IAAKoe,EAAMY,MAAOZ,EAAMa,WAE5B,CAEH,MAAMna,EAAW0a,GAA0BpB,GAErC9a,EAAI,IAAQ8a,EAAMY,MAAQla,EAASxB,GACnCC,EAAI,IAAQ6a,EAAMa,MAAQna,EAASvB,GAEzC0Y,EAAOjc,IAAKsD,EAAGC,EAElB,CAED2Y,EAASuD,WAAYxD,EAAQD,GAAWvC,eAAgB/B,EAAMxC,UAE9DiI,EAAKjB,EAAS5Y,EAAG4Y,EAAS3Y,GAE1ByY,EAASpY,KAAMqY,EAElB,CAED,SAAS0D,EAAsBvB,GAE3B,MAAMtZ,EAAW0a,GAA0BpB,GAErCgB,EAAKhB,EAAMY,MAAQla,EAASxB,EAC5B+b,EAAKjB,EAAMa,MAAQna,EAASvB,EAE5BuZ,EAAWnY,KAAK2a,KAAMF,EAAKA,EAAKC,EAAKA,GAE3CjD,EAASpc,IAAK,EAAG8c,GAEjBT,EAAWrc,IAAK,EAAG2E,KAAK8X,IAAKL,EAAS7Y,EAAI4Y,EAAW5Y,EAAGmU,EAAM5C,YAE9DkJ,EAAU3B,EAAW9Y,GAErB4Y,EAAWvY,KAAMwY,EAEpB,CAsBD,SAASjB,GAAeiD,IAEG,IAAlB1G,EAAM3D,UAEc,IAApBuI,EAASzT,SAEV6O,EAAM/D,WAAWiM,kBAAmBxB,EAAMyB,WAE1CnI,EAAM/D,WAAWmM,iBAAkB,cAAexE,IAClD5D,EAAM/D,WAAWmM,iBAAkB,YAAa1E,KAgWxD,SAAqBgD,GAEjB9B,EAASvT,KAAMqV,EAElB,CA9VG2B,CAAY3B,GAEe,UAAtBA,EAAM4B,YAsMf,SAAuB5B,GAInB,OAFA6B,GAAc7B,GAEL9B,EAASzT,QAEd,KAAK,EAED,OAAS6O,EAAMvB,QAAQC,KAEnB,KAAKC,EAAMN,OAEP,IAA4B,IAAvB2B,EAAM3C,aAAyB,OAEpCgK,IAEAhH,EAAQC,EAAMuD,aAEd,MAEJ,KAAKlF,EAAMH,IAEP,IAAyB,IAApBwB,EAAMzC,UAAsB,OAEjCiK,IAEAnH,EAAQC,EAAMwD,UAEd,MAEJ,QAEIzD,EAAQC,EAAMC,KAItB,MAEJ,KAAK,EAED,OAASP,EAAMvB,QAAQG,KAEnB,KAAKD,EAAME,UAEP,IAA0B,IAArBmB,EAAM7C,aAA4C,IAApB6C,EAAMzC,UAAsB,OA9W1EyC,EAAM7C,YAAasK,IAEnBzH,EAAMzC,WAAYiK,IAgXPnH,EAAQC,EAAMyD,gBAEd,MAEJ,KAAKpF,EAAM6J,aAEP,IAA0B,IAArBxI,EAAM7C,aAA+C,IAAvB6C,EAAM3C,aAAyB,OAhX7E2C,EAAM7C,YAAasK,IAEnBzH,EAAM3C,cAAegK,IAkXVhH,EAAQC,EAAM0D,mBAEd,MAEJ,QAEI3D,EAAQC,EAAMC,KAItB,MAEJ,QAEIF,EAAQC,EAAMC,KAIjBF,IAAUC,EAAMC,MAEjBP,EAAMG,cAAe/E,EAI5B,CAtROqN,CAAc/B,GA6CtB,SAAsBA,GAElB,IAAIgC,EAEJ,OAAShC,EAAMiC,QAEX,KAAK,EAEDD,EAAc1I,EAAM7B,aAAaJ,KACjC,MAEJ,KAAK,EAED2K,EAAc1I,EAAM7B,aAAaG,OACjC,MAEJ,KAAK,EAEDoK,EAAc1I,EAAM7B,aAAaF,MACjC,MAEJ,QAEIyK,GAAgB,EAIxB,OAASA,GAEL,KAAKtK,EAAMG,MAEP,IAA0B,IAArByB,EAAM7C,WAAuB,QA9Z9C,SAA+BuJ,GAE3BD,EAAuBC,GACvBjC,EAAWnc,IAAKoe,EAAMG,QAASH,EAAMI,QAExC,CA2ZW8B,CAAsBlC,GAEtBrG,EAAQC,EAAM/B,MAEd,MAEJ,KAAKH,EAAMC,OAEP,GAAKqI,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAAW,CAEpD,IAAyB,IAApB/I,EAAMzC,UAAsB,OAEjC6J,EAAoBV,GAEpBrG,EAAQC,EAAM9B,GAEtC,KAA2B,CAEH,IAA4B,IAAvBwB,EAAM3C,aAAyB,OAEpC8J,EAAuBT,GAEvBrG,EAAQC,EAAMjC,MAEjB,CAED,MAEJ,KAAKD,EAAMI,IAEP,GAAKkI,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAAW,CAEpD,IAA4B,IAAvB/I,EAAM3C,aAAyB,OAEpC8J,EAAuBT,GAEvBrG,EAAQC,EAAMjC,MAEtC,KAA2B,CAEH,IAAyB,IAApB2B,EAAMzC,UAAsB,OAEjC6J,EAAoBV,GAEpBrG,EAAQC,EAAM9B,GAEjB,CAED,MAEJ,QAEI6B,EAAQC,EAAMC,KAIjBF,IAAUC,EAAMC,MAEjBP,EAAMG,cAAe/E,EAI5B,CAxIO4N,CAAatC,GAIpB,CAED,SAAS9C,GAAe8C,IAEG,IAAlB1G,EAAM3D,UAEgB,UAAtBqK,EAAM4B,YA0Qf,SAAsB5B,GAIlB,OAFA6B,GAAc7B,GAELrG,GAEL,KAAKC,EAAMuD,aAEP,IAA4B,IAAvB7D,EAAM3C,aAAyB,OAEpCwK,EAAuBnB,GAEvB1G,EAAMI,SAEN,MAEJ,KAAKE,EAAMwD,UAEP,IAAyB,IAApB9D,EAAMzC,UAAsB,OAEjCyK,EAAoBtB,GAEpB1G,EAAMI,SAEN,MAEJ,KAAKE,EAAMyD,gBAEP,IAA0B,IAArB/D,EAAM7C,aAA4C,IAApB6C,EAAMzC,UAAsB,QA3V3E,SAAkCmJ,GAEzB1G,EAAM7C,YAAa8K,EAAsBvB,GAEzC1G,EAAMzC,WAAYyK,EAAoBtB,EAE9C,CAuVWuC,CAAyBvC,GAEzB1G,EAAMI,SAEN,MAEJ,KAAKE,EAAM0D,mBAEP,IAA0B,IAArBhE,EAAM7C,aAA+C,IAAvB6C,EAAM3C,aAAyB,QA7V9E,SAAqCqJ,GAE5B1G,EAAM7C,YAAa8K,EAAsBvB,GAEzC1G,EAAM3C,cAAewK,EAAuBnB,EAEpD,CAyVWwC,CAA4BxC,GAE5B1G,EAAMI,SAEN,MAEJ,QAEIC,EAAQC,EAAMC,KAIzB,CA5TO4I,CAAazC,GA8HrB,SAAsBA,GAElB,OAASrG,GAEL,KAAKC,EAAMjC,OAEP,IAA4B,IAAvB2B,EAAM3C,aAAyB,QAzdhD,SAAgCqJ,GAE5BtC,EAAU9b,IAAKoe,EAAMG,QAASH,EAAMI,SAEpCzC,EAAY0D,WAAY3D,EAAWF,GAAcnC,eAAgB/B,EAAM1C,aAEvE,MAAMsI,EAAU5F,EAAM/D,WAEtBiF,EAAY,EAAIjU,KAAK6P,GAAKuH,EAAYzY,EAAIga,EAAQI,cAElDf,EAAU,EAAIhY,KAAK6P,GAAKuH,EAAYxY,EAAI+Z,EAAQI,cAEhD9B,EAAYhY,KAAMkY,GAElBpE,EAAMI,QAET,CA2cWgJ,CAAuB1C,GAEvB,MAEJ,KAAKpG,EAAM/B,MAEP,IAA0B,IAArByB,EAAM7C,WAAuB,QA/c9C,SAA+BuJ,GAE3BhC,EAASpc,IAAKoe,EAAMG,QAASH,EAAMI,SAEnCnC,EAAWoD,WAAYrD,EAAUD,GAE5BE,EAAW9Y,EAAI,EAEhBya,EAAUxB,KAEFH,EAAW9Y,EAAI,GAEvB2a,EAAS1B,KAIbL,EAAWvY,KAAMwY,GAEjB1E,EAAMI,QAET,CA6bWiJ,CAAsB3C,GAEtB,MAEJ,KAAKpG,EAAM9B,IAEP,IAAyB,IAApBwB,EAAMzC,UAAsB,QAjc7C,SAA6BmJ,GAEzBnC,EAAOjc,IAAKoe,EAAMG,QAASH,EAAMI,SAEjCtC,EAASuD,WAAYxD,EAAQD,GAAWvC,eAAgB/B,EAAMxC,UAE9DiI,EAAKjB,EAAS5Y,EAAG4Y,EAAS3Y,GAE1ByY,EAASpY,KAAMqY,GAEfvE,EAAMI,QAET,CAubWkJ,CAAoB5C,GAM/B,CAxJO6C,CAAa7C,GAIpB,CAED,SAAShD,GAAagD,IAkUtB,SAAwBA,UAEb7B,EAAiB6B,EAAMyB,WAE9B,IAAM,IAAI1c,EAAI,EAAGA,EAAImZ,EAASzT,OAAQ1F,IAElC,GAAKmZ,EAASnZ,GAAG0c,WAAazB,EAAMyB,UAGhC,YADAvD,EAAS4E,OAAQ/d,EAAG,EAO/B,CA/UGge,CAAe/C,GAEU,IAApB9B,EAASzT,SAEV6O,EAAM/D,WAAWyN,sBAAuBhD,EAAMyB,WAE9CnI,EAAM/D,WAAW4D,oBAAqB,cAAe+D,IACrD5D,EAAM/D,WAAW4D,oBAAqB,YAAa6D,KAIvD1D,EAAMG,cAAe9E,GAErBgF,EAAQC,EAAMC,IAEjB,CAmID,SAASoD,GAAc+C,IAEI,IAAlB1G,EAAM3D,UAA0C,IAArB2D,EAAM7C,YAAwBkD,IAAUC,EAAMC,OAE9EmG,EAAMiD,iBAEN3J,EAAMG,cAAe/E,GAnczB,SAA2BsL,GAEvBD,EAAuBC,GAElBA,EAAMf,OAAS,EAEhBa,EAAS1B,KAED4B,EAAMf,OAAS,GAEvBW,EAAUxB,KAId9E,EAAMI,QAET,CAqbGwJ,CAAkBlD,GAElB1G,EAAMG,cAAe9E,GAExB,CAED,SAASyE,GAAW4G,IAEO,IAAlB1G,EAAM3D,UAAyC,IAApB2D,EAAMzC,WA3b1C,SAAwBmJ,GAEpB,IAAImD,GAAc,EAElB,OAASnD,EAAMoD,MAEX,KAAK9J,EAAMlC,KAAKE,GAEP0I,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAEzC9D,EAAU,EAAIhY,KAAK6P,GAAKkD,EAAM1C,YAAc0C,EAAM/D,WAAW+J,cAI7DP,EAAK,EAAGzF,EAAMtC,aAIlBmM,GAAc,EACd,MAEJ,KAAK7J,EAAMlC,KAAKI,OAEPwI,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAEzC9D,GAAY,EAAIhY,KAAK6P,GAAKkD,EAAM1C,YAAc0C,EAAM/D,WAAW+J,cAI/DP,EAAK,GAAKzF,EAAMtC,aAIpBmM,GAAc,EACd,MAEJ,KAAK7J,EAAMlC,KAAKC,KAEP2I,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAEzC7H,EAAY,EAAIjU,KAAK6P,GAAKkD,EAAM1C,YAAc0C,EAAM/D,WAAW+J,cAI/DP,EAAKzF,EAAMtC,YAAa,GAI5BmM,GAAc,EACd,MAEJ,KAAK7J,EAAMlC,KAAKG,MAEPyI,EAAMmC,SAAWnC,EAAMoC,SAAWpC,EAAMqC,SAEzC7H,GAAc,EAAIjU,KAAK6P,GAAKkD,EAAM1C,YAAc0C,EAAM/D,WAAW+J,cAIjEP,GAAOzF,EAAMtC,YAAa,GAI9BmM,GAAc,EAKjBA,IAGDnD,EAAMiD,iBAEN3J,EAAMI,SAKb,CA+WG2J,CAAerD,EAElB,CA4ID,SAASlD,GAAekD,IAEG,IAAlB1G,EAAM3D,SAEXqK,EAAMiD,gBAET,CAyBD,SAASpB,GAAc7B,GAEnB,IAAItZ,EAAWyX,EAAiB6B,EAAMyB,gBAEpB1X,IAAbrD,IAEDA,EAAW,IAAI+W,EACfU,EAAiB6B,EAAMyB,WAAa/a,GAIxCA,EAAS9E,IAAKoe,EAAMY,MAAOZ,EAAMa,MAEpC,CAED,SAASO,GAA0BpB,GAE/B,MAAMsD,EAAYtD,EAAMyB,YAAcvD,EAAS,GAAGuD,UAAcvD,EAAS,GAAKA,EAAS,GAEvF,OAAOC,EAAiBmF,EAAQ7B,UAEnC,CAIDnI,EAAM/D,WAAWmM,iBAAkB,cAAe5E,IAElDxD,EAAM/D,WAAWmM,iBAAkB,cAAe3E,IAClDzD,EAAM/D,WAAWmM,iBAAkB,gBAAiB1E,IACpD1D,EAAM/D,WAAWmM,iBAAkB,QAASzE,GAAc,CAAEsG,SAAS,IAIrEriB,KAAKwY,QAER,EC12CE,MAAM8J,EAET,WAAAxiB,CAAYyiB,GACRviB,KAAKuiB,QAAUA,GAAW,aAE1BviB,KAAKwiB,oBAAsBzP,SAASC,cAAc,OAClDhT,KAAKyiB,WAAa1P,SAASC,cAAc,OACzChT,KAAK0iB,WAAa3P,SAASC,cAAc,OACzChT,KAAKwiB,oBAAoBG,UAAY,kBACrC3iB,KAAKyiB,WAAWE,UAAY,SAC5B3iB,KAAKwiB,oBAAoBjO,MAAMqO,QAAU,OACzC5iB,KAAK0iB,WAAWC,UAAY,UAC5B3iB,KAAK0iB,WAAWG,UAAY7iB,KAAKuiB,QACjCviB,KAAKwiB,oBAAoBvP,YAAYjT,KAAKyiB,YAC1CziB,KAAKwiB,oBAAoBvP,YAAYjT,KAAK0iB,YAC1C3P,SAAS1K,KAAK4K,YAAYjT,KAAKwiB,qBAE/B,MAAMjO,EAAQxB,SAASC,cAAc,SACrCuB,EAAMsO,UAAY,q1CA4ClB9P,SAAS+P,qBAAqB,QAAQ,GAAG7P,YAAYsB,EACxD,CAED,IAAAwO,GACI/iB,KAAKwiB,oBAAoBjO,MAAMqO,QAAU,OAC5C,CAED,IAAAI,GACIhjB,KAAKwiB,oBAAoBjO,MAAMqO,QAAU,MAC5C,CAED,UAAAK,CAAWC,GACPljB,KAAK0iB,WAAWG,UAAYK,CAC/B,ECzEE,MAAMC,UAAoBvkB,EAAMwkB,SAEnC,WAAAtjB,CAAYujB,EAAM,IAAIzkB,EAAMC,QAAQ,EAAG,EAAG,GAAIqc,EAAS,IAAItc,EAAMC,QAAQ,EAAG,EAAG,GAAI0K,EAAS,EAChFwQ,EAAS,GAAKxT,EAAQ,SAAU+c,EAAsB,GAAT/Z,EAAcga,EAA0B,GAAbD,GAChFhP,QAEAtU,KAAK2N,KAAO,cAEZ,MAAM6V,EAAe,IAAI5kB,EAAM6kB,iBAAiB1J,EAAQA,EAAQxQ,EAAQ,IACxEia,EAAaE,UAAU,EAAGna,EAAS,EAAK,GACxC,MAAMoa,EAAe,IAAI/kB,EAAM6kB,iBAAkB,EAAGF,EAAYD,EAAY,IAC5EK,EAAaD,UAAU,EAAGna,EAAQ,GAElCvJ,KAAKwF,SAASlB,KAAM4W,GAEpBlb,KAAKoL,KAAO,IAAIxM,EAAMglB,KAAKJ,EAAc,IAAI5kB,EAAMilB,kBAAkB,CAACtd,MAAOA,EAAOud,YAAY,KAChG9jB,KAAKoL,KAAK2Y,kBAAmB,EAC7B/jB,KAAK4Z,IAAI5Z,KAAKoL,MAEdpL,KAAKgkB,KAAO,IAAIplB,EAAMglB,KAAKD,EAAc,IAAI/kB,EAAMilB,kBAAkB,CAACtd,MAAOA,EAAOud,YAAY,KAChG9jB,KAAKgkB,KAAKD,kBAAmB,EAC7B/jB,KAAK4Z,IAAI5Z,KAAKgkB,MAEdhkB,KAAKikB,aAAaZ,EACrB,CAED,YAAAY,CAAcZ,GACV,GAAIA,EAAIpf,EAAI,OACRjE,KAAK0b,WAAWhb,IAAI,EAAG,EAAG,EAAG,QAC1B,GAAI2iB,EAAIpf,GAAM,OACjBjE,KAAK0b,WAAWhb,IAAI,EAAG,EAAG,EAAG,OAC1B,CACHwjB,MAAMxjB,IAAI2iB,EAAInf,EAAG,GAAImf,EAAIrf,GAAG+L,YAC5B,MAAMoU,EAAU9e,KAAK+e,KAAKf,EAAIpf,GAC9BjE,KAAK0b,WAAW2I,iBAAiBH,MAAOC,EAC3C,CACJ,CAED,QAAA7d,CAAUC,GACNvG,KAAKoL,KAAKkZ,SAAS/d,MAAM7F,IAAI6F,GAC7BvG,KAAKgkB,KAAKM,SAAS/d,MAAM7F,IAAI6F,EAChC,CAED,IAAAjC,CAAKigB,GAID,OAHAjQ,MAAMhQ,KAAKigB,GAAQ,GACnBvkB,KAAKoL,KAAK9G,KAAKigB,EAAOnZ,MACtBpL,KAAKgkB,KAAK1f,KAAKigB,EAAOP,MACfhkB,IACV,CAED,OAAA2b,GACI3b,KAAKoL,KAAKoZ,SAAS7I,UACnB3b,KAAKoL,KAAKkZ,SAAS3I,UACnB3b,KAAKgkB,KAAKQ,SAAS7I,UACnB3b,KAAKgkB,KAAKM,SAAS3I,SACtB,ECtDE,MAAM8I,EAET,WAAA3kB,CAAY4kB,EAAOC,GACf3kB,KAAK0kB,MAAQA,EACb1kB,KAAK2kB,YAAcA,EACnB3kB,KAAK4kB,WAAa,KAClB5kB,KAAK6kB,YAAc,KACnB7kB,KAAK8kB,aAAe,IACvB,CAED,eAAAC,GACI,IAAK/kB,KAAK4kB,WAAY,CAClB,MAAMjB,EAAe,IAAI/kB,EAAMomB,aAAa,GAAK,IAAK,IAChDC,EAAe,IAAIrmB,EAAMilB,kBAAkB,CAACtd,MAAO,WAEnD2e,EAAY,IAAItmB,EAAMglB,KAAKD,EAAcsB,GAC/CC,EAAU5hB,SAAS5C,IAAI,EAAG,EAAG2E,KAAK6P,IAClCgQ,EAAU1f,SAAS9E,IAAI,EAAG,EAAG,GAC7B,MAAMykB,EAAU,IAAIvmB,EAAMglB,KAAKD,EAAcsB,GAC7CE,EAAQ3f,SAAS9E,IAAI,GAAI,EAAG,GAC5B,MAAM0kB,EAAY,IAAIxmB,EAAMglB,KAAKD,EAAcsB,GAC/CG,EAAU9hB,SAAS5C,IAAI,EAAG,EAAG2E,KAAK6P,GAAK,GACvCkQ,EAAU5f,SAAS9E,IAAI,EAAG,EAAG,GAC7B,MAAM2kB,EAAa,IAAIzmB,EAAMglB,KAAKD,EAAcsB,GAChDI,EAAW/hB,SAAS5C,IAAI,EAAG,GAAI2E,KAAK6P,GAAK,GACzCmQ,EAAW7f,SAAS9E,KAAK,EAAG,EAAG,GAE/BV,KAAK4kB,WAAa,IAAIhmB,EAAMwkB,SAC5BpjB,KAAK4kB,WAAWhL,IAAIsL,GACpBllB,KAAK4kB,WAAWhL,IAAIuL,GACpBnlB,KAAK4kB,WAAWhL,IAAIwL,GACpBplB,KAAK4kB,WAAWhL,IAAIyL,GACpBrlB,KAAK4kB,WAAWvhB,MAAM3C,IAAI,GAAK,GAAK,IACpCV,KAAK2kB,YAAY/K,IAAI5Z,KAAK4kB,YAC1B5kB,KAAK4kB,WAAWU,SAAU,CAC7B,CACJ,CAED,iBAAAC,GACQvlB,KAAK4kB,aACL5kB,KAAK4kB,WAAWY,SAASC,SAASC,IAC9BA,EAAMlB,SAAS7I,UACf+J,EAAMpB,SAAS3I,SAAS,IAE5B3b,KAAK2kB,YAAYgB,OAAO3lB,KAAK4kB,YAC7B5kB,KAAK4kB,WAAa,KAEzB,CAED,uBAAAgB,CAAwBN,GACpBtlB,KAAK4kB,WAAWU,QAAUA,CAC7B,CAED,qBAAAO,CAAsBrgB,GAClBxF,KAAK4kB,WAAWpf,SAASlB,KAAKkB,EACjC,CAED,2BAAAsgB,CAA4BtgB,EAAUugB,GAClC/lB,KAAK4kB,WAAWpf,SAASlB,KAAKkB,GAC9BxF,KAAK4kB,WAAW/L,GAAGvU,KAAKyhB,EAAOlN,IAC/B7Y,KAAK4kB,WAAW1K,OAAO6L,EAAOvgB,SACjC,CAED,gBAAAwgB,GACI,IAAKhmB,KAAK6kB,YAAa,CACnB,MAAMoB,EAAiB,IAAIrnB,EAAMsnB,eAAe,GAAI,GAAI,IAClDC,EAAsB1B,EAAY2B,2BACxCD,EAAoBE,WAAY,EAChCF,EAAoBG,YAAa,EACjCH,EAAoBI,aAAc,EAClC,MAAMC,EAAa,IAAI5nB,EAAMglB,KAAKqC,EAAgBE,GAClDnmB,KAAK6kB,YAAc2B,CACtB,CACJ,CAEDC,kBAAoB,WAEhB,MAAMC,EAAe,IAAI9nB,EAAMC,QACzB8nB,EAAa,IAAI/nB,EAAMgF,QAE7B,OAAO,SAAS4B,EAAUugB,EAAQa,GAC9BD,EAAWriB,KAAKyhB,EAAOc,aAAa9N,SACpC2N,EAAapiB,KAAKkB,GAAUshB,aAAaH,GACzCD,EAAa3W,YAAYoK,eAAe,IACxCuM,EAAaI,aAAaf,EAAOc,aACjC7mB,KAAK6kB,YAAYrf,SAASlB,KAAKoiB,GAC/B1mB,KAAK6kB,YAAYP,SAASyC,SAASC,kBAAkBje,MAAMzE,KAAKkB,GAChExF,KAAK6kB,YAAYP,SAASyC,SAASH,SAAS7d,MAAMzE,KAAKsiB,GACvD5mB,KAAK6kB,YAAYP,SAAS2C,oBAAqB,CAC3D,CAEA,CAhBwB,GAkBpB,wBAAAC,CAAyB5B,GACrBtlB,KAAK6kB,YAAYS,QAAUA,CAC9B,CAED,qBAAA6B,CAAsBjZ,GAClBlO,KAAK6kB,YAAYP,SAASyC,SAAS7Y,QAAQnF,MAAQmF,EACnDlO,KAAK6kB,YAAYP,SAAS2C,oBAAqB,CAClD,CAED,qBAAAG,GACI,OAAOpnB,KAAK6kB,YAAYP,SAASyC,SAAS7Y,QAAQnF,KACrD,CAED,iBAAAse,GACI,MAAMC,EAAgB,IAAI1oB,EAAM2oB,cAAc,EAAG,GACjDD,EAAcE,SAASniB,KAAK6P,GAAK,GACjC,MAAMuS,EAAgB,IAAI7oB,EAAMilB,kBAAkB,CAACtd,MAAO,WAC1DkhB,EAAclB,aAAc,EAC5BkB,EAAcvZ,QAAU,GACxBuZ,EAAcpB,WAAY,EAC1BoB,EAAcnB,YAAa,EAC3BmB,EAAcC,KAAO9oB,EAAM+oB,WAC3B,MAAMC,EAAY,IAAIhpB,EAAMglB,KAAK0D,EAAeG,GAE1CI,EAAW,IAAIjpB,EAAMC,QAAQ,EAAG,EAAG,GACzCgpB,EAAS9X,YACT,MAAM+X,EAAc,IAAIlpB,EAAMC,QAAQ,EAAG,EAAG,GAItCkpB,EAAc,IAAI5E,EAAY0E,EAAUC,EAH1B,GACA,IACD,MAC8E,GAAK,KAEtG9nB,KAAK8kB,aAAe,IAAIlmB,EAAMwkB,SAC9BpjB,KAAK8kB,aAAalL,IAAIgO,GACtB5nB,KAAK8kB,aAAalL,IAAImO,EACzB,CAED,yBAAAC,CAA0B1C,GACtBtlB,KAAK8kB,aAAaQ,QAAUA,CAC/B,CAED2C,8BAAgC,WAE5B,MAAMC,EAAiB,IAAItpB,EAAMO,WAC3BgpB,EAAY,IAAIvpB,EAAMC,QAAQ,EAAG,EAAG,GAE1C,OAAO,SAAS2G,EAAUqT,GACtBqP,EAAetP,mBAAmBuP,EAAWtP,GAC7C7Y,KAAK8kB,aAAatf,SAASlB,KAAKkB,GAChCxF,KAAK8kB,aAAapJ,WAAWpX,KAAK4jB,EAC9C,CAEA,CAXoC,GAahC,cAAAE,GACIpoB,KAAKqoB,UAAYroB,KAAKsoB,oBACtBtoB,KAAKuoB,mBAAqBvoB,KAAKwoB,6BAC/BxoB,KAAK2kB,YAAY/K,IAAI5Z,KAAKqoB,WAC1BroB,KAAK2kB,YAAY/K,IAAI5Z,KAAKuoB,mBAC7B,CAED,iBAAAD,CAAkBG,GACd,MAAMxC,EAAiB,IAAIrnB,EAAMsnB,eAAe,EAAG,GAAI,IACjDwC,EAAgB,IAAI9pB,EAAMwkB,SAE1BuF,EAAa,CAACpiB,EAAOf,KACvB,IAAIghB,EAAa,IAAI5nB,EAAMglB,KAAKqC,EAAgBxB,EAAYmE,mBAAmBriB,IAC/EigB,EAAWiC,YAAcA,EACzBC,EAAc9O,IAAI4M,GAClBA,EAAWhhB,SAAS4J,UAAU5J,EAAS,EAS3C,OANAmjB,EAAW,SAAU,EAAE,GAAI,EAAG,IAC9BA,EAAW,SAAU,CAAC,GAAI,EAAG,IAC7BA,EAAW,MAAU,CAAC,EAAG,GAAI,KAC7BA,EAAW,MAAU,CAAC,EAAG,EAAG,KAC5BA,EAAW,SAAU,CAAC,EAAG,EAAG,IAErBD,CACV,CAED,0BAAAF,CAA2BC,GACvB,MAAMI,EAAc,IAAIjqB,EAAMkqB,YAAY,EAAG,EAAG,GAC1CJ,EAAgB,IAAI9pB,EAAMwkB,SAGhC,MAAMuF,EAAcnjB,IAChB,IAAIujB,EAAU,IAAInqB,EAAMglB,KAAKiF,EAAapE,EAAYmE,mBAF3C,WAGXG,EAAQN,YAAcA,EACtBC,EAAc9O,IAAImP,GAClBA,EAAQvjB,SAAS4J,UAAU5J,EAAS,EAGxC,IAAIwjB,EAAa,GAMjB,OALAL,EAAW,EAAC,GAAa,GAAG,KAC5BA,EAAW,EAAC,GAAa,EAAGK,IAC5BL,EAAW,CAACK,EAAY,GAAG,KAC3BL,EAAW,CAACK,EAAY,EAAGA,IAEpBN,CACV,CAED,yBAAOE,CAAmBriB,GACtB,MAyBMwgB,EAAW,CACbxgB,MAAS,CACLoH,KAAQ,KACR5E,MAAS,IAAInK,EAAMqqB,MAAM1iB,KAI3B+d,EAAW,IAAI1lB,EAAMsqB,eAAe,CACtCnC,SAAUA,EACVoC,aAlCuB,gfAmCvBC,eApByB,0QAqBzB7C,aAAa,EACbF,WAAW,EACXC,YAAY,EACZoB,KAAM9oB,EAAMyqB,YAIhB,OAFA/E,EAASgF,WAAWC,WAAY,EAEzBjF,CACV,CAED,+BAAO8B,CAAyB7f,GAC5B,MA2DMwgB,EAAW,CACbxgB,MAAS,CACLoH,KAAQ,KACR5E,MAAS,IAAInK,EAAMqqB,MAAM1iB,IAE7BygB,kBAAqB,CACjBrZ,KAAQ,KACR5E,MAAS,IAAInK,EAAMC,SAEvB+nB,SAAY,CACRjZ,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,SAEvBrO,QAAW,CACPnF,MAAS,IAcjB,OAViB,IAAInK,EAAMsqB,eAAe,CACtCnC,SAAUA,EACVoC,aA/EuB,ujCAgFvBC,eAjDyB,27BAkDzB7C,aAAa,EACbF,WAAW,EACXC,YAAY,EACZoB,KAAM9oB,EAAMyqB,WAInB,EC5UL,MAAMG,EAAc,IAAI5qB,EAAMC,QAAQ,EAAG,EAAG,GACtC4qB,EAAW,IAAI7qB,EAAMC,QAAQ,EAAG,EAAG,GACnC6qB,EAAiB,IAAI9qB,EAAMC,QAAQ,EAAG,EAAG,GAExC,MAAM8U,EAET,WAAA7T,CAAYob,EAAS,IAAItc,EAAMC,QAAWsc,EAAY,IAAIvc,EAAMC,SAC5DmB,KAAKkb,OAAS,IAAItc,EAAMC,QACxBmB,KAAKmb,UAAY,IAAIvc,EAAMC,QAC3BmB,KAAK2pB,cAAczO,EAAQC,EAC9B,CAED,aAAAwO,CAAczO,EAAQC,GAClBnb,KAAKkb,OAAO5W,KAAK4W,GACjBlb,KAAKmb,UAAU7W,KAAK6W,GAAWpL,WAClC,CAED,gBAAA6Z,CAAiBC,EAAKC,EAAOC,GACzB,QAAOD,EAAM9lB,EAAI6lB,EAAIjgB,IAAI5F,EAAI+lB,GAAWD,EAAM9lB,EAAI6lB,EAAIhgB,IAAI7F,EAAI+lB,GACvDD,EAAM7lB,EAAI4lB,EAAIjgB,IAAI3F,EAAI8lB,GAAWD,EAAM7lB,EAAI4lB,EAAIhgB,IAAI5F,EAAI8lB,GACvDD,EAAM5lB,EAAI2lB,EAAIjgB,IAAI1F,EAAI6lB,GAAWD,EAAM5lB,EAAI2lB,EAAIhgB,IAAI3F,EAAI6lB,EACjE,CAEDC,aAAe,WAEX,MAAMC,EAAyB,IAAIrrB,EAAMC,QACnCqrB,EAA8B,GAC9BC,EAAc,GACdC,EAAiB,GAEvB,OAAO,SAASP,EAAKQ,GASjB,GAPAF,EAAY,GAAKnqB,KAAKkb,OAAOlX,EAC7BmmB,EAAY,GAAKnqB,KAAKkb,OAAOjX,EAC7BkmB,EAAY,GAAKnqB,KAAKkb,OAAOhX,EAC7BkmB,EAAe,GAAKpqB,KAAKmb,UAAUnX,EACnComB,EAAe,GAAKpqB,KAAKmb,UAAUlX,EACnCmmB,EAAe,GAAKpqB,KAAKmb,UAAUjX,EAE/BlE,KAAK4pB,iBAAiBC,EAAK7pB,KAAKkb,OAAQ,MAMxC,OALImP,IACAA,EAAOnP,OAAO5W,KAAKtE,KAAKkb,QACxBmP,EAAOC,OAAO5pB,IAAI,EAAG,EAAG,GACxB2pB,EAAO7M,UAAY,IAEhB,EAGX,IAAK,IAAI3Z,EAAI,EAAGA,EAAI,EAAGA,IAAK,CACxB,GAAyB,GAArBumB,EAAevmB,GAAW,SAE9B,MAAM0mB,EAAiB,GAAL1mB,EAAS2lB,EAAmB,GAAL3lB,EAAS4lB,EAAWC,EACvDc,EAAaJ,EAAevmB,GAAK,EAAIgmB,EAAIhgB,IAAMggB,EAAIjgB,IACzD,IAAI6gB,GAAcplB,KAAKqlB,KAAKN,EAAevmB,IAC3CqmB,EAA4B,GAAU,GAALrmB,EAAS2mB,EAAWxmB,EAAS,GAALH,EAAS2mB,EAAWvmB,EAAIumB,EAAWtmB,EAC5F,IAAIymB,EAAST,EAA4B,GAAKC,EAAYtmB,GAE1D,GAAI8mB,EAASF,EAAa,EAAG,CACzB,MAAMG,GAAQ/mB,EAAI,GAAK,EACjBgnB,GAAQhnB,EAAI,GAAK,EAMvB,GALAqmB,EAA4B,GAAKE,EAAeQ,GAAQR,EAAevmB,GAAK8mB,EAASR,EAAYS,GACjGV,EAA4B,GAAKE,EAAeS,GAAQT,EAAevmB,GAAK8mB,EAASR,EAAYU,GACjGZ,EAAuBvpB,IAAIwpB,EAA4BrmB,GAC5BqmB,EAA4BW,GAC5BX,EAA4BU,IACnD5qB,KAAK4pB,iBAAiBC,EAAKI,EAAwB,MAMnD,OALII,IACAA,EAAOnP,OAAO5W,KAAK2lB,GACnBI,EAAOC,OAAOhmB,KAAKimB,GAAWpQ,eAAesQ,GAC7CJ,EAAO7M,SAAWyM,EAAuB7Z,IAAIpQ,KAAKkb,QAAQ3R,WAEvD,CAEd,CACJ,CAED,OAAO,CACnB,CAEA,CAxDmB,GA0DfuhB,gBAAkB,WAEd,MAAMC,EAAoB,IAAInsB,EAAMC,QAEpC,OAAO,SAASwQ,EAAQ0K,EAAQsQ,GAC5BU,EAAkBzmB,KAAK+K,GAAQe,IAAIpQ,KAAKkb,QACxC,MAAM8P,EAAoBD,EAAkB1P,IAAIrb,KAAKmb,WAC/C8P,EAAsBD,EAAoBA,EAE1CE,EADmBH,EAAkB1P,IAAI0P,GACbE,EAC5BE,EAAWpR,EAASA,EAE1B,GAAImR,EAASC,EAAU,OAAO,EAE9B,MAAMC,EAAM/lB,KAAK2a,KAAKmL,EAAWD,GAC3BG,EAAKL,EAAoBI,EACzBE,EAAKN,EAAoBI,EAE/B,GAAIE,EAAK,EAAG,OAAO,EACnB,IAAIC,EAAIF,EAAK,EAAIC,EAAKD,EAOtB,OALIhB,IACAA,EAAOnP,OAAO5W,KAAKtE,KAAKkb,QAAQxB,gBAAgB1Z,KAAKmb,UAAWoQ,GAChElB,EAAOC,OAAOhmB,KAAK+lB,EAAOnP,QAAQ9K,IAAIf,GAAQU,YAC9Csa,EAAO7M,SAAW+N,IAEf,CACnB,CAEA,CA7BsB,GCjFf,MAAMC,EAET,WAAA1rB,GACIE,KAAKkb,OAAS,IAAItc,EAAMC,QACxBmB,KAAKsqB,OAAS,IAAI1rB,EAAMC,QACxBmB,KAAKwd,SAAW,CACnB,CAED,GAAA9c,CAAIwa,EAAQoP,EAAQ9M,GAChBxd,KAAKkb,OAAO5W,KAAK4W,GACjBlb,KAAKsqB,OAAOhmB,KAAKgmB,GACjBtqB,KAAKwd,SAAWA,CACnB,CAED,KAAArG,GACI,MAAMsU,EAAW,IAAID,EAIrB,OAHAC,EAASvQ,OAAO5W,KAAKtE,KAAKkb,QAC1BuQ,EAASnB,OAAOhmB,KAAKtE,KAAKsqB,QAC1BmB,EAASjO,SAAWxd,KAAKwd,SAClBiO,CACV,EClBE,MAAMC,EAET,WAAA5rB,CAAYob,EAAQC,GAChBnb,KAAK2rB,IAAM,IAAIhY,EAAIuH,EAAQC,EAC9B,CAEDyQ,+BAAiC,WAE7B,MAAMC,EAAY,IAAIjtB,EAAM2d,QAE5B,OAAO,SAASwJ,EAAQ+F,EAAgBC,GAGpC,GAFAF,EAAU7nB,EAAI8nB,EAAe9nB,EAAI+nB,EAAiB/nB,EAAI,EAAM,EAC5D6nB,EAAU5nB,GAAK8nB,EAAiB9nB,EAAI6nB,EAAe7nB,GAAK8nB,EAAiB9nB,EAAI,EAAM,EAC/E8hB,EAAOzL,oBACPta,KAAK2rB,IAAIzQ,OAAO8Q,sBAAsBjG,EAAOc,aAC7C7mB,KAAK2rB,IAAIxQ,UAAUza,IAAImrB,EAAU7nB,EAAG6nB,EAAU5nB,EAAG,IAAM4W,UAAUkL,GAAQ3V,IAAIpQ,KAAK2rB,IAAIzQ,QAAQnL,YAC9F/P,KAAK+lB,OAASA,MACX,KAAIA,EAAOjM,qBAMd,MAAM,IAAIlP,MAAM,0EALhB5K,KAAK2rB,IAAIzQ,OAAOxa,IAAIorB,EAAe9nB,EAAG8nB,EAAe7nB,GACjC8hB,EAAOkG,KAAOlG,EAAOmG,MAAQnG,EAAOkG,KAAOlG,EAAOmG,MAAMrR,UAAUkL,GACtF/lB,KAAK2rB,IAAIxQ,UAAUza,IAAI,EAAG,GAAI,GAAGsa,mBAAmB+K,EAAOc,aAC3D7mB,KAAK+lB,OAASA,CAGjB,CACb,CAEA,CArBqC,GAuBjCoG,mBAAqB,WAEjB,MAAMC,EAAU,IAAIxtB,EAAMgF,QACpByoB,EAAY,IAAIztB,EAAMgF,QACtB0oB,EAAW,IAAI3Y,EAErB,OAAO,SAAS4Y,EAAWC,EAAU,IACjCH,EAAU/nB,KAAKioB,EAAU1F,aACzBuF,EAAQ9nB,KAAK+nB,GAAWtT,SACxBuT,EAASpR,OAAO5W,KAAKtE,KAAK2rB,IAAIzQ,QAAQ4L,aAAasF,GACnDE,EAASnR,UAAU7W,KAAKtE,KAAK2rB,IAAIxQ,WAAWH,mBAAmBoR,GAE/D,MAAMK,EAAYF,EAAUG,eAY5B,OAXID,EAAUE,UACV3sB,KAAK4sB,uBAAuBN,EAAUG,EAAWA,EAAUE,SAAUH,GAEzEA,EAAQK,MAAK,CAACC,EAAG3d,IACT2d,EAAEtP,SAAWrO,EAAEqO,SAAiB,GACvB,IAEjBgP,EAAQ/G,SAASsH,IACbA,EAAI7R,OAAO4L,aAAauF,GACxBU,EAAIzC,OAAOtP,mBAAmBqR,EAAU,IAErCG,CACnB,CAEA,CA3ByB,GA6BrBI,uBAAyB,WAErB,MAAMlG,EAAe,IAAI9nB,EAAMC,QACzBmuB,EAAY,IAAIpuB,EAAMC,QACtBouB,EAAe,IAAIruB,EAAMO,WACzB+tB,EAAU,IAAI1B,EAYpB,OAAO,SAASG,EAAKc,EAAWU,EAAMX,EAAU,IAC5C,GAAKb,EAAI3B,aAAamD,EAAKC,aAA3B,CAGA,GAAID,EAAKhlB,KAAKklB,SAAWF,EAAKhlB,KAAKklB,QAAQ9jB,OAAS,EAChD,IAAK,IAAI1F,EAAI,EAAGA,EAAIspB,EAAKhlB,KAAKklB,QAAQ9jB,OAAQ1F,IAAK,CAC/C,MAAMypB,EAAaH,EAAKhlB,KAAKklB,QAAQxpB,GACrC4oB,EAAUxb,YAAYpM,YAAYyoB,EAAY5G,GAC9C+F,EAAUxb,YAAYlL,YAAYunB,EAAYL,GAC9CR,EAAUxb,YAAYrL,SAAS0nB,EAAYN,GAG3C,MAAMjT,EAAS1U,KAAKwE,IAAIxE,KAAKwE,IAAImjB,EAAUhpB,EAAGgpB,EAAU/oB,GAAI+oB,EAAU9oB,GAClEynB,EAAIb,gBAAgBpE,EAAc3M,EAAQmT,IAC1CV,EAAQ/iB,KAAKyjB,EAAQ/V,QAoB5B,CAEL,GAAIgW,EAAK3H,UAAY2H,EAAK3H,SAASjc,OAAS,EACxC,IAAK,IAAImc,KAASyH,EAAK3H,SACnBxlB,KAAK4sB,uBAAuBjB,EAAKc,EAAW/G,EAAO8G,GAG3D,OAAOA,CAtCN,CAuCb,CAEA,CA7D6B,GC5D7B,IAAIe,EAAQ,EAEL,MAAMC,EAET,WAAA1tB,CAAY8J,EAAKC,EAAK4jB,EAAOC,GACzB1tB,KAAK4J,KAAM,IAAIhL,EAAMC,SAAUyF,KAAKsF,GACpC5J,KAAK6J,KAAM,IAAIjL,EAAMC,SAAUyF,KAAKuF,GACpC7J,KAAKotB,YAAc,IAAIxuB,EAAM+uB,KAAK3tB,KAAK4J,IAAK5J,KAAK6J,KACjD7J,KAAKqP,QAAS,IAAIzQ,EAAMC,SAAUyF,KAAKtE,KAAK6J,KAAKuG,IAAIpQ,KAAK4J,KAAKuQ,eAAe,IAAKP,IAAI5Z,KAAK4J,KAC5F5J,KAAKytB,MAAQA,EACbztB,KAAKwlB,SAAW,GAChBxlB,KAAKmI,KAAO,KACZnI,KAAK0tB,GAAKA,GAAMH,GACnB,ECZE,MAAMK,EAET,WAAA9tB,CAAY+tB,EAAUC,GAClB9tB,KAAK6tB,SAAWA,EAChB7tB,KAAK8tB,oBAAsBA,EAC3B9tB,KAAKiR,YAAc,KACnBjR,KAAK+tB,gBAAkB,IAAInvB,EAAMC,QACjCmB,KAAKguB,SAAW,IAAIpvB,EAAMC,QAC1BmB,KAAKiuB,SAAW,IAAIrvB,EAAMC,QAC1BmB,KAAK2sB,SAAW,KAChB3sB,KAAKkuB,aAAe,GACpBluB,KAAKmuB,iBAAmB,EAC3B,CAED,kBAAAC,CAAmBnd,EAAaod,EAAa,MAAM,IAC/CruB,KAAKiR,YAAcA,EACnBjR,KAAKkuB,aAAe,GACpBluB,KAAKmuB,iBAAmB,GACxB,MAAMptB,EAAakQ,EAAYxK,gBAEzBjB,EAAW,IAAI5G,EAAMC,QAC3B,IAAK,IAAIgF,EAAI,EAAGA,EAAI9C,EAAY8C,IACxBwqB,EAAWxqB,KACXoN,EAAYpM,YAAYhB,EAAG2B,IACjB,IAAN3B,GAAW2B,EAASxB,EAAIhE,KAAKguB,SAAShqB,KAAGhE,KAAKguB,SAAShqB,EAAIwB,EAASxB,IAC9D,IAANH,GAAW2B,EAASxB,EAAIhE,KAAKiuB,SAASjqB,KAAGhE,KAAKiuB,SAASjqB,EAAIwB,EAASxB,IAC9D,IAANH,GAAW2B,EAASvB,EAAIjE,KAAKguB,SAAS/pB,KAAGjE,KAAKguB,SAAS/pB,EAAIuB,EAASvB,IAC9D,IAANJ,GAAW2B,EAASvB,EAAIjE,KAAKiuB,SAAShqB,KAAGjE,KAAKiuB,SAAShqB,EAAIuB,EAASvB,IAC9D,IAANJ,GAAW2B,EAAStB,EAAIlE,KAAKguB,SAAS9pB,KAAGlE,KAAKguB,SAAS9pB,EAAIsB,EAAStB,IAC9D,IAANL,GAAW2B,EAAStB,EAAIlE,KAAKiuB,SAAS/pB,KAAGlE,KAAKiuB,SAAS/pB,EAAIsB,EAAStB,IAIhFlE,KAAK+tB,gBAAgBzpB,KAAKtE,KAAKguB,UAAU5d,IAAIpQ,KAAKguB,UAElD,MAAMX,EAAU,GAChB,IAAK,IAAIxpB,EAAI,EAAGA,EAAI9C,EAAY8C,IACxBwqB,EAAWxqB,IACXwpB,EAAQ5jB,KAAK5F,GAGrB7D,KAAK2sB,SAAW,IAAIa,EAAcxtB,KAAKguB,SAAUhuB,KAAKiuB,SAAU,GAChEjuB,KAAK2sB,SAASxkB,KAAO,CACjBklB,QAAWA,GAEfrtB,KAAKsuB,YAAYtuB,KAAK2sB,SAAU1b,EACnC,CAED,WAAAqd,CAAYnB,EAAMlc,GACd,MAAMlQ,EAAaosB,EAAKhlB,KAAKklB,QAAQ9jB,OAErC,GAAIxI,EAAaf,KAAK8tB,qBAAuBX,EAAKM,MAAQztB,KAAK6tB,SAAU,CACrE,MAAMU,EAAa,GACnB,IAAK,IAAI1qB,EAAI,EAAGA,EAAIspB,EAAKhlB,KAAKklB,QAAQ9jB,OAAQ1F,IACrC7D,KAAKkuB,aAAaf,EAAKhlB,KAAKklB,QAAQxpB,MACrC0qB,EAAW9kB,KAAK0jB,EAAKhlB,KAAKklB,QAAQxpB,IAClC7D,KAAKkuB,aAAaf,EAAKhlB,KAAKklB,QAAQxpB,KAAM,GAKlD,OAFAspB,EAAKhlB,KAAKklB,QAAUkB,OACpBvuB,KAAKmuB,iBAAiB1kB,KAAK0jB,EAE9B,CAED,MAAMqB,GAAiB,IAAI5vB,EAAMC,SAAUyF,KAAK6oB,EAAKtjB,KAAKuG,IAAI+c,EAAKvjB,KAC7D6kB,GAAiB,IAAI7vB,EAAMC,SAAUyF,KAAKkqB,GAAgBrU,eAAe,IAEzEuU,GAAa,IAAI9vB,EAAMC,SAAUyF,KAAK6oB,EAAKvjB,KAAKgQ,IAAI6U,GAEpDE,EAAiB,CAEnB,IAAI/vB,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,GAC/F,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,IAC3F,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,GAC5E,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,IAC9G,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,GACzD,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAC9B0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,IAChG,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,GAC5E,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,IAG9G,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAC9B0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,GACjF,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,IACxE,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,GAC/F,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,IAC3F,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,GAC5E,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,IAC9G,IAAItF,EAAM+uB,KAAK,IAAI/uB,EAAMC,QAAQ6vB,EAAW1qB,EAAIyqB,EAAezqB,EAAG0qB,EAAWzqB,EAAIwqB,EAAexqB,EAAGyqB,EAAWxqB,GAC/F,IAAItF,EAAMC,QAAQ6vB,EAAW1qB,EAAG0qB,EAAWzqB,EAAGyqB,EAAWxqB,EAAIuqB,EAAevqB,KAGzF0qB,EAAc,GACdC,EAAc,GACpB,IAAK,IAAIhrB,EAAI,EAAGA,EAAI8qB,EAAeplB,OAAQ1F,IACvC+qB,EAAY/qB,GAAK,EACjBgrB,EAAYhrB,GAAK,GAGrB,MAAM2B,EAAW,IAAI5G,EAAMC,QAC3B,IAAK,IAAIgF,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK,CACjC,MAAMypB,EAAaH,EAAKhlB,KAAKklB,QAAQxpB,GACrCoN,EAAYpM,YAAYyoB,EAAY9nB,GACpC,IAAK,IAAIspB,EAAI,EAAGA,EAAIH,EAAeplB,OAAQulB,IACnCH,EAAeG,GAAGC,cAAcvpB,KAChCopB,EAAYE,KACZD,EAAYC,GAAGrlB,KAAK6jB,GAG/B,CAED,IAAK,IAAIzpB,EAAI,EAAGA,EAAI8qB,EAAeplB,OAAQ1F,IAAK,CAC5C,MAAMmrB,EAAY,IAAIxB,EAAcmB,EAAe9qB,GAAG+F,IAAK+kB,EAAe9qB,GAAGgG,IAAKsjB,EAAKM,MAAQ,GAC/FuB,EAAU7mB,KAAO,CACbklB,QAAWwB,EAAYhrB,IAE3BspB,EAAK3H,SAAS/b,KAAKulB,EACtB,CAED7B,EAAKhlB,KAAO,GACZ,IAAK,IAAIud,KAASyH,EAAK3H,SACnBxlB,KAAKsuB,YAAY5I,EAAOzU,EAE/B,CAGD,WAAAge,GAEI,IAAIC,EAAY,EAKhB,OAJAlvB,KAAKmvB,aAAY,KACbD,GAAW,IAGRA,CACV,CAED,WAAAC,CAAYC,GAER,MAAMC,EAAsB,CAAClC,EAAMiC,KACF,IAAzBjC,EAAK3H,SAASjc,QAAc6lB,EAAUjC,GAC1C,IAAK,IAAIzH,KAASyH,EAAK3H,SACnB6J,EAAoB3J,EAAO0J,EAC9B,EAGL,OAAOC,EAAoBrvB,KAAK2sB,SAAUyC,EAC7C,EClJE,MAAME,UAAkB1wB,EAAMglB,KAEjC,gBAAO2L,CAAUte,EAAaue,EAA6B,EAAGC,GAAgC,EAAOC,EAAmB,GACpH,MAAMlL,EAAW8K,EAAUK,cAAc1e,GACnCqT,EAAWgL,EAAUM,gBAC3B,OAAO,IAAIN,EAAUre,EAAauT,EAAUF,EAAUkL,EAA4BC,EAA+BC,EACpH,CAED,WAAA5vB,CAAYmR,EAAauT,EAAUF,EAAUkL,EAA6B,EAC9DC,GAAgC,EAAOC,EAAmB,GAClEpb,MAAMkQ,EAAUF,GAChBtkB,KAAKiR,YAAcA,EACnBjR,KAAKwkB,SAAWA,EAChBxkB,KAAKskB,SAAWA,EAChBtkB,KAAKysB,UAAY,KACjBzsB,KAAK6vB,kBAAoB,KACzB7vB,KAAKwvB,2BAA6BA,EAClCxvB,KAAKyvB,8BAAgCA,EACrCzvB,KAAK0vB,iBAAmBA,EACxB1vB,KAAK8vB,iBACL9vB,KAAK+vB,+CACR,CAED,oBAAOH,GAEH,MAmIM7I,EAAW,CACbiJ,mBAAsB,CAClBriB,KAAQ,IACR5E,MAAS,MAEbknB,qBAAwB,CACpBtiB,KAAQ,IACR5E,MAAS,MAEbmnB,MAAS,CACLviB,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,SAEvBqK,SAAY,CACRjZ,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,SAEvB4T,cAAiB,CACbxiB,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,SAEvB6T,WAAc,CACVziB,KAAQ,KACR5E,MAAS,IAAInK,EAAMqqB,OAEvBoH,uBAA0B,CACtB1iB,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,QAAQ,KAAM,OAErC+T,yBAA4B,CACxB3iB,KAAQ,KACR5E,MAAS,IAAInK,EAAM2d,QAAQ,KAAM,QAgBzC,OAZiB,IAAI3d,EAAMsqB,eAAe,CACtCnC,SAAUA,EACVoC,aAxKuB,0tLAyKvBC,eA3DyB,yoBA4DzB7C,aAAa,EACbgK,UAAW,EACXC,SAAU5xB,EAAM6xB,eAChBpK,WAAW,EACXC,YAAY,EACZoB,KAAM9oB,EAAM+oB,YAInB,CAED,oBAAOgI,CAAc1e,GAEjB,MAAMlQ,EAAakQ,EAAYxK,gBAEzBiqB,EAAe,IAAI9xB,EAAM+xB,eAC/BD,EAAaE,SAAS,CAAC,EAAG,EAAG,EAAG,EAAG,EAAG,IAEtC,MAAMC,EAAiB,IAAIpwB,aAAa,IAClC0Q,EAAY,IAAIvS,EAAMkyB,gBAAgBD,EAAgB,GAC5DH,EAAaK,aAAa,WAAY5f,GACtCA,EAAU6f,OAAO,GAAI,GAAM,EAAK,GAChC7f,EAAU6f,OAAO,GAAI,EAAK,EAAK,GAC/B7f,EAAU6f,OAAO,EAAG,EAAK,EAAK,GAC9B7f,EAAU6f,OAAO,EAAG,GAAM,EAAK,GAC/B7f,EAAU8Q,aAAc,EAExB,MAAMuC,GAAW,IAAI5lB,EAAMqyB,yBAA0B3sB,KAAKosB,GAEpDQ,EAAkB,IAAI3wB,YAAYQ,GAClCowB,EAAe,IAAIvyB,EAAMwyB,yBAAyBF,EAAiB,GAAG,GAM5E,OALAC,EAAaE,SAASzyB,EAAM0yB,kBAC5B9M,EAASuM,aAAa,aAAcI,GAEpC3M,EAAS+M,cAAgBxwB,EAElByjB,CACV,CAED,cAAAsL,GAEI9vB,KAAKysB,UAAY,IAAImB,EAAU,GAAI,KACnCnjB,QAAQ+mB,KAAK,mBACb,MAAMC,EAAa,IAAI7yB,EAAMI,QAC7BgB,KAAKysB,UAAU2B,mBAAmBpuB,KAAKiR,aAAcqc,IACjDttB,KAAKiR,YAAY9K,SAASmnB,EAAYmE,GAC/BA,EAAWvrB,EAAIlG,KAAKwvB,8BAE/B/kB,QAAQinB,QAAQ,mBAEhB,IAAIC,EAAqB,EACrBC,EAAgB,EAChBC,EAAgB,EAChBC,EAAY,EAEhB9xB,KAAKysB,UAAU0C,aAAahC,IACxB,MAAM4E,EAAiB5E,EAAKhlB,KAAKklB,QAAQ9jB,OACrCwoB,EAAiB,IACjBH,GAAiBG,EACjBF,EAAgBxsB,KAAKwE,IAAIgoB,EAAeE,GACxCD,IACAH,IACH,IAELlnB,QAAQC,IAAI,qBAAqB1K,KAAKysB,UAAUwC,iBAChDxkB,QAAQC,IAAI,gCAAgCinB,KAC5CC,GAAgCE,EAChCrnB,QAAQC,IAAI,6BAA6BknB,IAC5C,CAED,YAAAlF,GACI,OAAO1sB,KAAKysB,SACf,CAED,6CAAAsD,GACI/vB,KAAKgyB,sCACLhyB,KAAKiyB,0CACR,CAED,mCAAAD,GACI,MAAMjxB,EAAaf,KAAKiR,YAAYxK,gBACpCzG,KAAKkyB,YAAc,IAAIzxB,aAAaT,KAAKiR,YAAYzK,sCACrDxG,KAAKmyB,OAAS,IAAI9xB,WAAwB,EAAbU,GAC7Bf,KAAKoyB,QAAU,IAAI3xB,aAA0B,EAAbM,GAChCf,KAAKiR,YAAYvK,kBAAkB1G,KAAKoyB,SACxCpyB,KAAKiR,YAAYjK,eAAehH,KAAKmyB,OACxC,CAED,wCAAAF,GACI,MAEMlxB,EAAaf,KAAKiR,YAAYxK,gBAE9B4pB,EAAyB,IAAIzxB,EAAM2d,QAAQ,KAAM,MACvD,KAAO8T,EAAuBrsB,EAAIqsB,EAAuBpsB,EALlB,EAKoE,EAAblD,GAC1FsvB,EAAuBpsB,GAAK,EAGhC,MAAMqsB,EAA2B,IAAI1xB,EAAM2d,QAAQ,KAAM,MACzD,KAAO+T,EAAyBtsB,EAAIssB,EAAyBrsB,EATpB,EASwE,EAAblD,GAChGuvB,EAAyBrsB,GAAK,EAGlC,IAAI+rB,EACAqC,EACJ,GAAIryB,KAAKyvB,8BAA+B,CACpC4C,EAAoB,IAAIjwB,YAAYiuB,EAAuBrsB,EAAIqsB,EAAuBpsB,EAjBnD,GAkBnC,IAAK,IAAIJ,EAAI,EAAGA,EAAI7D,KAAKkyB,YAAY3oB,OAAQ1F,IACzCwuB,EAAkBxuB,GAAKjF,EAAMmE,UAAUE,YAAYjD,KAAKkyB,YAAYruB,IAExEmsB,EAAqB,IAAIpxB,EAAM0zB,YAAYD,EAAmBhC,EAAuBrsB,EAC1CqsB,EAAuBpsB,EAAGrF,EAAM2zB,SAAU3zB,EAAM4zB,cACvG,MACYH,EAAoB,IAAI5xB,aAAa4vB,EAAuBrsB,EAAIqsB,EAAuBpsB,EAxBpD,GAyBnCouB,EAAkB3xB,IAAIV,KAAKkyB,aAC3BlC,EAAqB,IAAIpxB,EAAM0zB,YAAYD,EAAmBhC,EAAuBrsB,EAC1CqsB,EAAuBpsB,EAAGrF,EAAM2zB,SAAU3zB,EAAM6zB,WAE/FzC,EAAmB/N,aAAc,EACjCjiB,KAAKskB,SAASyC,SAASiJ,mBAAmBjnB,MAAQinB,EAClDhwB,KAAKskB,SAASyC,SAASsJ,uBAAuBtnB,MAAMzE,KAAK+rB,GAEzD,MAAMqC,EAAqB,IAAInyB,YAAY+vB,EAAyBtsB,EACzBssB,EAAyBrsB,EAjC3B,GAkCzC,IAAK,IAAI0uB,EAAI,EAAGA,EAAI5xB,EAAY4xB,IAAK,CACjC,MAAMC,EAAiB,EAAJD,EACbE,EAAkB,EAAJF,EACdG,EAAuB,EAAJH,EACzBD,EAAmBI,IbzROC,EayR2B/yB,KAAKmyB,OAAOS,GbzRpCI,EayRiDhzB,KAAKmyB,OAAOS,EAAa,GbzRvEzjB,Ea0RqBnP,KAAKmyB,OAAOS,EAAa,Gb1R3C9F,Ea0R+C9sB,KAAKmyB,OAAOS,EAAa,GbzR5GG,GAAKC,GAAK,IAAM7jB,GAAK,KAAO2d,GAAK,Ka0RhC4F,EAAmBI,EAAmB,GAAKrrB,EAAiBzH,KAAKoyB,QAAQS,IACzEH,EAAmBI,EAAmB,GAAKrrB,EAAiBzH,KAAKoyB,QAAQS,EAAc,IACvFH,EAAmBI,EAAmB,GAAKrrB,EAAiBzH,KAAKoyB,QAAQS,EAAc,GAC1F,Cb9RoB,IAASE,EAAGC,EAAG7jB,EAAG2d,Ea+RvC,MAAMmD,EAAuB,IAAIrxB,EAAM0zB,YAAYI,EAAoBpC,EAAyBtsB,EAC7CssB,EAAyBrsB,EAAGrF,EAAMq0B,kBAAmBr0B,EAAMs0B,iBAC9GjD,EAAqBkD,eAAiB,WACtClD,EAAqBhO,aAAc,EACnCjiB,KAAKskB,SAASyC,SAASkJ,qBAAqBlnB,MAAQknB,EACpDjwB,KAAKskB,SAASyC,SAASuJ,yBAAyBvnB,MAAMzE,KAAKgsB,GAC3DtwB,KAAKskB,SAAS2C,oBAAqB,EAEnCjnB,KAAK6vB,kBAAoB,CACrBqC,YAAe,CACX/pB,KAAQkqB,EACRe,QAAWpD,EACXqD,KAAQhD,GAEZiD,aAAgB,CACZnrB,KAAQuqB,EACRU,QAAWnD,EACXoD,KAAQ/C,GAGnB,CAED,6BAAAiD,GACIvzB,KAAKwzB,yCACLxzB,KAAKyzB,yCACR,CAED,sCAAAD,GACIxzB,KAAK6vB,kBAAkBqC,YAAY/pB,KAAKzH,IAAIV,KAAKkyB,aACjDlyB,KAAK6vB,kBAAkBqC,YAAYkB,QAAQnR,aAAc,CAC5D,CAED,uCAAAwR,GACIzzB,KAAK6vB,kBAAkByD,aAAanrB,KAAKzH,IAAIV,KAAKszB,cAClDtzB,KAAK6vB,kBAAkByD,aAAaF,QAAQnR,aAAc,CAC7D,CAED,aAAAyR,CAAcrG,EAASsG,GACnB,MAAMnP,EAAWxkB,KAAKwkB,SAEtBA,EAASoP,WAAWtG,WAAW5sB,IAAI2sB,GACnC7I,EAASoP,WAAWtG,WAAWrL,aAAc,EAE7CuC,EAAS+M,cAAgBoC,CAC5B,CAEDE,eAAiB,WAEb,MAAMjN,EAAW,IAAIhoB,EAAM2d,QAE3B,OAAO,SAASuX,EAAkBC,EAAoBC,GAC/Bh0B,KAAKiR,YAAYxK,gBACnB,IACbmgB,EAASlmB,IAAIozB,EAAiB9vB,EAAIhE,KAAK0vB,iBAC1BoE,EAAiB7vB,EAAIjE,KAAK0vB,kBACvC1vB,KAAKskB,SAASyC,SAASH,SAAS7d,MAAMzE,KAAKsiB,GAC3C5mB,KAAKskB,SAASyC,SAASoJ,cAAcpnB,MAAMrI,IAAI,EAAMkmB,EAAS5iB,EAAG,EAAM4iB,EAAS3iB,GAChFjE,KAAKskB,SAASyC,SAASmJ,MAAMnnB,MAAMrI,IAAIqzB,EAAoBC,GAC3Dh0B,KAAKskB,SAAS2C,oBAAqB,EAEnD,CAEA,CAhBqB,GAkBjB,oBAAAgN,GACI,OAAOj0B,KAAK6vB,iBACf,CAED,aAAAppB,GACI,OAAOzG,KAAKiR,YAAYxK,eAC3B,CAED,UAAAytB,GACI,OAAOl0B,KAAKoyB,OACf,CAED,SAAA+B,GACI,OAAOn0B,KAAKmyB,MACf,CAED,cAAAiC,GACI,OAAOp0B,KAAKkyB,WACf,EC/ZE,MAAMmC,EAET70B,qBAAuB,MACvBA,sBAAwB,MACxBA,qBAAuB,EACvBA,mBAAqB,ECFzB,SAAS80B,EAAWC,GAEhB,IAAIC,EACAzzB,EACA0zB,EACAC,EACAC,EACAC,EACAC,EACAC,EACA3jB,EACA4jB,EAEAV,EA2BJE,EAAKS,UAAaC,IACd,GAAIA,EAAE9sB,KAAKgJ,UAAW,CAClBA,EAAY8jB,EAAE9sB,KAAKgJ,UACnB,MAAM+jB,EAAiB,IAAIz0B,aAAa0Q,GAClCgkB,EAAe,IAAI5tB,WAAwB,EAAbxG,GACpC,IAAK,IAAI8C,EAAI,EAAGA,EAAiB,EAAb9C,EAAgB8C,IAChCsxB,EAAatxB,GAAKwB,KAAKM,MAA0B,IAApBuvB,EAAerxB,IAEhD,IAAI0D,WAAWutB,EAAYJ,EAA8B,EAAb3zB,GAAgBL,IAAIy0B,GAChEZ,EAAKa,YAAY,CACbC,mBAAqB,GAErC,MAAe,GAAIJ,EAAE9sB,KAAK0kB,KAAM,CACpB,MAAMyI,EAAcL,EAAE9sB,KAAK0kB,KAAK0I,kBAAoB,GAtC5D,SAAcC,EAAgBD,EAAkBE,EAAUC,GAGtD,MAAMC,EAAgB5rB,YAAYC,MAC7B+qB,IAAYA,EAAa,IAAIx0B,YAAY8zB,EAAUuB,gBACxD,MAAMC,EAAgB,IAAItuB,WAAWutB,EAAYH,EAAgB,IACjE,IAAK,IAAI9wB,EAAI,EAAGA,EAAI,GAAIA,IACpBgyB,EAAchyB,GAAKwB,KAAKM,MAAoB,IAAd8vB,EAAS5xB,IAEvB,IAAItD,YAAYu0B,EAAYD,EAAiC,EAAb9zB,EAAgBszB,EAAUuB,eAClFl1B,IAAIq0B,GAChBP,EAAasB,QAAQC,YAAYtB,EAAeC,EAAiBG,EAAmBF,EACnDC,EAAkBc,EAAe,GAAIA,EAAe,GACpDA,EAAe,GAAIrB,EAAUuB,cAAeJ,EAAgBD,EAAkBx0B,GAC/G,MAAMi1B,EAAcjsB,YAAYC,MAGhCuqB,EAAKa,YAAY,CACba,UAAY,EACZT,eAAkBA,EAClBD,iBAAoBA,EACpBW,SAAYF,EAAcL,GAEjC,CAiBO9I,CADkBoI,EAAE9sB,KAAK0kB,KAAK2I,gBAAkB,EAChCF,EAAaL,EAAE9sB,KAAK0kB,KAAKsJ,KAAMlB,EAAE9sB,KAAK0kB,KAAK6I,eAAgBT,EAAE9sB,KAAK0kB,KAAKuJ,cACnG,MAAe,GAAInB,EAAE9sB,KAAKkuB,KAAM,CAEpBhC,EAAYY,EAAE9sB,KAAKkuB,KAAKhC,UAExBtzB,EAAak0B,EAAE9sB,KAAKkuB,KAAKt1B,WAEzB,MAAMu1B,EAA0BjC,EAAUkC,YACpCC,EAAsD,EAA1BnC,EAAUoC,cAEtCC,EAAkB,IAAIr2B,WAAW40B,EAAE9sB,KAAKkuB,KAAKK,iBAM7CC,EAJ4B51B,GADLu1B,EAA0BE,IAElBz1B,EAAaszB,EAAUkC,YAAc,EACrClC,EAAUuB,cAAgBvB,EAAUkC,YAAc,GACxC,GAA3BlC,EAAUuC,eAExBC,EAAqBxxB,KAAKC,MAAMqxB,EAAsBtC,EAAUuC,gBAAmB,EACnFE,EAAmB,CACrBC,OAAQ,CAAE,EACVC,IAAK,CACDC,OAAQ,IAAIC,YAAYC,OAAO,CAC3BC,QAA8B,EAArBP,EACTQ,QAA8B,EAArBR,EACTS,QAAQ,MAIpBJ,YAAYK,QAAQb,GACnBzuB,MAAMuvB,GACIN,YAAYO,YAAYD,EAAYV,KAE9C7uB,MAAMyvB,IACHlD,EAAekD,EACfjD,EAAgB,EAChBC,EAAkB3zB,EAAau1B,EAC/B3B,EAAiBD,EAAkB3zB,EAAay1B,EAChD3B,EAAoBF,EAAiB,GAAKN,EAAUoC,cACpD7B,EAAmBC,EAAoB9zB,EAAaszB,EAAUkC,YAC3ClC,EAAUuB,cAAgBvB,EAAUkC,YAAc,EACrEzB,EAAagC,EAAiBE,IAAIC,OAAOzvB,OACzC+sB,EAAKa,YAAY,CACbuC,yBAA2B,EAC3BvB,cAAiBtB,EACjB8C,cAAiB,EACjBC,eAAkB/C,EAClBgD,eAAkBlD,GACpB,GAET,EAET,CC/FO,MAAMmD,EAET,WAAAj4B,CAAYk4B,EAAS,IAEZA,EAAOC,WAAUD,EAAOC,SAAW,CAAC,EAAG,EAAG,IAC1CD,EAAOE,wBAAuBF,EAAOE,sBAAwB,CAAC,EAAG,GAAI,KACrEF,EAAOG,sBAAqBH,EAAOG,oBAAsB,CAAC,EAAG,EAAG,SACvCtvB,IAA1BmvB,EAAOI,iBAA8BJ,EAAOI,gBAAiB,QAC/BvvB,IAA9BmvB,EAAOK,qBAAkCL,EAAOK,oBAAqB,GAEzEr4B,KAAKs4B,YAAcN,EAAOM,YAC1Bt4B,KAAKu4B,sBAAsBP,EAAOjS,OAClC/lB,KAAKw4B,wBAAwBR,EAAOS,SAEpCz4B,KAAKi4B,UAAW,IAAIr5B,EAAMC,SAAUuQ,UAAU4oB,EAAOC,UACrDj4B,KAAKk4B,uBAAwB,IAAIt5B,EAAMC,SAAUuQ,UAAU4oB,EAAOE,uBAClEl4B,KAAKm4B,qBAAsB,IAAIv5B,EAAMC,SAAUuQ,UAAU4oB,EAAOG,qBAEhEn4B,KAAK0kB,MAAQsT,EAAOtT,MACpB1kB,KAAK2kB,YAAcqT,EAAOrT,YAC1B3kB,KAAKy4B,SAAWT,EAAOS,SACvBz4B,KAAK+lB,OAASiS,EAAOjS,OACrB/lB,KAAKq4B,mBAAqBL,EAAOK,mBACjCr4B,KAAK04B,SAAW,KAEhB14B,KAAK24B,uBAAyBX,EAAOW,yBAA0B,EAC/D34B,KAAK0vB,iBAAmB1vB,KAAK24B,uBAAyB,EAAIC,OAAOlJ,iBAEjE1vB,KAAKo4B,eAAiBJ,EAAOI,eAC7Bp4B,KAAK64B,qBAAuB74B,KAAK84B,iBAAiB92B,KAAKhC,MAEvDA,KAAK+4B,gBAAiB,EACtB/4B,KAAKg5B,kBAAmB,EACxBh5B,KAAKi5B,UAAW,EAEhBj5B,KAAKk5B,YAAc,KAEnBl5B,KAAKs0B,WAAa,KAClBt0B,KAAKu1B,iBAAmB,EACxBv1B,KAAKw1B,eAAiB,EAEtBx1B,KAAKm5B,aAAe,KAEpBn5B,KAAKusB,UAAY,KAEjBvsB,KAAKo5B,aAAc,EACnBp5B,KAAKq5B,uBAAwB,EAC7Br5B,KAAKs5B,2BAA4B,EAEjCt5B,KAAKu5B,UAAY,IAAI7N,EAErB1rB,KAAKw5B,UAAY,KACjBx5B,KAAKy5B,eAAiB,GAEtBz5B,KAAK05B,WAAa,EAClB15B,KAAK25B,aAAe,EAEpB35B,KAAK45B,qBAAuB,IAAIh7B,EAAMC,QACtCmB,KAAK65B,iBAAmB,IAAIj7B,EAAMC,QAElCmB,KAAK85B,cAAgB,IAAIl7B,EAAM2d,QAC/Bvc,KAAK+5B,kBAAoB,IAAIn7B,EAAM2d,QACnCvc,KAAKg6B,cAAgB,KACrBpB,OAAOpY,iBAAiB,YAAaxgB,KAAK2hB,YAAY3f,KAAKhC,OAC3D44B,OAAOpY,iBAAiB,YAAaxgB,KAAKohB,YAAYpf,KAAKhC,OAC3D44B,OAAOpY,iBAAiB,UAAWxgB,KAAKi6B,UAAUj4B,KAAKhC,OACvD44B,OAAOpY,iBAAiB,UAAWxgB,KAAKkY,UAAUlW,KAAKhC,OAEvDA,KAAKk6B,eAAiB,IAAI5X,EAC1BtiB,KAAKk6B,eAAelX,MACvB,CAED9K,UAAY,WAER,MAAMiiB,EAAU,IAAIv7B,EAAMC,QACpBu7B,EAAiB,IAAIx7B,EAAMgF,QAC3By2B,EAAkB,IAAIz7B,EAAMgF,QAElC,OAAO,SAASqxB,GAKZ,OAJAkF,EAAQz5B,IAAI,EAAG,GAAI,GACnBy5B,EAAQnf,mBAAmBhb,KAAK+lB,OAAOc,aACvCuT,EAAeE,iBAAiBH,EAAS90B,KAAK6P,GAAK,KACnDmlB,EAAgBC,iBAAiBH,GAAU90B,KAAK6P,GAAK,KAC7C+f,EAAE/S,MACN,IAAK,YACDliB,KAAK+lB,OAAOlN,GAAGmC,mBAAmBof,GACtC,MACA,IAAK,aACDp6B,KAAK+lB,OAAOlN,GAAGmC,mBAAmBqf,GACtC,MACA,IAAK,OACDr6B,KAAK+4B,gBAAkB/4B,KAAK+4B,eAChC,MACA,IAAK,OACD/4B,KAAKg5B,kBAAoBh5B,KAAKg5B,iBAClC,MACA,IAAK,OACDh5B,KAAKi5B,UAAYj5B,KAAKi5B,SAClBj5B,KAAKi5B,SACLj5B,KAAKw5B,UAAUjlB,MAAMqO,QAAU,QAE/B5iB,KAAKw5B,UAAUjlB,MAAMqO,QAAU,OAIvD,CAEA,CAnCgB,GAqCZ,WAAAjB,CAAY/G,GACR5a,KAAK85B,cAAcp5B,IAAIka,EAAM2f,QAAS3f,EAAM4f,QAC/C,CAED,WAAApZ,GACIphB,KAAK+5B,kBAAkBz1B,KAAKtE,KAAK85B,eACjC95B,KAAKg6B,cAAgBlwB,GACxB,CAEDmwB,UAAY,WAER,MAAMnG,EAAmB,IAAIl1B,EAAM2d,QAC7Bke,EAAc,IAAI77B,EAAM2d,QACxBiQ,EAAU,GAEhB,OAAO,SAAS5R,GACZ6f,EAAYn2B,KAAKtE,KAAK85B,eAAe1pB,IAAIpQ,KAAK+5B,mBAC9C,MACMW,EADc5wB,IACW9J,KAAKg6B,cAAgB,IAAOS,EAAYlxB,SAAW,GAC7EvJ,KAAK26B,2BAA6BD,IACnC16B,KAAK46B,oBAAoB9G,GACzBtH,EAAQjjB,OAAS,EACjBvJ,KAAKu5B,UAAU3N,+BAA+B5rB,KAAK+lB,OAAQ/lB,KAAK85B,cAAehG,GAC/E9zB,KAAK85B,cAAcp5B,IAAIka,EAAM2f,QAAS3f,EAAM4f,SAC5Cx6B,KAAKu5B,UAAUpN,mBAAmBnsB,KAAKusB,UAAWC,GAC9CA,EAAQjjB,OAAS,IACjBvJ,KAAK45B,qBAAqBt1B,KAAKtE,KAAK04B,SAAShkB,QAC7C1U,KAAK65B,iBAAiBv1B,KAAKkoB,EAAQ,GAAGtR,QACtClb,KAAK26B,2BAA4B,EACjC36B,KAAK66B,mCAAqC/wB,KAG9D,CAEA,CAzBgB,GA2BZ,mBAAA8wB,CAAoBE,GACZ96B,KAAKs4B,aACLwC,EAAc92B,EAAIhE,KAAKs4B,YAAYyC,YACnCD,EAAc72B,EAAIjE,KAAKs4B,YAAY0C,cAEnCh7B,KAAKy4B,SAASwC,QAAQH,EAE7B,CAED,IAAAzE,GAESr2B,KAAKs4B,aAAgBt4B,KAAKw4B,wBAC3Bx4B,KAAKs4B,YAAcvlB,SAASC,cAAc,OAC1ChT,KAAKs4B,YAAY/jB,MAAM4K,MAAQ,OAC/Bnf,KAAKs4B,YAAY/jB,MAAM8K,OAAS,OAChCtM,SAAS1K,KAAK4K,YAAYjT,KAAKs4B,cAGnC,MAAMxE,EAAmB,IAAIl1B,EAAM2d,QAuCnC,GAtCAvc,KAAK46B,oBAAoB9G,GAEpB9zB,KAAKu4B,sBACNv4B,KAAK+lB,OAAS,IAAInnB,EAAMs8B,kBAzKX,GAyK+CpH,EAAiB9vB,EAAI8vB,EAAiB7vB,EAAG,GAAK,KAC1GjE,KAAK+lB,OAAOvgB,SAASlB,KAAKtE,KAAKk4B,uBAC/Bl4B,KAAK+lB,OAAO7L,OAAOla,KAAKm4B,qBACxBn4B,KAAK+lB,OAAOlN,GAAGvU,KAAKtE,KAAKi4B,UAAUloB,aAGvC/P,KAAK0kB,MAAQ1kB,KAAK0kB,OAAS,IAAI9lB,EAAMu8B,MACrCn7B,KAAK2kB,YAAc3kB,KAAK2kB,aAAe,IAAI/lB,EAAMu8B,MACjDn7B,KAAKk5B,YAAc,IAAIzU,EAAYzkB,KAAK0kB,MAAO1kB,KAAK2kB,aACpD3kB,KAAKk5B,YAAYnU,kBACjB/kB,KAAKk5B,YAAYlT,mBACjBhmB,KAAKk5B,YAAY7R,oBAEZrnB,KAAKw4B,wBACNx4B,KAAKy4B,SAAW,IAAI75B,EAAMw8B,cAAc,CACpCC,WAAW,EACXC,UAAW,UAEft7B,KAAKy4B,SAAS8C,cAAcv7B,KAAK0vB,kBACjC1vB,KAAKy4B,SAAS+C,WAAY,EAC1Bx7B,KAAKy4B,SAASgD,cAAc,EAAK,EAAK,EAAK,GAC3Cz7B,KAAKy4B,SAASiD,QAAQ5H,EAAiB9vB,EAAG8vB,EAAiB7vB,IAE/DjE,KAAK27B,+BAED37B,KAAKq4B,qBACLr4B,KAAK04B,SAAW,IAAIxkB,EAAclU,KAAK+lB,OAAQ/lB,KAAKy4B,SAASpkB,YAC7DrU,KAAK04B,SAAShjB,YAAc,GAC5B1V,KAAK04B,SAASzjB,cAA0B,IAAV5P,KAAK6P,GACnClV,KAAK04B,SAAS1jB,cAAgB,GAC9BhV,KAAK04B,SAASrjB,eAAgB,EAC9BrV,KAAK04B,SAASpjB,cAAgB,IAC9BtV,KAAK04B,SAAShkB,OAAOpQ,KAAKtE,KAAKm4B,uBAG9Bn4B,KAAKw4B,sBAAuB,CACN,IAAIoD,gBAAe,KACtC57B,KAAK46B,oBAAoB9G,GACzB9zB,KAAKy4B,SAASiD,QAAQ5H,EAAiB9vB,EAAG8vB,EAAiB7vB,EAAE,IAElD43B,QAAQ77B,KAAKs4B,aAC5Bt4B,KAAKs4B,YAAYrlB,YAAYjT,KAAKy4B,SAASpkB,WAC9C,CAEDrU,KAAK87B,yCACL97B,KAAK+7B,gBAER,CAED,cAAAA,GACI/7B,KAAKw5B,UAAYzmB,SAASC,cAAc,OACxChT,KAAKw5B,UAAUjlB,MAAM/O,SAAW,WAChCxF,KAAKw5B,UAAUjlB,MAAMynB,QAAU,OAC/Bh8B,KAAKw5B,UAAUjlB,MAAM0nB,gBAAkB,UACvCj8B,KAAKw5B,UAAUjlB,MAAM2nB,OAAS,oBAC9Bl8B,KAAKw5B,UAAUjlB,MAAM4nB,OAAS,IAC9Bn8B,KAAKw5B,UAAUjlB,MAAM4K,MAAQ,QAC7Bnf,KAAKw5B,UAAUjlB,MAAM6nB,WAAa,QAClCp8B,KAAKw5B,UAAUjlB,MAAM8nB,SAAW,OAChCr8B,KAAKw5B,UAAUjlB,MAAM+nB,UAAY,OAEjC,MAAMC,EAAS,CACX,CAAC,kBAAmB,kBACpB,CAAC,iBAAkB,gBACnB,CAAC,YAAa,YACd,CAAC,kBAAmB,kBACpB,CAAC,MAAO,OACR,CAAC,gBAAiB,gBAClB,CAAC,aAAc,oBACf,CAAC,YAAa,aAGZC,EAAYzpB,SAASC,cAAc,OACzCwpB,EAAUjoB,MAAMqO,QAAU,QAE1B,IAAK,IAAI6Z,KAAeF,EAAQ,CAC5B,MAAMxuB,EAAMgF,SAASC,cAAc,OACnCjF,EAAIwG,MAAMqO,QAAU,YAEpB,MAAM8Z,EAAY3pB,SAASC,cAAc,OACzC0pB,EAAUnoB,MAAMqO,QAAU,aAC1B8Z,EAAUnoB,MAAM4K,MAAQ,QACxBud,EAAU7Z,UAAY,GAAG4Z,EAAY,OAErC,MAAME,EAAa5pB,SAASC,cAAc,OAC1C2pB,EAAWpoB,MAAMqO,QAAU,aAC3B+Z,EAAWpoB,MAAM4K,MAAQ,OACzBwd,EAAW9Z,UAAY,IAEvB,MAAM+Z,EAAW7pB,SAASC,cAAc,OACxC4pB,EAASroB,MAAMqO,QAAU,aACzBga,EAAS/Z,UAAY,GAErB7iB,KAAKy5B,eAAegD,EAAY,IAAMG,EAEtC7uB,EAAIkF,YAAYypB,GAChB3uB,EAAIkF,YAAY0pB,GAChB5uB,EAAIkF,YAAY2pB,GAEhBJ,EAAUvpB,YAAYlF,EACzB,CAED/N,KAAKw5B,UAAUvmB,YAAYupB,GAC3Bx8B,KAAKw5B,UAAUjlB,MAAMqO,QAAU,OAC/B5iB,KAAKy4B,SAASpkB,WAAWwoB,cAAcC,QAAQ98B,KAAKw5B,UACvD,CAED,0CAAAuD,CAA2C5d,EAAOE,GAC9Crf,KAAKg9B,kBAAoB,IAAIp+B,EAAMq+B,kBAAkB9d,EAAOE,EAAQ,CAChE6d,OAAQt+B,EAAMu+B,WACdC,eAAe,EACfC,aAAa,IAGjBr9B,KAAKg9B,kBAAkBM,aAAe,IAAI1+B,EAAM2+B,aAAape,EAAOE,GACpErf,KAAKg9B,kBAAkBM,aAAaJ,OAASt+B,EAAM4+B,YACnDx9B,KAAKg9B,kBAAkBM,aAAa3vB,KAAO/O,EAAMs0B,eACpD,CAED,sCAAA4I,GACI97B,KAAKy9B,kCAAoC,IAAI7+B,EAAMsqB,eAAe,CAC9DC,aAAc,mNAMdC,eAAgB,kKAMhB9C,YAAY,EACZD,WAAW,EACXE,aAAa,GAEpB,CAED,4BAAAoV,GAWI37B,KAAK09B,yBAA2B,IAAI9+B,EAAMsqB,eAAe,CACrDC,aAAc,2MAOdC,eAAgB,+hBAahBrC,SA/Ba,CACb4W,mBAAsB,CAClBhwB,KAAQ,IACR5E,MAAS,MAEb60B,mBAAsB,CAClBjwB,KAAQ,IACR5E,MAAS,OAyBbud,YAAY,EACZD,WAAW,EACXE,aAAa,EACbiK,SAAU5xB,EAAMi/B,eAChBC,SAAUl/B,EAAMm/B,eAChBC,cAAep/B,EAAMm/B,eACrBE,SAAUr/B,EAAMs/B,uBAChBC,cAAev/B,EAAMs/B,yBAEzBl+B,KAAK09B,yBAAyBpU,WAAWC,WAAY,EACrDvpB,KAAKo+B,qBAAuB,IAAIx/B,EAAMglB,KAAK,IAAIhlB,EAAM2oB,cAAc,EAAG,GAAIvnB,KAAK09B,0BAC/E19B,KAAKq+B,uBAAyB,IAAIz/B,EAAM0/B,oBAAoB,EAAG,EAAG,GAAI,EAAG,EAAG,EAC/E,CAEDC,wBAA0B,WAEtB,MAAMzK,EAAmB,IAAIl1B,EAAM2d,QAEnC,OAAO,WACgBvc,KAAKusB,UAAU9lB,gBACjB,IACbzG,KAAK46B,oBAAoB9G,GACzB9zB,KAAK+zB,mBAAqB/zB,KAAK+lB,OAAOyY,iBAAiB/5B,SAAS,GACtCzE,KAAK0vB,iBAAmBoE,EAAiB9vB,EAAI,IAC7ChE,KAAKg0B,mBAAqBh0B,KAAK+lB,OAAOyY,iBAAiB/5B,SAAS,GAChEzE,KAAK0vB,iBAAmBoE,EAAiB7vB,EAAI,IACvEjE,KAAKusB,UAAUsH,eAAeC,EAAkB9zB,KAAK+zB,mBAAoB/zB,KAAKg0B,oBAE9F,CAEA,CAhB8B,GAkB1B,QAAAyK,CAASC,EAASC,EAAU,IACpBA,EAAQn5B,WAAUm5B,EAAQn5B,UAAW,IAAI5G,EAAMC,SAAUuQ,UAAUuvB,EAAQn5B,WAC3Em5B,EAAQC,cAAaD,EAAQC,aAAc,IAAIhgC,EAAMO,YAAaiQ,UAAUuvB,EAAQC,cACxFD,EAAQnP,2BAA6BmP,EAAQnP,4BAA8B,EAC3EmP,EAAQlP,gCAAkCkP,EAAQlP,8BAClDzvB,KAAKk6B,eAAenX,OACpB,MAAM8b,EAAkB,CAACx1B,EAASC,KACf,KAAXD,EACArJ,KAAKk6B,eAAejX,WAAW,sBAE3B3Z,EACAtJ,KAAKk6B,eAAejX,WAAW,gBAAgB3Z,KAE/CtJ,KAAKk6B,eAAejX,WAAW,iBAEtC,EAEL,OAAO,IAAIpb,SAAQ,CAACC,EAASC,KACzB,IAAI+2B,EACAJ,EAAQK,SAAS,UACjBD,GAAkB,IAAItsB,GAAcF,YAAYosB,EAASG,GAClDH,EAAQK,SAAS,QACxBD,GAAkB,IAAI7sB,GAAYK,YAAYosB,EAASG,GAEvD92B,EAAO,IAAI6C,MAAM,kDAAkD8zB,MAEvEI,EACC72B,MAAMgJ,IACHjR,KAAKk6B,eAAelX,OACpBhjB,KAAKg/B,gBAAgB/tB,EAAa0tB,GAAS12B,MAAK,KAC5CH,GAAS,GACX,IAELsK,OAAO6iB,IACJltB,EAAO,IAAI6C,MAAM,2CAA2C8zB,KAAW,GACzE,GAET,CAED,eAAAM,CAAgB/tB,EAAa0tB,GACzB,OAAO,IAAI92B,SAASC,IAChB9H,KAAKk6B,eAAenX,OACpB/iB,KAAKk6B,eAAejX,WAAW,wBAC/B2V,OAAOqG,YAAW,KACdj/B,KAAKk/B,eAAejuB,EAAa0tB,EAAQnP,2BAA4BmP,EAAQn5B,SACzDm5B,EAAQC,YAAaD,EAAQlP,8BAA+BzvB,KAAK0vB,kBACrF1vB,KAAKm/B,gBAAgBluB,GAAahJ,MAAK,KACnCjI,KAAKk6B,eAAelX,OACpBlb,GAAS,GACX,GACH,EAAE,GAEZ,CAED,cAAAo3B,CAAejuB,EAAaue,EAA6B,EAAGhqB,EAAW,IAAI5G,EAAMC,QAAW6c,EAAa,IAAI9c,EAAMO,WACpGswB,GAAgC,EAAOC,EAAmB,GACrE,MAAM3uB,EAAakQ,EAAYxK,gBAC/BgE,QAAQC,IAAI,gBAAgB3J,KAE5BkQ,EAAY/N,0BACZlD,KAAKusB,UAAY+C,EAAUC,UAAUte,EAAaue,EAA4BC,EAA+BC,GAC7G1vB,KAAKusB,UAAU/mB,SAASlB,KAAKkB,GAC7BxF,KAAKusB,UAAU7Q,WAAWpX,KAAKoX,GAC/B1b,KAAKusB,UAAU6S,eAAgB,EAC/Bp/B,KAAKusB,UAAU9D,YAAc,GAC7BzoB,KAAKu+B,0BAELv+B,KAAKu1B,iBAAmBx0B,CAC3B,CAED,eAAAo+B,CAAgBluB,GACZ,OAAO,IAAIpJ,SAASC,IAChB,MAAM/G,EAAakQ,EAAYxK,gBAC/BzG,KAAKs0B,WD3VV,SAA0BvzB,GAC7B,MAAMs+B,EAAS,IAAIC,OACflsB,IAAIC,gBACA,IAAIlK,KAAK,CAAC,IAAKmrB,EAAWiL,WAAY,WAAY,CAC9C5xB,KAAM,6BAKZ6xB,EAAyBC,KExHpB,g5BFyHL/I,EAAkB,IAAIr2B,WAAWm/B,EAAuBj2B,QAC9D,IAAK,IAAI1F,EAAI,EAAGA,EAAI27B,EAAuBj2B,OAAQ1F,IAC/C6yB,EAAgB7yB,GAAK27B,EAAuBE,WAAW77B,GAgB3D,OAbAw7B,EAAOjK,YAAY,CACfiB,KAAQ,CACJK,gBAAmBA,EAAgBlvB,OACnCzG,WAAcA,EAEdszB,UAAa,CACToC,cAAiBpC,EAAUoC,cAC3BF,YAAelC,EAAUkC,YACzBX,cAAiBvB,EAAUuB,cAC3BgB,eAAkBvC,EAAUuC,mBAIjCyI,CACX,CC8T8BM,CAAiB5+B,GACnCf,KAAKs0B,WAAWU,UAAaC,IACzB,GAAIA,EAAE9sB,KAAK8tB,SACPj2B,KAAKo5B,aAAc,EACnBp5B,KAAKusB,UAAUmH,cAAc1zB,KAAK4/B,cAAe3K,EAAE9sB,KAAKotB,kBACxDv1B,KAAK25B,aAAe1E,EAAE9sB,KAAK+tB,cACxB,GAAIjB,EAAE9sB,KAAK03B,aACd7/B,KAAKo5B,aAAc,OAChB,GAAInE,EAAE9sB,KAAKwvB,wBAAyB,CACvCltB,QAAQC,IAAI,2CACZ1K,KAAKs0B,WAAWc,YAAY,CACxBjkB,UAAanR,KAAKusB,UAAU2H,aAAa1sB,SAE7CxH,KAAK4/B,cAAgB,IAAIr/B,YAAY00B,EAAE9sB,KAAK0vB,eAAgB5C,EAAE9sB,KAAK2vB,eAAgB7mB,EAAYxK,iBAC/FzG,KAAKm5B,aAAe,IAAI54B,YAAY00B,EAAE9sB,KAAKiuB,cAAenB,EAAE9sB,KAAKyvB,cAAe3mB,EAAYxK,iBAC5F,IAAK,IAAI5C,EAAI,EAAGA,EAAI9C,EAAY8C,IAAK7D,KAAKm5B,aAAat1B,GAAKA,CAChF,MAAuB,GAAIoxB,EAAE9sB,KAAKktB,kBAAmB,CACjC5qB,QAAQC,IAAI,6BACZ1K,KAAKusB,UAAUmH,cAAc1zB,KAAK4/B,cAAe3uB,EAAYxK,iBAC7D,MAAMopB,EAAoB7vB,KAAKusB,UAAU0H,uBACnC5D,EAAyBR,EAAkBqC,YAAYmB,KACvD/C,EAA2BT,EAAkByD,aAAaD,KAChE5oB,QAAQC,IAAI,6BAA+B2lB,EAAuBrsB,EAAI,MAAQqsB,EAAuBpsB,GACrGwG,QAAQC,IAAI,gCAAkC4lB,EAAyBtsB,EAAI,MAAQssB,EAAyBrsB,GAC5GjE,KAAK8/B,YAAW,GAAM,GACtB9/B,KAAKs5B,2BAA4B,EACjCxxB,GACH,EACJ,GAER,CAEDi4B,iBAAmB,WAEf,MAAMC,EAAiB,GACjBC,EAAe,IAAIrhC,EAAMC,QACzBqhC,EAAe,IAAIthC,EAAMC,QACzBshC,EAAa,IAAIvhC,EAAMC,QACvB8E,EAAc,IAAI/E,EAAMgF,QACxBkwB,EAAmB,IAAIl1B,EAAMC,QAC7Bs7B,EAAU,IAAIv7B,EAAMC,QAAQ,EAAG,GAAI,GAEnCuhC,EAAU,IAAIxhC,EAAMC,QACpBwhC,EAAYlT,GACPiT,EAAQ97B,KAAK6oB,EAAKtjB,KAAKuG,IAAI+c,EAAKvjB,KAAKL,SAMhD,OAAO,SAAS+2B,GAEZtgC,KAAK46B,oBAAoB9G,GACzB,MAAMyM,EAAqBzM,EAAiB7vB,EAAI,EAAOoB,KAAK6Y,IAAIle,KAAK+lB,OAAO5H,IAAM,EAAMvf,EAAMoV,UAAUC,SAClGusB,EAAYn7B,KAAKo7B,KAAK3M,EAAiB9vB,EAAI,EAAMu8B,GACjDG,EAAYr7B,KAAKo7B,KAAK3M,EAAiB7vB,EAAI,EAAMs8B,GACjDI,EAAet7B,KAAK0O,IAAIysB,GACxBI,EAAev7B,KAAK0O,IAAI2sB,GAC9B/8B,EAAYW,KAAKtE,KAAK+lB,OAAOc,aAAa9N,SAC1CpV,EAAYY,SAASvE,KAAKusB,UAAU1F,aAEpC,MAAM4F,EAAYzsB,KAAKusB,UAAUG,eACjC,IAAImU,EAAkB,EAClBtL,EAAmB,EACvB,MAAMzD,EAAYrF,EAAU0B,iBAAiB5kB,OAC7C,IAAK,IAAI1F,EAAI,EAAGA,EAAIiuB,EAAWjuB,IAAK,CAChC,MAAMspB,EAAOV,EAAU0B,iBAAiBtqB,GACxCs8B,EAAW77B,KAAK6oB,EAAK9d,QAAQyX,aAAanjB,GAC1C,MAAMm9B,EAAiBX,EAAW52B,SAClC42B,EAAWpwB,YAEXkwB,EAAa37B,KAAK67B,GAAYY,KAAK,GAAGhxB,YACtCmwB,EAAa57B,KAAK67B,GAAYa,KAAK,GAAGjxB,YAEtC,MAAMkxB,EAAmB9G,EAAQ9e,IAAI6kB,GAC/BgB,EAAmB/G,EAAQ9e,IAAI4kB,GAE/BkB,EAAKd,EAASlT,IAGfmT,IADaW,EAAoBN,EAAe,IADnCO,EAAoBN,EAAe,IAEFE,EAhC3B,MAgCwEA,EAAiBK,IAGjH5L,GAAoBpI,EAAKhlB,KAAKklB,QAAQ9jB,OACtCy2B,EAAea,GAAmB1T,EAClCA,EAAKhlB,KAAK24B,eAAiBA,EAC3BD,IACH,CAEDb,EAAez2B,OAASs3B,EACxBb,EAAenT,MAAK,CAACC,EAAG3d,IAChB2d,EAAE3kB,KAAK24B,eAAiB3xB,EAAEhH,KAAK24B,eAAuB,GAC7C,IAGjB9gC,KAAKu1B,iBAAmBA,EACxBv1B,KAAKw1B,eAAiB,EACtB,IAAI4L,EAAoB7L,EAAmBlB,EAAUkC,YACrD,IAAK,IAAI1yB,EAAI,EAAGA,EAAIg9B,EAAiBh9B,IAAK,CACtC,MAAMspB,EAAO6S,EAAen8B,GACTspB,EAAKhlB,KAAK24B,gBArDP,MAuDlB9gC,KAAKw1B,gBAAkBrI,EAAKhlB,KAAKklB,QAAQ9jB,QAE7C,MAAM83B,EAAiBlU,EAAKhlB,KAAKklB,QAAQ9jB,OACnC+3B,EAAkBD,EAAiBhN,EAAUkC,YACpC,IAAIh2B,YAAYP,KAAKm5B,aAAa3xB,OAAQ45B,EAAoBE,EAAiBD,GACrF3gC,IAAIysB,EAAKhlB,KAAKklB,SACvB+T,GAAqBE,CACxB,CAEb,CAEA,CAjFuB,GAmFnB,KAAAC,GACI,IAAIvhC,KAAKo4B,eAIL,MAAM,IAAIxtB,MAAM,yDAHhB42B,sBAAsBxhC,KAAK64B,sBAC3B74B,KAAKq5B,uBAAwB,CAIpC,CAED,IAAAoI,GACQzhC,KAAKo4B,gBAAkBp4B,KAAKq5B,wBAC5BqI,uBACA1hC,KAAKq5B,uBAAwB,EAEpC,CAEDsI,UAAY,WAER,IAAIC,EAAe93B,IACf+3B,EAAa,EAEjB,OAAO,WACH,MAAMC,EAAch4B,IACFg4B,EAAcF,GACf,GACb5hC,KAAK05B,WAAamI,EAClBA,EAAa,EACbD,EAAeE,GAEfD,GAEhB,CAEA,CAjBgB,GAmBZE,6BAA+B,WAE3B,MAAMC,EAAmB,IAAIpjC,EAAM2d,QAC7B0lB,EAAsB,IAAIrjC,EAAM2d,QAEtC,OAAO,WACHvc,KAAKy4B,SAASwC,QAAQgH,GAClBA,EAAoBj+B,IAAMg+B,EAAiBh+B,GAAKi+B,EAAoBh+B,IAAM+9B,EAAiB/9B,IACtFjE,KAAKu4B,sBACNv4B,KAAK+lB,OAAOmc,OAASD,EAAoBj+B,EAAIi+B,EAAoBh+B,EACjEjE,KAAK+lB,OAAOzN,0BAEZtY,KAAKs5B,4BACLt5B,KAAKu+B,0BACLv+B,KAAK+8B,2CAA2CkF,EAAoBj+B,EAAGi+B,EAAoBh+B,IAE/F+9B,EAAiB19B,KAAK29B,GAEtC,CAEA,CApBmC,GAsB/B,gBAAAnJ,GACQ94B,KAAKo4B,gBACLoJ,sBAAsBxhC,KAAK64B,sBAE/B74B,KAAKwY,SACLxY,KAAKmiC,QACR,CAED,MAAA3pB,GACQxY,KAAK04B,UACL14B,KAAK04B,SAASlgB,SAElBxY,KAAK8/B,aACL9/B,KAAK+hC,+BAEL/hC,KAAKoiC,mBACLpiC,KAAK2hC,YACL3hC,KAAKqiC,yBACLriC,KAAKsiC,aACLtiC,KAAKuiC,oBACR,CAEDF,uBAAyB,WAErB,IAAIG,EAEJ,OAAO,WACH,MAAMV,EAAch4B,IACf04B,IAAgBA,EAAiBV,GACtC,MAAMW,EAAYX,EAAcU,EAEhCxiC,KAAK0iC,uBAAuBZ,GAC5B9hC,KAAKymB,kBAAkBgc,GAEvBD,EAAiBV,CAC7B,CAEA,CAf6B,GAiBzBY,uBAAyB,WAErB,IAAIC,EAAmB,IAAI/jC,EAAMC,QAC7B+jC,EAAmB,IAAIhkC,EAAMC,QAC7BgkC,EAAe,IAAIjkC,EAAMC,QAE7B,OAAO,SAASijC,GACZ,GAAI9hC,KAAK26B,0BAA2B,CAChCiI,EAAiBt+B,KAAKtE,KAAK45B,sBAAsBxpB,IAAIpQ,KAAK+lB,OAAOvgB,UAAUuK,YAC3E8yB,EAAav+B,KAAKtE,KAAK65B,kBAAkBzpB,IAAIpQ,KAAK+lB,OAAOvgB,UAAUuK,YACnE,MAAM+yB,EAAgBz9B,KAAK+e,KAAKwe,EAAiBvnB,IAAIwnB,IAE/CtX,GADgBuX,GAAiBz9B,KAAK6P,GAAK,GAAK,IAAM,IACjC4tB,GAAiBhB,EAAc9hC,KAAK66B,oCAC/D8H,EAAiBr+B,KAAKtE,KAAK45B,sBAAsBmJ,KAAK/iC,KAAK65B,iBAAkBtO,GAC7EvrB,KAAK+lB,OAAO7L,OAAOyoB,GACnB3iC,KAAK04B,SAAShkB,OAAOpQ,KAAKq+B,GACtBpX,GAAK,IACLvrB,KAAK26B,2BAA4B,EAExC,CACb,CAEA,CAtB6B,GAwBzBlU,kBAAoB,WAEhB,MAAMqN,EAAmB,IAAIl1B,EAAM2d,QACnC,IAAIymB,GAAmB,EAEvB,OAAO,SAASP,GACZziC,KAAK46B,oBAAoB9G,GAGzB,GAAI9zB,KAAK26B,0BAA2B,CAChC36B,KAAKk5B,YAAYhS,0BAAyB,GAC1C,MAAM+b,EAA4B59B,KAAKwE,IAAI7J,KAAKk5B,YAAY9R,wBAAyB,GACrF,IAAI8b,EAAwB79B,KAAKuE,IAAIq5B,EALrB,GAK+DR,EAAW,GAC1FziC,KAAKk5B,YAAY/R,sBAAsB+b,GACvCljC,KAAKk5B,YAAYzS,kBAAkBzmB,KAAK65B,iBAAkB75B,KAAK+lB,OAAQ+N,GACvEkP,GAAmB,CACnC,KAAmB,CACH,IAAIC,EAGJ,GAFsBA,EAAlBD,EAA8C,EACjB39B,KAAKuE,IAAI5J,KAAKk5B,YAAY9R,wBAAyB,GAChF6b,EAA4B,EAAG,CAC/BjjC,KAAKk5B,YAAYzS,kBAAkBzmB,KAAK65B,iBAAkB75B,KAAK+lB,OAAQ+N,GACvE,IAAIoP,EAAwB79B,KAAKwE,IAAIo5B,EAdxB,IAcmER,EAAW,GAC3FziC,KAAKk5B,YAAY/R,sBAAsB+b,GACT,IAA1BA,GAA+BljC,KAAKk5B,YAAYhS,0BAAyB,EAChF,CACD8b,GAAmB,CACtB,CACb,CAEA,CA9BwB,GAgCpBZ,iBAAmB,WAEf,MAAM5V,EAAU,GACVsH,EAAmB,IAAIl1B,EAAM2d,QAEnC,OAAO,WACCvc,KAAK+4B,gBACL/4B,KAAK46B,oBAAoB9G,GACzBtH,EAAQjjB,OAAS,EACjBvJ,KAAKu5B,UAAU3N,+BAA+B5rB,KAAK+lB,OAAQ/lB,KAAK85B,cAAehG,GAC/E9zB,KAAKu5B,UAAUpN,mBAAmBnsB,KAAKusB,UAAWC,GAC9CA,EAAQjjB,OAAS,GACjBvJ,KAAKk5B,YAAYtT,yBAAwB,GACzC5lB,KAAKk5B,YAAYpT,4BAA4B0G,EAAQ,GAAGtR,OAAQlb,KAAK+lB,SAErE/lB,KAAKk5B,YAAYtT,yBAAwB,IAG7C5lB,KAAKk5B,YAAYtT,yBAAwB,EAEzD,CAEA,CAtBuB,GAwBnB0c,WAAa,WAET,MAAMxO,EAAmB,IAAIl1B,EAAM2d,QAEnC,OAAO,WACH,GAAIvc,KAAKi5B,SAAU,CACf,MAAMl4B,EAAaf,KAAKusB,UAAU9lB,gBAClCzG,KAAK46B,oBAAoB9G,GAEzB,MAAMqP,EAAYnjC,KAAK+lB,OAAOvgB,SACxB49B,EAAkB,IAAID,EAAUn/B,EAAEwF,QAAQ,OAAO25B,EAAUl/B,EAAEuF,QAAQ,OAAO25B,EAAUj/B,EAAEsF,QAAQ,MACtGxJ,KAAKy5B,eAAe/D,eAAe7S,UAAYugB,EAE/C,MAAMC,EAAerjC,KAAK04B,SAAShkB,OAC7B4uB,EAAqB,IAAID,EAAar/B,EAAEwF,QAAQ,OAAO65B,EAAap/B,EAAEuF,QAAQ,OAAO65B,EAAan/B,EAAEsF,QAAQ,MAClHxJ,KAAKy5B,eAAe4J,aAAaxgB,UAAYygB,EAE7C,MAAMrL,EAAWj4B,KAAK+lB,OAAOlN,GACvB0qB,EAAiB,IAAItL,EAASj0B,EAAEwF,QAAQ,OAAOyuB,EAASh0B,EAAEuF,QAAQ,OAAOyuB,EAAS/zB,EAAEsF,QAAQ,MAGlG,GAFAxJ,KAAKy5B,eAAexB,SAASpV,UAAY0gB,EAErCvjC,KAAK+4B,eAAgB,CACrB,MAAMyK,EAAYxjC,KAAKk5B,YAAYtU,WAAWpf,SACxCi+B,EAAkB,IAAID,EAAUx/B,EAAEwF,QAAQ,OAAOg6B,EAAUv/B,EAAEuF,QAAQ,OAAOg6B,EAAUt/B,EAAEsF,QAAQ,MACtGxJ,KAAKy5B,eAAeiK,eAAe7gB,UAAY4gB,CACnE,MACoBzjC,KAAKy5B,eAAeiK,eAAe7gB,UAAY,MAGnD7iB,KAAKy5B,eAAekK,IAAI9gB,UAAY7iB,KAAK05B,WACzC15B,KAAKy5B,eAAemK,aAAa/gB,UAAY,GAAGiR,EAAiB9vB,OAAO8vB,EAAiB7vB,IAEzF,MAAM4/B,EAAY7jC,KAAKu1B,iBAAmBx0B,EAAa,IACvDf,KAAKy5B,eAAe9F,iBAAiB9Q,UACjC,GAAG7iB,KAAKu1B,kCAAkCx0B,MAAe8iC,EAAUr6B,QAAQ,OAE/ExJ,KAAKy5B,eAAevD,SAASrT,UAAY,GAAG7iB,KAAK25B,aAAanwB,QAAQ,OACzE,CACb,CAEA,CAxCiB,GA0Cb,kBAAA+4B,GACQviC,KAAKg5B,kBACLh5B,KAAKk5B,YAAYlR,2BAA0B,GAC3ChoB,KAAKk5B,YAAYjR,8BAA8BjoB,KAAK04B,SAAShkB,OAAQ1U,KAAK+lB,OAAOlN,KAEjF7Y,KAAKk5B,YAAYlR,2BAA0B,EAElD,CAEDma,OAEW,WACH,MAAM2B,EAAuBpf,IACzB,IAAK,IAAIgB,KAAShB,EAAMc,SACpB,GAAIE,EAAMJ,QACV,OAAO,EAGX,OAAO,CAAK,EAGhB,IAAIye,EAA6BD,EAAoB9jC,KAAK0kB,OACtDsf,EAA4BF,EAAoB9jC,KAAK2kB,aAEzD,MAAMsf,EAAgBjkC,KAAKy4B,SAAS+C,UACpCx7B,KAAKy4B,SAAS+C,WAAY,GACtBuI,GAA8BC,KAC1BD,GAA4B/jC,KAAKy4B,SAAS0J,OAAOniC,KAAK0kB,MAAO1kB,KAAK+lB,QAClEie,GAA2BhkC,KAAKy4B,SAAS0J,OAAOniC,KAAK2kB,YAAa3kB,KAAK+lB,SAE/E/lB,KAAKy4B,SAAS0J,OAAOniC,KAAKusB,UAAWvsB,KAAK+lB,QACtC/lB,KAAKk5B,YAAY9R,wBAA0B,GAAKpnB,KAAKy4B,SAAS0J,OAAOniC,KAAKk5B,YAAYrU,YAAa7kB,KAAK+lB,QACxG/lB,KAAKg5B,kBAAkBh5B,KAAKy4B,SAAS0J,OAAOniC,KAAKk5B,YAAYpU,aAAc9kB,KAAK+lB,QACpF/lB,KAAKy4B,SAAS+C,UAAYyI,CACtC,EAIInE,WAAa,WAET,MAAMnZ,EAAa,IAAI/nB,EAAMgF,QACvBsgC,EAAsB,GACtBC,EAAkB,IAAIvlC,EAAMC,QAAQ,EAAG,GAAI,GAC3CulC,EAAc,IAAIxlC,EAAMC,QAAQ,EAAG,GAAI,GACvCwlC,EAAkB,IAAIzlC,EAAMC,QAC5BylC,EAAiB,IAAI1lC,EAAMC,QAEjC,OAAO,SAAS0lC,GAAQ,EAAOjE,GAAiB,GAC5C,IAAKiE,EAAO,CACRH,EAAY1jC,IAAI,EAAG,GAAI,GAAG0Y,gBAAgBpZ,KAAK+lB,OAAOrK,YACtD,IAAI8oB,GAA0B,EAC1BC,GAA0B,EAG9B,GAFIL,EAAY/oB,IAAI8oB,IAAoB,MAAMK,GAA0B,GACpEF,EAAehgC,KAAKtE,KAAK+lB,OAAOvgB,UAAU4K,IAAIi0B,GAAiB96B,UAAY,IAAKk7B,GAA0B,IACzGD,IAA4BC,EAAyB,MAC7D,CAED9d,EAAWriB,KAAKtE,KAAK+lB,OAAOc,aAAa9N,SACzC4N,EAAW+d,YAAY1kC,KAAK+lB,OAAOyY,kBACnC7X,EAAWpiB,SAASvE,KAAKusB,UAAU1F,aACnCqd,EAAoB,GAAKlkC,KAAK+lB,OAAOvgB,SAASxB,EAC9CkgC,EAAoB,GAAKlkC,KAAK+lB,OAAOvgB,SAASvB,EAC9CigC,EAAoB,GAAKlkC,KAAK+lB,OAAOvgB,SAAStB,EAEzClE,KAAKo5B,cACNp5B,KAAK+/B,iBAAiBO,GACtBtgC,KAAKo5B,aAAc,EACnBp5B,KAAKs0B,WAAWc,YAAY,CACxBvI,KAAM,CACFsJ,KAAQxP,EAAWliB,SACnBixB,eAAkBwO,EAClB3O,iBAAoBv1B,KAAKu1B,iBACzBC,eAAkBx1B,KAAKw1B,eACvBY,cAAiBp2B,KAAKm5B,aAAa3xB,UAG3C68B,EAAgB//B,KAAKtE,KAAK+lB,OAAOvgB,UACjC2+B,EAAgB7/B,KAAK8/B,GAErC,CAEA,CA3CiB,GA6Cb,YAAAO,GACI,OAAO3kC,KAAKusB,SACf"}